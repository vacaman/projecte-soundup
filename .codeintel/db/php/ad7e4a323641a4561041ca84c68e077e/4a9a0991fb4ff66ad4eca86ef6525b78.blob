<scope ilk="blob" lang="PHP" name="Util.php" src="/usr/share/php/XML/Util.php"><import line="907" module="PEAR.php" /><variable citdl="int" ilk="constant" line="53" name="XML_UTIL_ERROR_INVALID_CHARS" /><variable citdl="int" ilk="constant" line="58" name="XML_UTIL_ERROR_INVALID_START" /><variable citdl="int" ilk="constant" line="63" name="XML_UTIL_ERROR_NON_SCALAR_CONTENT" /><variable citdl="int" ilk="constant" line="68" name="XML_UTIL_ERROR_NO_TAG_NAME" /><variable citdl="int" ilk="constant" line="73" name="XML_UTIL_REPLACE_ENTITIES" /><variable citdl="int" ilk="constant" line="78" name="XML_UTIL_CDATA_SECTION" /><variable citdl="int" ilk="constant" line="83" name="XML_UTIL_ENTITIES_NONE" /><variable citdl="int" ilk="constant" line="89" name="XML_UTIL_ENTITIES_XML" /><variable citdl="int" ilk="constant" line="95" name="XML_UTIL_ENTITIES_XML_REQUIRED" /><variable citdl="int" ilk="constant" line="101" name="XML_UTIL_ENTITIES_HTML" /><variable citdl="int" ilk="constant" line="106" name="XML_UTIL_COLLAPSE_ALL" /><variable citdl="int" ilk="constant" line="111" name="XML_UTIL_COLLAPSE_XHTML_ONLY" /><scope doc="utility class for working with XML documents&#xA;&#xA;@category  XML&#xA;@package   XML_Util&#xA;@author    Stephan Schmidt &lt;schst@php.net&gt;&#xA;@copyright 2003-2008 Stephan Schmidt &lt;schst@php.net&gt;&#xA;@license   http://opensource.org/licenses/bsd-license New BSD License&#xA;@version   Release: 1.2.1&#xA;@link      http://pear.php.net/package/XML_Util" ilk="class" line="125" lineend="910" name="XML_Util"><scope doc="&#xA;return API version&#xA;Returns string  - $version API version&#xA;Access public&#xA;Static&#xA;" ilk="function" line="134" lineend="137" name="apiVersion" returns="string" signature="string apiVersion()" /><scope doc="&#xA;replace XML entities&#xA;With the optional second parameter, you may select, which&#xA;entities should be replaced.&#xA;&lt;code&gt;&#xA;require_once 'XML/Util.php';&#xA;// replace XML entites:&#xA;$string = XML_Util::replaceEntities('This string contains &lt; &amp; &gt;.');&#xA;&lt;/code&gt;&#xA;With the optional third parameter, you may pass the character encoding&#xA;&lt;code&gt;&#xA;require_once 'XML/Util.php';&#xA;// replace XML entites in UTF-8:&#xA;$string = XML_Util::replaceEntities(&#xA;    'This string contains &lt; &amp; &gt; as well as &#228;, &#246;, &#223;, &#224; and &#234;',&#xA;    XML_UTIL_ENTITIES_HTML,&#xA;    'UTF-8'&#xA;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $string  - string where XML special chars&#xA;                               should be replaced&#xA;&lt;int&gt; $replaceEntities  - setting for entities in attribute values&#xA;                               (one of XML_UTIL_ENTITIES_XML, &#xA;                               XML_UTIL_ENTITIES_XML_REQUIRED, &#xA;                               XML_UTIL_ENTITIES_HTML)&#xA;&lt;string&gt; $encoding  - encoding value (if any)...&#xA;                               must be a valid encoding as determined&#xA;                               by the htmlentities() function&#xA;Returns string  - string with replaced chars&#xA;Access public&#xA;Static&#xA;See reverseEntities()&#xA;" ilk="function" line="179" lineend="202" name="replaceEntities" returns="string" signature="string replaceEntities(string $string, int $replaceEntities = XML_UTIL_ENTITIES_XML, string $encoding = &apos;ISO-8859-1&apos;)"><variable citdl="string" ilk="argument" line="179" name="string" /><variable citdl="int" default="XML_UTIL_ENTITIES_XML" ilk="argument" line="179" name="replaceEntities" /><variable citdl="string" default="&apos;ISO-8859-1&apos;" ilk="argument" line="179" name="encoding" /></scope><scope doc="&#xA;reverse XML entities&#xA;With the optional second parameter, you may select, which&#xA;entities should be reversed.&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// reverse XML entites:&#xA;$string = XML_Util::reverseEntities(&apos;This string contains &amp;lt; &amp;amp; &amp;gt;.&apos;);&#xA;&lt;/code&gt;&#xA;With the optional third parameter, you may pass the character encoding&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// reverse XML entites in UTF-8:&#xA;$string = XML_Util::reverseEntities(&#xA;    &apos;This string contains &amp;lt; &amp;amp; &amp;gt; as well as&apos;&#xA;    . &apos; &amp;auml;, &amp;ouml;, &amp;szlig;, &amp;agrave; and &amp;ecirc;&apos;,&#xA;    XML_UTIL_ENTITIES_HTML,&#xA;    &apos;UTF-8&apos;&#xA;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $string  - string where XML special chars&#xA;                               should be replaced&#xA;&lt;int&gt; $replaceEntities  - setting for entities in attribute values&#xA;                               (one of XML_UTIL_ENTITIES_XML, &#xA;                               XML_UTIL_ENTITIES_XML_REQUIRED, &#xA;                               XML_UTIL_ENTITIES_HTML)&#xA;&lt;string&gt; $encoding  - encoding value (if any)...&#xA;                               must be a valid encoding as determined&#xA;                               by the html_entity_decode() function&#xA;Returns string  - string with replaced chars&#xA;Access public&#xA;Static&#xA;See replaceEntities()&#xA;" ilk="function" line="245" lineend="268" name="reverseEntities" returns="string" signature="string reverseEntities(string $string, int $replaceEntities = XML_UTIL_ENTITIES_XML, string $encoding = &apos;ISO-8859-1&apos;)"><variable citdl="string" ilk="argument" line="245" name="string" /><variable citdl="int" default="XML_UTIL_ENTITIES_XML" ilk="argument" line="245" name="replaceEntities" /><variable citdl="string" default="&apos;ISO-8859-1&apos;" ilk="argument" line="245" name="encoding" /></scope><scope doc="&#xA;build an xml declaration&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// get an XML declaration:&#xA;$xmlDecl = XML_Util::getXMLDeclaration(&apos;1.0&apos;, &apos;UTF-8&apos;, true);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $version  - xml version&#xA;&lt;string&gt; $encoding  - character encoding&#xA;&lt;bool&gt; $standalone  - document is standalone (or not)&#xA;Returns string  - xml declaration&#xA;Access public&#xA;Static&#xA;Uses attributesToString() to serialize the attributes of the XML declaration&#xA;" ilk="function" line="289" lineend="306" name="getXMLDeclaration" returns="string" signature="string getXMLDeclaration(string $version = &apos;1.0&apos;, string $encoding = null, bool $standalone = null)"><variable citdl="string" default="&apos;1.0&apos;" ilk="argument" line="289" name="version" /><variable citdl="string" default="null" ilk="argument" line="289" name="encoding" /><variable citdl="bool" default="null" ilk="argument" line="289" name="standalone" /><variable citdl="array()" line="294" name="attributes" /></scope><scope doc="&#xA;build a document type declaration&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// get a doctype declaration:&#xA;$xmlDecl = XML_Util::getDocTypeDeclaration(&apos;rootTag&apos;,&apos;myDocType.dtd&apos;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $root  - name of the root tag&#xA;&lt;string&gt; $uri  - uri of the doctype definition&#xA;                           (or array with uri and public id)&#xA;&lt;string&gt; $internalDtd  - internal dtd entries&#xA;Returns string  - doctype declaration&#xA;Access public&#xA;Static&#xA;Since 0.2&#xA;" ilk="function" line="328" lineend="343" name="getDocTypeDeclaration" returns="string" signature="string getDocTypeDeclaration(string $root, string $uri = null, string $internalDtd = null)"><variable citdl="string" ilk="argument" line="328" name="root" /><variable citdl="string" default="null" ilk="argument" line="328" name="uri" /><variable citdl="string" default="null" ilk="argument" line="328" name="internalDtd" /><variable citdl="sprintf()" line="331" name="ref" /></scope><scope doc="&#xA;create string representation of an attribute list&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// build an attribute string&#xA;$att = array(&#xA;             &apos;foo&apos;   =&gt;  &apos;bar&apos;,&#xA;             &apos;argh&apos;  =&gt;  &apos;tomato&apos;&#xA;           );&#xA;$attList = XML_Util::attributesToString($att);&#xA;&lt;/code&gt;&#xA;&lt;array&gt; $attributes  - attribute array&#xA;&lt;bool|array&gt; $sort  - sort attribute list alphabetically,&#xA;                              may also be an assoc array containing &#xA;                              the keys &apos;sort&apos;, &apos;multiline&apos;, &apos;indent&apos;, &#xA;                              &apos;linebreak&apos; and &apos;entities&apos;&#xA;&lt;bool&gt; $multiline  - use linebreaks, if more than&#xA;                              one attribute is given&#xA;&lt;string&gt; $indent  - string used for indentation of&#xA;                              multiline attributes&#xA;&lt;string&gt; $linebreak  - string used for linebreaks of&#xA;                              multiline attributes&#xA;&lt;int&gt; $entities  - setting for entities in attribute values&#xA;                              (one of XML_UTIL_ENTITIES_NONE, &#xA;                              XML_UTIL_ENTITIES_XML, &#xA;                              XML_UTIL_ENTITIES_XML_REQUIRED, &#xA;                              XML_UTIL_ENTITIES_HTML)&#xA;Returns string  - string representation of the attributes&#xA;Access public&#xA;Static&#xA;Uses replaceEntities() to replace XML entities in attribute values&#xA;Todo allow sort also to be an options array&#xA;" ilk="function" line="383" lineend="439" name="attributesToString" returns="string" signature="string attributesToString(array $attributes, $sort = true, bool $multiline = false, string $indent = &apos;    &apos;, string $linebreak = &quot;\n&quot;, int $entities = XML_UTIL_ENTITIES_XML)"><variable citdl="array" ilk="argument" line="383" name="attributes" /><variable default="true" ilk="argument" line="383" name="sort" /><variable citdl="bool" default="false" ilk="argument" line="383" name="multiline" /><variable citdl="string" default="&apos;    &apos;" ilk="argument" line="383" name="indent" /><variable citdl="string" default="&quot;\n&quot;" ilk="argument" line="383" name="linebreak" /><variable citdl="int" default="XML_UTIL_ENTITIES_XML" ilk="argument" line="383" name="entities" /><variable citdl="attributes[]" line="414" name="value" /><variable citdl="string" line="408" name="string" /><variable line="414" name="key" /><variable citdl="boolean" line="424" name="first" /></scope><scope doc="&#xA;Collapses empty tags.&#xA;&lt;string&gt; $xml  - XML&#xA;&lt;int&gt; $mode  - Whether to collapse all empty tags (XML_UTIL_COLLAPSE_ALL)&#xA;                     or only XHTML (XML_UTIL_COLLAPSE_XHTML_ONLY) ones.&#xA;Returns string  - XML&#xA;Access public&#xA;Static&#xA;Todo PEAR CS - unable to avoid &quot;space after open parens&quot; error&#xA;      in the IF branch&#xA;" ilk="function" line="454" lineend="465" name="collapseEmptyTags" returns="string" signature="string collapseEmptyTags(string $xml, int $mode = XML_UTIL_COLLAPSE_ALL)"><variable citdl="string" ilk="argument" line="454" name="xml" /><variable citdl="int" default="XML_UTIL_COLLAPSE_ALL" ilk="argument" line="454" name="mode" /></scope><scope doc="&#xA;create a tag&#xA;This method will call XML_Util::createTagFromArray(), which&#xA;is more flexible.&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// create an XML tag:&#xA;$tag = XML_Util::createTag(&apos;myNs:myTag&apos;, &#xA;    array(&apos;foo&apos; =&gt; &apos;bar&apos;), &#xA;    &apos;This is inside the tag&apos;, &#xA;    &apos;http://www.w3c.org/myNs#&apos;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $qname  - qualified tagname (including namespace)&#xA;&lt;array&gt; $attributes  - array containg attributes&#xA;&lt;mixed&gt; $content  - the content&#xA;&lt;string&gt; $namespaceUri  - URI of the namespace&#xA;&lt;int&gt; $replaceEntities  - whether to replace XML special chars in&#xA;                               content, embedd it in a CData section &#xA;                               or none of both&#xA;&lt;bool&gt; $multiline  - whether to create a multiline tag where&#xA;                               each attribute gets written to a single line&#xA;&lt;string&gt; $indent  - string used to indent attributes&#xA;                               (_auto indents attributes so they start &#xA;                               at the same column)&#xA;&lt;string&gt; $linebreak  - string used for linebreaks&#xA;&lt;bool&gt; $sortAttributes  - Whether to sort the attributes or not&#xA;Returns string  - XML tag&#xA;Access public&#xA;Static&#xA;See createTagFromArray()&#xA;Uses createTagFromArray() to create the tag&#xA;" ilk="function" line="504" lineend="526" name="createTag" returns="string" signature="string createTag(string $qname, array $attributes = array(), mixed $content = null, string $namespaceUri = null, int $replaceEntities = XML_UTIL_REPLACE_ENTITIES, bool $multiline = false, string $indent = &apos;_auto&apos;, string $linebreak = &quot;\n&quot;, bool $sortAttributes = true)"><variable citdl="string" ilk="argument" line="504" name="qname" /><variable citdl="array" default="array()" ilk="argument" line="504" name="attributes" /><variable citdl="mixed" default="null" ilk="argument" line="504" name="content" /><variable citdl="string" default="null" ilk="argument" line="504" name="namespaceUri" /><variable citdl="int" default="XML_UTIL_REPLACE_ENTITIES" ilk="argument" line="504" name="replaceEntities" /><variable citdl="bool" default="false" ilk="argument" line="504" name="multiline" /><variable citdl="string" default="&apos;_auto&apos;" ilk="argument" line="504" name="indent" /><variable citdl="string" default="&quot;\n&quot;" ilk="argument" line="504" name="linebreak" /><variable citdl="bool" default="true" ilk="argument" line="504" name="sortAttributes" /><variable citdl="array()" line="512" name="tag" /></scope><scope doc="&#xA;create a tag from an array&#xA;this method awaits an array in the following format&#xA;&lt;pre&gt;&#xA;array(&#xA;    // qualified name of the tag&#xA;    &apos;qname&apos; =&gt; $qname        &#xA;    // namespace prefix (optional, if qname is specified or no namespace)&#xA;    &apos;namespace&apos; =&gt; $namespace    &#xA;    // local part of the tagname (optional, if qname is specified)&#xA;    &apos;localpart&apos; =&gt; $localpart,   &#xA;    // array containing all attributes (optional)&#xA;    &apos;attributes&apos; =&gt; array(),      &#xA;    // tag content (optional)&#xA;    &apos;content&apos; =&gt; $content,     &#xA;    // namespaceUri for the given namespace (optional)&#xA;    &apos;namespaceUri&apos; =&gt; $namespaceUri &#xA;)&#xA;&lt;/pre&gt;&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;$tag = array(&#xA;    &apos;qname&apos;        =&gt; &apos;foo:bar&apos;,&#xA;    &apos;namespaceUri&apos; =&gt; &apos;http://foo.com&apos;,&#xA;    &apos;attributes&apos;   =&gt; array(&apos;key&apos; =&gt; &apos;value&apos;, &apos;argh&apos; =&gt; &apos;fruit&amp;vegetable&apos;),&#xA;    &apos;content&apos;      =&gt; &apos;I\&apos;m inside the tag&apos;,&#xA;);&#xA;// creating a tag with qualified name and namespaceUri&#xA;$string = XML_Util::createTagFromArray($tag);&#xA;&lt;/code&gt;&#xA;&lt;array&gt; $tag  - tag definition&#xA;&lt;int&gt; $replaceEntities  - whether to replace XML special chars in&#xA;                               content, embedd it in a CData section &#xA;                               or none of both&#xA;&lt;bool&gt; $multiline  - whether to create a multiline tag where each&#xA;                               attribute gets written to a single line&#xA;&lt;string&gt; $indent  - string used to indent attributes&#xA;                               (_auto indents attributes so they start &#xA;                               at the same column)&#xA;&lt;string&gt; $linebreak  - string used for linebreaks&#xA;&lt;bool&gt; $sortAttributes  - Whether to sort the attributes or not&#xA;Returns string  - XML tag&#xA;Access public&#xA;Static&#xA;See createTag()&#xA;Uses attributesToString() to serialize the attributes of the tag&#xA;Uses splitQualifiedName() to get local part and namespace of a qualified name&#xA;Uses createCDataSection()&#xA;Uses raiseError()&#xA;" ilk="function" line="587" lineend="672" name="createTagFromArray" returns="string" signature="string createTagFromArray(array $tag, int $replaceEntities = XML_UTIL_REPLACE_ENTITIES, bool $multiline = false, string $indent = &apos;_auto&apos;, string $linebreak = &quot;\n&quot;, bool $sortAttributes = true)"><variable citdl="array" ilk="argument" line="587" name="tag" /><variable citdl="int" default="XML_UTIL_REPLACE_ENTITIES" ilk="argument" line="587" name="replaceEntities" /><variable citdl="bool" default="false" ilk="argument" line="587" name="multiline" /><variable citdl="string" default="&apos;_auto&apos;" ilk="argument" line="587" name="indent" /><variable citdl="string" default="&quot;\n&quot;" ilk="argument" line="587" name="linebreak" /><variable citdl="bool" default="true" ilk="argument" line="587" name="sortAttributes" /><variable citdl="XML_Util.splitQualifiedName()" line="625" name="parts" /><variable line="608" name="ns" /><variable citdl="tag[]" line="608" name="uri" /><variable citdl="XML_Util.attributesToString()" line="653" name="attList" /></scope><scope doc="&#xA;create a start element&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// create an XML start element:&#xA;$tag = XML_Util::createStartElement(&apos;myNs:myTag&apos;, &#xA;    array(&apos;foo&apos; =&gt; &apos;bar&apos;) ,&apos;http://www.w3c.org/myNs#&apos;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $qname  - qualified tagname (including namespace)&#xA;&lt;array&gt; $attributes  - array containg attributes&#xA;&lt;string&gt; $namespaceUri  - URI of the namespace&#xA;&lt;bool&gt; $multiline  - whether to create a multiline tag where each&#xA;                              attribute gets written to a single line&#xA;&lt;string&gt; $indent  - string used to indent attributes (_auto indents&#xA;                              attributes so they start at the same column)&#xA;&lt;string&gt; $linebreak  - string used for linebreaks&#xA;&lt;bool&gt; $sortAttributes  - Whether to sort the attributes or not&#xA;Returns string  - XML start element&#xA;Access public&#xA;Static&#xA;See createEndElement(), createTag()&#xA;" ilk="function" line="700" lineend="735" name="createStartElement" returns="string" signature="string createStartElement(string $qname, array $attributes = array(), string $namespaceUri = null, bool $multiline = false, string $indent = &apos;_auto&apos;, string $linebreak = &quot;\n&quot;, bool $sortAttributes = true)"><variable citdl="string" ilk="argument" line="700" name="qname" /><variable citdl="array" default="array()" ilk="argument" line="700" name="attributes" /><variable citdl="string" default="null" ilk="argument" line="700" name="namespaceUri" /><variable citdl="bool" default="false" ilk="argument" line="700" name="multiline" /><variable citdl="string" default="&apos;_auto&apos;" ilk="argument" line="700" name="indent" /><variable citdl="string" default="&quot;\n&quot;" ilk="argument" line="700" name="linebreak" /><variable citdl="bool" default="true" ilk="argument" line="700" name="sortAttributes" /><variable citdl="XML_Util.splitQualifiedName()" line="710" name="parts" /><variable citdl="XML_Util.attributesToString()" line="732" name="attList" /><variable citdl="sprintf()" line="733" name="element" /></scope><scope doc="&#xA;create an end element&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// create an XML start element:&#xA;$tag = XML_Util::createEndElement(&apos;myNs:myTag&apos;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $qname  - qualified tagname (including namespace)&#xA;Returns string  - XML end element&#xA;Access public&#xA;Static&#xA;See createStartElement(), createTag()&#xA;" ilk="function" line="754" lineend="758" name="createEndElement" returns="string" signature="string createEndElement(string $qname)"><variable citdl="string" ilk="argument" line="754" name="qname" /><variable citdl="sprintf()" line="756" name="element" /></scope><scope doc="&#xA;create an XML comment&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// create an XML start element:&#xA;$tag = XML_Util::createComment(&apos;I am a comment&apos;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $content  - content of the comment&#xA;Returns string  - XML comment&#xA;Access public&#xA;Static&#xA;" ilk="function" line="776" lineend="780" name="createComment" returns="string" signature="string createComment(string $content)"><variable citdl="string" ilk="argument" line="776" name="content" /><variable citdl="sprintf()" line="778" name="comment" /></scope><scope doc="&#xA;create a CData section&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// create a CData section&#xA;$tag = XML_Util::createCDataSection(&apos;I am content.&apos;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $data  - data of the CData section&#xA;Returns string  - CData section with content&#xA;Access public&#xA;Static&#xA;" ilk="function" line="798" lineend="803" name="createCDataSection" returns="string" signature="string createCDataSection(string $data)"><variable citdl="string" ilk="argument" line="798" name="data" /></scope><scope doc="&#xA;split qualified name and return namespace and local part&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// split qualified tag&#xA;$parts = XML_Util::splitQualifiedName(&apos;xslt:stylesheet&apos;);&#xA;&lt;/code&gt;&#xA;the returned array will contain two elements:&#xA;&lt;pre&gt;&#xA;array(&#xA;    &apos;namespace&apos; =&gt; &apos;xslt&apos;,&#xA;    &apos;localPart&apos; =&gt; &apos;stylesheet&apos;&#xA;);&#xA;&lt;/pre&gt;&#xA;&lt;string&gt; $qname  - qualified tag name&#xA;&lt;string&gt; $defaultNs  - default namespace (optional)&#xA;Returns array  - array containing namespace and local part&#xA;Access public&#xA;Static&#xA;" ilk="function" line="829" lineend="842" name="splitQualifiedName" returns="array" signature="array splitQualifiedName(string $qname, string $defaultNs = null)"><variable citdl="string" ilk="argument" line="829" name="qname" /><variable citdl="string" default="null" ilk="argument" line="829" name="defaultNs" /><variable citdl="explode()" line="832" name="tmp" /></scope><scope doc="&#xA;check, whether string is valid XML name&#xA;&lt;p&gt;XML names are used for tagname, attribute names and various&#xA;other, lesser known entities.&lt;/p&gt;&#xA;&lt;p&gt;An XML name may only consist of alphanumeric characters,&#xA;dashes, undescores and periods, and has to start with a letter&#xA;or an underscore.&lt;/p&gt;&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// verify tag name&#xA;$result = XML_Util::isValidName(&apos;invalidTag?&apos;);&#xA;if (is_a($result, &apos;PEAR_Error&apos;)) {&#xA;   print &apos;Invalid XML name: &apos; . $result-&gt;getMessage();&#xA;}&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $string  - string that should be checked&#xA;Returns mixed  - true, if string is a valid XML name, PEAR error otherwise&#xA;Access public&#xA;Static&#xA;Todo support for other charsets&#xA;Todo PEAR CS - unable to avoid 85-char limit on second preg_match&#xA;" ilk="function" line="871" lineend="889" name="isValidName" returns="mixed" signature="mixed isValidName(string $string)"><variable citdl="string" ilk="argument" line="871" name="string" /></scope><scope doc="&#xA;replacement for XML_Util::raiseError&#xA;Avoids the necessity to always require&#xA;PEAR.php&#xA;&lt;string&gt; $msg  - error message&#xA;&lt;int&gt; $code  - error code&#xA;Returns pear_error &#xA;Access public&#xA;Static&#xA;Todo PEAR CS - should this use include_once instead?&#xA;" ilk="function" line="905" lineend="909" name="raiseError" returns="PEAR_Error" signature="pear_error raiseError(string $msg, int $code)"><variable citdl="string" ilk="argument" line="905" name="msg" /><variable citdl="int" ilk="argument" line="905" name="code" /></scope></scope></scope>