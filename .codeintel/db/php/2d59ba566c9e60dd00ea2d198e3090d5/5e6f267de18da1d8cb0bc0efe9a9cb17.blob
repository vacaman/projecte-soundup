<scope ilk="blob" lang="PHP" name="PEAR.php" src="/usr/share/php/PEAR.php"><import line="526" module="PEAR/FixPHP5PEARWarnings.php" /><import line="730" module="PEAR5.php" /><variable citdl="int" ilk="constant" line="25" name="PEAR_ERROR_RETURN" /><variable citdl="int" ilk="constant" line="26" name="PEAR_ERROR_PRINT" /><variable citdl="int" ilk="constant" line="27" name="PEAR_ERROR_TRIGGER" /><variable citdl="int" ilk="constant" line="28" name="PEAR_ERROR_DIE" /><variable citdl="int" ilk="constant" line="29" name="PEAR_ERROR_CALLBACK" /><variable citdl="int" ilk="constant" line="34" name="PEAR_ERROR_EXCEPTION" /><variable ilk="constant" line="36" name="PEAR_ZE2" /><variable citdl="boolean" ilk="constant" line="40" name="OS_WINDOWS" /><variable citdl="boolean" ilk="constant" line="41" name="OS_UNIX" /><variable citdl="string" ilk="constant" line="42" name="PEAR_OS" /><scope doc="Base class for other PEAR classes.  Provides rudimentary&#xA;emulation of destructors.&#xA;&#xA;If you want a destructor in your class, inherit PEAR and make a&#xA;destructor method called _yourclassname (same name as the&#xA;constructor, but with a &quot;_&quot; prefix).  Also, in your constructor you&#xA;have to call the PEAR constructor: $this-&gt;PEAR();.&#xA;The destructor method will be called without parameters.  Note that&#xA;at in some SAPI implementations (such as Apache), any output during&#xA;the request shutdown (in which destructors are called) seems to be&#xA;discarded.  If you need to get any debug information from your&#xA;destructor, use error_log(), syslog() or something similar.&#xA;&#xA;IMPORTANT! To use the emulated destructors you need to create the&#xA;objects by reference: $obj =&amp; new PEAR_child;&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Stig Bakken &lt;ssb@php.net&gt;&#xA;@author     Tomas V.V. Cox &lt;cox@idecnet.com&gt;&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2006 The PHP Group&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/package/PEAR&#xA;@see        PEAR_Error&#xA;@since      Class available since PHP 4.0.2&#xA;@link        http://pear.php.net/manual/en/core.pear.php#core.pear.pear" ilk="class" line="87" lineend="727" name="PEAR"><variable citdl="bool" doc="Whether to enable internal debug messages.&#xA;&#xA;@var     bool&#xA;@access  private" line="95" name="_debug" /><variable citdl="int" doc="Default error mode for this object.&#xA;&#xA;@var     int&#xA;@access  private" line="103" name="_default_error_mode" /><variable citdl="int" doc="Default error options used for this object when error mode&#xA;is PEAR_ERROR_TRIGGER.&#xA;&#xA;@var     int&#xA;@access  private" line="112" name="_default_error_options" /><variable citdl="string" doc="Default error handler (callback) for this object, if error mode is&#xA;PEAR_ERROR_CALLBACK.&#xA;&#xA;@var     string&#xA;@access  private" line="121" name="_default_error_handler" /><variable citdl="string" doc="Which class to use for error objects.&#xA;&#xA;@var     string&#xA;@access  private" line="129" name="_error_class" /><variable citdl="array" doc="An array of expected errors.&#xA;&#xA;@var     array&#xA;@access  private" line="137" name="_expected_errors" /><scope attributes="__ctor__" doc="&#xA;Constructor.  Registers this object in&#xA;$_PEAR_destructor_object_list for destructor emulation if a&#xA;destructor object exists.&#xA;&lt;string&gt; $error_class  - (optional) which class to use for&#xA;       error objects, defaults to PEAR_Error.&#xA;Access public&#xA;Returns void &#xA;" ilk="function" line="149" lineend="174" name="PEAR" signature="void PEAR(string $error_class = null)"><variable citdl="string" default="null" ilk="argument" line="149" name="error_class" /><variable citdl="strtolower()" line="151" name="classname" /><variable attributes="__not_yet_defined__" line="163" name="_PEAR_destructor_object_list" /><variable citdl="string" line="161" name="destructor" /></scope><scope doc="&#xA;Destructor (the emulated type of...).  Does nothing right now,&#xA;but is included for forward compatibility, so subclass&#xA;destructors should always call it.&#xA;See the note in the class desciption about output from&#xA;destructors.&#xA;Access public&#xA;Returns void &#xA;" ilk="function" line="187" lineend="191" name="_PEAR" signature="void _PEAR()" /><scope doc="&#xA;If you have a class that&apos;s mostly/entirely static, and you need static&#xA;properties, you can use this method to simulate them. Eg. in your method(s)&#xA;do this: $myVar = &amp;PEAR::getStaticProperty(&apos;myclass&apos;, &apos;myVar&apos;);&#xA;You MUST use a reference, or they will not persist!&#xA;Access public&#xA;&lt;string&gt; $class  - The calling classname, to prevent clashes&#xA;&lt;string&gt; $var  - The variable to retrieve.&#xA;Returns mixed  - A reference to the variable. If not set it will be&#xA;                auto initialised to NULL.&#xA;" ilk="function" line="205" lineend="217" name="getStaticProperty" returns="mixed" signature="mixed &amp;getStaticProperty(string $class, string $var)"><variable citdl="string" ilk="argument" line="205" name="class" /><variable citdl="string" ilk="argument" line="205" name="var" /></scope><variable attributes="static" line="207" name="properties" /><scope doc="&#xA;Use this function to register a shutdown method for static&#xA;classes.&#xA;Access public&#xA;&lt;mixed&gt; $func  - The function name (or array of class/method) to call&#xA;&lt;mixed&gt; $args  - The arguments to pass to the function&#xA;Returns void &#xA;" ilk="function" line="228" lineend="237" name="registerShutdownFunc" signature="void registerShutdownFunc(mixed $func, mixed $args = array())"><variable citdl="mixed" ilk="argument" line="228" name="func" /><variable citdl="mixed" default="array()" ilk="argument" line="228" name="args" /></scope><scope doc="&#xA;Tell whether a value is a PEAR error.&#xA;&lt;mixed&gt; $data  - the value to test&#xA;&lt;int&gt; $code  - if $data is an error object, return true&#xA;                       only if $code is a string and&#xA;                       $obj-&gt;getMessage() == $code or&#xA;                       $code is an integer and $obj-&gt;getCode() == $code&#xA;Access  public&#xA;Returns bool  - true if parameter is an error&#xA;" ilk="function" line="250" lineend="263" name="isError" returns="bool" signature="bool isError(mixed $data, int $code = null)"><variable citdl="mixed" ilk="argument" line="250" name="data" /><variable citdl="int" default="null" ilk="argument" line="250" name="code" /></scope><scope doc="&#xA;Sets how errors generated by this object should be handled.&#xA;Can be invoked both in objects and statically.  If called&#xA;statically, setErrorHandling sets the default behaviour for all&#xA;PEAR objects.  If called in an object, setErrorHandling sets&#xA;the default behaviour for that object.&#xA;&lt;int&gt; $mode  - &#xA;       One of PEAR_ERROR_RETURN, PEAR_ERROR_PRINT,&#xA;       PEAR_ERROR_TRIGGER, PEAR_ERROR_DIE,&#xA;       PEAR_ERROR_CALLBACK or PEAR_ERROR_EXCEPTION.&#xA;&lt;mixed&gt; $options  - &#xA;       When $mode is PEAR_ERROR_TRIGGER, this is the error level (one&#xA;       of E_USER_NOTICE, E_USER_WARNING or E_USER_ERROR).&#xA;       When $mode is PEAR_ERROR_CALLBACK, this parameter is expected&#xA;       to be the callback function or method.  A callback&#xA;       function is a string with the name of the function, a&#xA;       callback method is an array of two elements: the element&#xA;       at index 0 is the object, and the element at index 1 is&#xA;       the name of the method to call in the object.&#xA;       When $mode is PEAR_ERROR_PRINT or PEAR_ERROR_DIE, this is&#xA;       a printf format string used when printing the error&#xA;       message.&#xA;Access public&#xA;Returns void &#xA;See PEAR_ERROR_RETURN&#xA;See PEAR_ERROR_PRINT&#xA;See PEAR_ERROR_TRIGGER&#xA;See PEAR_ERROR_DIE&#xA;See PEAR_ERROR_CALLBACK&#xA;See PEAR_ERROR_EXCEPTION&#xA;Since PHP 4.0.5&#xA;" ilk="function" line="303" lineend="338" name="setErrorHandling" signature="void setErrorHandling(int $mode = null, mixed $options = null)"><variable citdl="int" default="null" ilk="argument" line="303" name="mode" /><variable citdl="mixed" default="null" ilk="argument" line="303" name="options" /><variable citdl="options" line="307" name="setoptions" /><variable citdl="mode" line="306" name="setmode" /></scope><scope doc="&#xA;This method is used to tell which errors you expect to get.&#xA;Expected errors are always returned with error mode&#xA;PEAR_ERROR_RETURN.  Expected error codes are stored in a stack,&#xA;and this method pushes a new element onto it.  The list of&#xA;expected errors are in effect until they are popped off the&#xA;stack with the popExpect() method.&#xA;Note that this method can not be called statically&#xA;&lt;mixed&gt; $code  - a single error code or an array of error codes to expect&#xA;Returns int  - the new depth of the &quot;expected errors&quot; stack&#xA;Access public&#xA;" ilk="function" line="355" lineend="363" name="expectError" returns="int" signature="int expectError(mixed $code = &apos;*&apos;)"><variable citdl="mixed" default="&apos;*&apos;" ilk="argument" line="355" name="code" /></scope><scope doc="&#xA;This method pops one element off the expected error codes&#xA;stack.&#xA;Returns array  - the list of error codes that were popped&#xA;" ilk="function" line="371" lineend="374" name="popExpect" returns="array" signature="array popExpect()" /><scope doc="&#xA;This method checks unsets an error code if available&#xA;&lt;mixed&gt; error  - code&#xA;Returns bool  - true if the error code was unset, false otherwise&#xA;Access private&#xA;Since PHP 4.3.0&#xA;" ilk="function" line="384" lineend="400" name="_checkDelExpect" returns="bool" signature="bool _checkDelExpect($error_code)"><variable ilk="argument" line="384" name="error_code" /><variable citdl="boolean" line="386" name="deleted" /><variable citdl="this._expected_errors[]" line="387" name="error_array" /><variable line="387" name="key" /></scope><scope doc="&#xA;This method deletes all occurences of the specified element from&#xA;the expected error codes stack.&#xA;&lt;mixed&gt; $error_code  - error code that should be deleted&#xA;Returns mixed  - list of error codes that were deleted or error&#xA;Access public&#xA;Since PHP 4.3.0&#xA;" ilk="function" line="411" lineend="433" name="delExpect" returns="mixed" signature="mixed delExpect(mixed $error_code)"><variable citdl="mixed" ilk="argument" line="411" name="error_code" /><variable citdl="boolean" line="413" name="deleted" /><variable line="417" name="key" /><variable citdl="error_code[]" line="417" name="error" /></scope><scope doc="&#xA;This method is a wrapper that returns an instance of the&#xA;configured error class with this object&apos;s default error&#xA;handling applied.  If the $mode and $options parameters are not&#xA;specified, the object&apos;s defaults are used.&#xA;&lt;mixed&gt; $message  - a text error message or a PEAR error object&#xA;&lt;int&gt; $code  - a numeric error code (it is up to your class&#xA;                 to define these if you want to use codes)&#xA;&lt;int&gt; $mode  - One of PEAR_ERROR_RETURN, PEAR_ERROR_PRINT,&#xA;                 PEAR_ERROR_TRIGGER, PEAR_ERROR_DIE,&#xA;                 PEAR_ERROR_CALLBACK, PEAR_ERROR_EXCEPTION.&#xA;&lt;mixed&gt; $options  - If $mode is PEAR_ERROR_TRIGGER, this parameter&#xA;                 specifies the PHP-internal error level (one of&#xA;                 E_USER_NOTICE, E_USER_WARNING or E_USER_ERROR).&#xA;                 If $mode is PEAR_ERROR_CALLBACK, this&#xA;                 parameter specifies the callback function or&#xA;                 method.  In other error modes this parameter&#xA;                 is ignored.&#xA;&lt;string&gt; $userinfo  - If you need to pass along for example debug&#xA;                 information, this parameter is meant for that.&#xA;&lt;string&gt; $error_class  - The returned error object will be&#xA;                 instantiated from this class, if specified.&#xA;&lt;bool&gt; $skipmsg  - If true, raiseError will only pass error codes,&#xA;                 the error message parameter will be dropped.&#xA;Access public&#xA;Returns object  - a PEAR error object&#xA;See PEAR::setErrorHandling&#xA;Since PHP 4.0.5&#xA;" ilk="function" line="472" lineend="537" name="raiseError" returns="object" signature="object &amp;raiseError(mixed $message = null, int $code = null, int $mode = null, mixed $options = null, string $userinfo = null, string $error_class = null, bool $skipmsg = false)"><variable citdl="mixed" default="null" ilk="argument" line="472" name="message" /><variable citdl="int" default="null" ilk="argument" line="472" name="code" /><variable citdl="int" default="null" ilk="argument" line="472" name="mode" /><variable citdl="mixed" default="null" ilk="argument" line="472" name="options" /><variable citdl="string" default="null" ilk="argument" line="472" name="userinfo" /><variable citdl="string" default="null" ilk="argument" line="472" name="error_class" /><variable citdl="bool" default="false" ilk="argument" line="472" name="skipmsg" /><variable line="531" name="a" /><variable attributes="__not_yet_defined__" line="510" name="GLOBALS" /><variable citdl="error_class" line="517" name="ec" /></scope><scope doc="&#xA;Simpler form of raiseError with fewer options.  In most cases&#xA;message, code and userinfo are enough.&#xA;&lt;mixed&gt; $message  - a text error message or a PEAR error object&#xA;&lt;int&gt; $code  - a numeric error code (it is up to your class&#xA;                 to define these if you want to use codes)&#xA;&lt;string&gt; $userinfo  - If you need to pass along for example debug&#xA;                 information, this parameter is meant for that.&#xA;Access public&#xA;Returns object  - a PEAR error object&#xA;See PEAR::raiseError&#xA;" ilk="function" line="555" lineend="564" name="throwError" returns="object" signature="object &amp;throwError(mixed $message = null, int $code = null, string $userinfo = null)"><variable citdl="mixed" default="null" ilk="argument" line="555" name="message" /><variable citdl="int" default="null" ilk="argument" line="555" name="code" /><variable citdl="string" default="null" ilk="argument" line="555" name="userinfo" /><variable citdl="this.raiseError()" line="558" name="a" /></scope><scope ilk="function" line="566" lineend="599" name="staticPushErrorHandling" returns="boolean" signature="staticPushErrorHandling($mode, $options = null)"><variable ilk="argument" line="566" name="mode" /><variable default="null" ilk="argument" line="566" name="options" /><variable citdl="mode" line="569" name="def_mode" /><variable citdl="GLOBALS" line="568" name="stack" /><variable citdl="options" line="570" name="def_options" /></scope><scope ilk="function" line="601" lineend="635" name="staticPopErrorHandling" returns="boolean" signature="staticPopErrorHandling()"><variable citdl="options" line="605" name="setoptions" /><variable attributes="__not_yet_defined__" line="607" name="options" /><variable citdl="GLOBALS" line="603" name="stack" /><variable citdl="mode" line="604" name="setmode" /><variable attributes="__not_yet_defined__" line="607" name="mode" /></scope><scope doc="&#xA;Push a new error handler on top of the error handler options stack. With this&#xA;you can easily override the actual error handler for some code and restore&#xA;it later with popErrorHandling.&#xA;&lt;mixed&gt; $mode  - (same as setErrorHandling)&#xA;&lt;mixed&gt; $options  - (same as setErrorHandling)&#xA;Returns bool  - Always true&#xA;See PEAR::setErrorHandling&#xA;" ilk="function" line="649" lineend="668" name="pushErrorHandling" returns="bool" signature="bool pushErrorHandling(mixed $mode, mixed $options = null)"><variable citdl="mixed" ilk="argument" line="649" name="mode" /><variable citdl="mixed" default="null" ilk="argument" line="649" name="options" /><variable citdl="this._default_error_mode" line="653" name="def_mode" /><variable citdl="GLOBALS" line="651" name="stack" /><variable citdl="this._default_error_options" line="654" name="def_options" /></scope><scope doc="&#xA;Pop the last error handler used&#xA;Returns bool  - Always true&#xA;See PEAR::pushErrorHandling&#xA;" ilk="function" line="677" lineend="689" name="popErrorHandling" returns="bool" signature="bool popErrorHandling()"><variable attributes="__not_yet_defined__" line="681" name="options" /><variable citdl="GLOBALS" line="679" name="stack" /><variable attributes="__not_yet_defined__" line="681" name="mode" /></scope><scope doc="&#xA;OS independant PHP extension load. Remember to take care&#xA;on the correct extension name for case sensitive OSes.&#xA;&lt;string&gt; $ext  - The extension name&#xA;Returns bool  - Success or not on the dl() call&#xA;" ilk="function" line="698" lineend="726" name="loadExtension" returns="bool" signature="bool loadExtension(string $ext)"><variable citdl="string" ilk="argument" line="698" name="ext" /><variable citdl="string" line="714" name="suffix" /></scope></scope><scope ilk="function" line="733" lineend="777" name="_PEAR_call_destructors" signature="_PEAR_call_destructors()"><variable citdl="get_class()" line="751" name="classname" /><variable attributes="__not_yet_defined__" citdl="array_reverse()" line="735" name="_PEAR_destructor_object_list" /><variable attributes="__not_yet_defined__" line="750" name="k" /><variable citdl="GLOBALS[]" line="773" name="value" /><variable citdl="string" line="753" name="destructor" /><variable attributes="__not_yet_defined__" line="750" name="objref" /><variable citdl="PEAR5.getStaticProperty()" line="741" name="destructLifoExists" /></scope><scope doc="Standard PEAR error class for PHP 4&#xA;&#xA;This class is supserseded by {@link PEAR_Exception} in PHP 5&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Stig Bakken &lt;ssb@php.net&gt;&#xA;@author     Tomas V.V. Cox &lt;cox@idecnet.com&gt;&#xA;@author     Gregory Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2006 The PHP Group&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/manual/en/core.pear.pear-error.php&#xA;@see        PEAR::raiseError(), PEAR::throwError()&#xA;@since      Class available since PHP 4.0.2" ilk="class" line="796" lineend="1055" name="PEAR_Error"><variable citdl="string" line="798" name="error_message_prefix" /><variable citdl="PEAR_ERROR_RETURN" line="799" name="mode" /><variable citdl="options" line="800" name="level" /><variable citdl="code" line="801" name="code" /><variable citdl="string" line="802" name="message" /><variable citdl="string" line="803" name="userinfo" /><variable citdl="debug_backtrace()" line="804" name="backtrace" /><scope attributes="__ctor__" doc="&#xA;PEAR_Error constructor&#xA;&lt;string&gt; $message  - message&#xA;&lt;int&gt; $code  - (optional) error code&#xA;&lt;int&gt; $mode  - (optional) error mode, one of: PEAR_ERROR_RETURN,&#xA;PEAR_ERROR_PRINT, PEAR_ERROR_DIE, PEAR_ERROR_TRIGGER,&#xA;PEAR_ERROR_CALLBACK or PEAR_ERROR_EXCEPTION&#xA;&lt;mixed&gt; $options  - (optional) error level, _OR_ in the case of&#xA;PEAR_ERROR_CALLBACK, the callback function or object/method&#xA;tuple.&#xA;&lt;string&gt; $userinfo  - (optional) additional user/debug info&#xA;Access public&#xA;" ilk="function" line="826" lineend="897" name="PEAR_Error" signature="PEAR_Error(string $message = &apos;unknown error&apos;, int $code = null, int $mode = null, mixed $options = null, string $userinfo = null)"><variable citdl="string" default="&apos;unknown error&apos;" ilk="argument" line="826" name="message" /><variable citdl="int" default="null" ilk="argument" line="826" name="code" /><variable citdl="int" default="null" ilk="argument" line="826" name="mode" /><variable citdl="mixed" default="null" ilk="argument" line="826" name="options" /><variable citdl="string" default="null" ilk="argument" line="826" name="userinfo" /><variable citdl="this.getMessage()" line="877" name="msg" /><variable citdl="PEAR5.getStaticProperty()" line="838" name="skiptrace" /><variable citdl="string" line="864" name="format" /></scope><variable citdl="options" line="852" name="callback" /><scope doc="&#xA;Get the error mode from an error object.&#xA;Returns int  - error mode&#xA;Access public&#xA;" ilk="function" line="905" lineend="908" name="getMode" returns="int" signature="int getMode()" /><scope doc="&#xA;Get the callback function/method from an error object.&#xA;Returns mixed  - callback function or object/method array&#xA;Access public&#xA;" ilk="function" line="916" lineend="919" name="getCallback" returns="mixed" signature="mixed getCallback()" /><scope doc="&#xA;Get the error message from an error object.&#xA;Returns string  - full error message&#xA;Access public&#xA;" ilk="function" line="927" lineend="930" name="getMessage" returns="string" signature="string getMessage()" /><scope doc="&#xA;Get error code from an error object&#xA;Returns int  - error code&#xA;Access public&#xA;" ilk="function" line="938" lineend="941" name="getCode" returns="int" signature="int getCode()" /><scope doc="&#xA;Get the name of this error/exception.&#xA;Returns string  - error/exception name (type)&#xA;Access public&#xA;" ilk="function" line="949" lineend="952" name="getType" returns="string" signature="string getType()" /><scope doc="&#xA;Get additional user-supplied information.&#xA;Returns string  - user-supplied information&#xA;Access public&#xA;" ilk="function" line="960" lineend="963" name="getUserInfo" returns="string" signature="string getUserInfo()" /><scope doc="&#xA;Get additional debug information supplied by the application.&#xA;Returns string  - debug information&#xA;Access public&#xA;" ilk="function" line="971" lineend="974" name="getDebugInfo" returns="string" signature="string getDebugInfo()" /><scope doc="&#xA;Get the call backtrace from where the error was generated.&#xA;Supported with PHP 4.3.0 or newer.&#xA;&lt;int&gt; $frame  - (optional) what frame to fetch&#xA;Returns array  - Backtrace, or NULL if not available.&#xA;Access public&#xA;" ilk="function" line="984" lineend="993" name="getBacktrace" returns="array" signature="array getBacktrace(int $frame = null)"><variable citdl="int" default="null" ilk="argument" line="984" name="frame" /></scope><scope ilk="function" line="995" lineend="1002" name="addUserInfo" signature="addUserInfo($info)"><variable ilk="argument" line="995" name="info" /></scope><scope ilk="function" line="1004" lineend="1007" name="__toString" returns="this.getMessage()" signature="__toString()" /><scope doc="&#xA;Make a string representation of this object.&#xA;Returns string  - a string with an object summary&#xA;Access public&#xA;" ilk="function" line="1015" lineend="1054" name="toString" returns="string" signature="string toString()"><variable citdl="this.callback" line="1026" name="callback" /><variable citdl="array()" line="1020" name="levels" /><variable citdl="array()" line="1017" name="modes" /></scope></scope></scope>