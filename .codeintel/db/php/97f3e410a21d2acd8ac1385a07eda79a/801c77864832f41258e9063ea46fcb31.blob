<scope ilk="blob" lang="PHP" name="v1.php" src="/usr/share/php/PEAR/PackageFile/v1.php"><import line="19" module="PEAR/ErrorStack.php" /><import line="1309" module="PEAR/PackageFile/Generator/v1.php" /><import line="1332" module="Archive/Tar.php" /><variable citdl="int" ilk="constant" line="24" name="PEAR_PACKAGEFILE_ERROR_NO_XML_EXT" /><variable citdl="int" ilk="constant" line="29" name="PEAR_PACKAGEFILE_ERROR_CANT_MAKE_PARSER" /><variable citdl="int" ilk="constant" line="34" name="PEAR_PACKAGEFILE_ERROR_PARSER_ERROR" /><variable citdl="int" ilk="constant" line="39" name="PEAR_PACKAGEFILE_ERROR_NO_NAME" /><variable citdl="int" ilk="constant" line="44" name="PEAR_PACKAGEFILE_ERROR_INVALID_NAME" /><variable citdl="int" ilk="constant" line="49" name="PEAR_PACKAGEFILE_ERROR_NO_SUMMARY" /><variable citdl="int" ilk="constant" line="54" name="PEAR_PACKAGEFILE_ERROR_MULTILINE_SUMMARY" /><variable citdl="int" ilk="constant" line="59" name="PEAR_PACKAGEFILE_ERROR_NO_DESCRIPTION" /><variable citdl="int" ilk="constant" line="64" name="PEAR_PACKAGEFILE_ERROR_NO_LICENSE" /><variable citdl="int" ilk="constant" line="69" name="PEAR_PACKAGEFILE_ERROR_NO_VERSION" /><variable citdl="int" ilk="constant" line="74" name="PEAR_PACKAGEFILE_ERROR_INVALID_VERSION" /><variable citdl="int" ilk="constant" line="79" name="PEAR_PACKAGEFILE_ERROR_NO_STATE" /><variable citdl="int" ilk="constant" line="84" name="PEAR_PACKAGEFILE_ERROR_INVALID_STATE" /><variable citdl="int" ilk="constant" line="89" name="PEAR_PACKAGEFILE_ERROR_NO_DATE" /><variable citdl="int" ilk="constant" line="94" name="PEAR_PACKAGEFILE_ERROR_INVALID_DATE" /><variable citdl="int" ilk="constant" line="99" name="PEAR_PACKAGEFILE_ERROR_NO_NOTES" /><variable citdl="int" ilk="constant" line="104" name="PEAR_PACKAGEFILE_ERROR_NO_MAINTAINERS" /><variable citdl="int" ilk="constant" line="109" name="PEAR_PACKAGEFILE_ERROR_NO_MAINTHANDLE" /><variable citdl="int" ilk="constant" line="114" name="PEAR_PACKAGEFILE_ERROR_NO_MAINTROLE" /><variable citdl="int" ilk="constant" line="119" name="PEAR_PACKAGEFILE_ERROR_NO_MAINTNAME" /><variable citdl="int" ilk="constant" line="124" name="PEAR_PACKAGEFILE_ERROR_NO_MAINTEMAIL" /><variable citdl="int" ilk="constant" line="129" name="PEAR_PACKAGEFILE_ERROR_INVALID_MAINTROLE" /><variable citdl="int" ilk="constant" line="134" name="PEAR_PACKAGEFILE_ERROR_NO_DEPNAME" /><variable citdl="int" ilk="constant" line="139" name="PEAR_PACKAGEFILE_ERROR_NO_DEPTYPE" /><variable citdl="int" ilk="constant" line="144" name="PEAR_PACKAGEFILE_ERROR_NO_DEPREL" /><variable citdl="int" ilk="constant" line="149" name="PEAR_PACKAGEFILE_ERROR_NO_DEPVERSION" /><variable citdl="int" ilk="constant" line="154" name="PEAR_PACKAGEFILE_ERROR_INVALID_DEPREL" /><variable citdl="int" ilk="constant" line="159" name="PEAR_PACKAGEFILE_ERROR_INVALID_DEPTYPE" /><variable citdl="int" ilk="constant" line="164" name="PEAR_PACKAGEFILE_ERROR_INVALID_DEPOPTIONAL" /><variable citdl="int" ilk="constant" line="169" name="PEAR_PACKAGEFILE_ERROR_INVALID_DEPNAME" /><variable citdl="int" ilk="constant" line="174" name="PEAR_PACKAGEFILE_ERROR_UNKNOWN_DEPCHANNEL" /><variable citdl="int" ilk="constant" line="179" name="PEAR_PACKAGEFILE_ERROR_DEPVERSION_IGNORED" /><variable citdl="int" ilk="constant" line="184" name="PEAR_PACKAGEFILE_ERROR_DEPNAME_IGNORED" /><variable citdl="int" ilk="constant" line="189" name="PEAR_PACKAGEFILE_ERROR_NO_CONFNAME" /><variable citdl="int" ilk="constant" line="194" name="PEAR_PACKAGEFILE_ERROR_NO_CONFPROMPT" /><variable citdl="int" ilk="constant" line="199" name="PEAR_PACKAGEFILE_ERROR_INVALID_FILEROLE" /><variable citdl="int" ilk="constant" line="204" name="PEAR_PACKAGEFILE_ERROR_NO_FILEROLE" /><variable citdl="int" ilk="constant" line="209" name="PEAR_PACKAGEFILE_ERROR_INVALID_PHPFILE" /><variable citdl="int" ilk="constant" line="215" name="PEAR_PACKAGEFILE_ERROR_NO_PNAME_PREFIX" /><variable citdl="int" ilk="constant" line="220" name="PEAR_PACKAGEFILE_ERROR_UNKNOWN_CHANNEL" /><variable citdl="int" ilk="constant" line="225" name="PEAR_PACKAGEFILE_ERROR_NO_FILES" /><variable citdl="int" ilk="constant" line="230" name="PEAR_PACKAGEFILE_ERROR_INVALID_FILE" /><variable citdl="int" ilk="constant" line="235" name="PEAR_PACKAGEFILE_ERROR_CHANNELVAL" /><variable citdl="int" ilk="constant" line="240" name="PEAR_PACKAGEFILE_ERROR_PHP5" /><variable citdl="int" ilk="constant" line="245" name="PEAR_PACKAGEFILE_ERROR_FILE_NOTFOUND" /><variable citdl="int" ilk="constant" line="250" name="PEAR_PACKAGEFILE_PHP_NO_NOT" /><variable citdl="int" ilk="constant" line="255" name="PEAR_PACKAGEFILE_ERROR_NON_ISO_CHARS" /><variable citdl="int" ilk="constant" line="260" name="PEAR_PACKAGEFILE_ERROR_NO_DEPPHPVERSION" /><variable citdl="int" ilk="constant" line="265" name="PEAR_PACKAGEFILE_ERROR_NO_LEAD" /><variable citdl="int" ilk="constant" line="270" name="PEAR_PACKAGEFILE_ERROR_INVALID_FILENAME" /><scope doc="package.xml encapsulator&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.4.0a1" ilk="class" line="282" lineend="1611" name="PEAR_PackageFile_v1"><variable citdl="PEAR_ErrorStack" doc="@access private&#xA;@var PEAR_ErrorStack&#xA;@access private" line="289" name="_stack" /><variable citdl="PEAR_Registry" doc="A registry object, used to access the package name validation regex for non-standard channels&#xA;@var PEAR_Registry&#xA;@access private" line="296" name="_registry" /><variable citdl="logger" doc="An object that contains a log method that matches PEAR_Common::log&apos;s signature&#xA;@var object&#xA;@access private" line="303" name="_logger" /><variable citdl="array" doc="Parsed package information&#xA;@var array&#xA;@access private" line="310" name="_packageInfo" /><variable citdl="string" doc="path to package.xml&#xA;@var string&#xA;@access private" line="317" name="_packageFile" /><variable citdl="string" doc="path to package .tgz or false if this is a local/extracted package.xml&#xA;@var string&#xA;@access private" line="324" name="_archiveFile" /><variable citdl="int" doc="@var int&#xA;@access private" line="330" name="_isValid" /><variable citdl="boolean" doc="Determines whether this packagefile was initialized only with partial package info&#xA;&#xA;If this package file was constructed via parsing REST, it will only contain&#xA;&#xA;- package name&#xA;- channel name&#xA;- dependencies &#xA;@var boolean&#xA;@access private" line="343" name="_incomplete" /><scope attributes="__ctor__" doc="&#xA;&lt;bool&gt; determines  - whether to return a PEAR_Error object, or use the PEAR_ErrorStack&#xA;&lt;string&gt; Name  - of Error Stack class to use.&#xA;" ilk="function" line="349" lineend="354" name="PEAR_PackageFile_v1" signature="PEAR_PackageFile_v1()" /><scope ilk="function" line="356" lineend="359" name="installBinary" returns="boolean" signature="installBinary($installer)"><variable ilk="argument" line="356" name="installer" /></scope><scope ilk="function" line="361" lineend="364" name="isExtension" returns="boolean" signature="isExtension($name)"><variable ilk="argument" line="361" name="name" /></scope><scope ilk="function" line="366" lineend="370" name="setConfig" signature="setConfig(&amp; $config)"><variable ilk="argument" line="366" name="config" /></scope><variable citdl="config" line="368" name="_config" /><scope ilk="function" line="372" lineend="375" name="setRequestedGroup" signature="setRequestedGroup()" /><scope doc="For saving in the registry.&#xA;&#xA;Set the last version that was installed&#xA;@param string" ilk="function" line="383" lineend="386" name="setLastInstalledVersion" signature="setLastInstalledVersion($version)"><variable ilk="argument" line="383" name="version" /></scope><scope doc="&#xA;Returns string|false &#xA;" ilk="function" line="391" lineend="397" name="getLastInstalledVersion" returns="string" signature="string getLastInstalledVersion()" /><scope ilk="function" line="399" lineend="402" name="getInstalledBinary" returns="boolean" signature="getInstalledBinary()" /><scope ilk="function" line="404" lineend="407" name="listPostinstallScripts" returns="boolean" signature="listPostinstallScripts()" /><scope ilk="function" line="409" lineend="412" name="initPostinstallScripts" returns="boolean" signature="initPostinstallScripts()" /><scope ilk="function" line="414" lineend="420" name="setLogger" returns="PEAR.raiseError()" signature="setLogger(&amp; $logger)"><variable ilk="argument" line="414" name="logger" /></scope><scope ilk="function" line="422" lineend="426" name="setPackagefile" signature="setPackagefile($file, $archive = false)"><variable ilk="argument" line="422" name="file" /><variable default="false" ilk="argument" line="422" name="archive" /></scope><scope ilk="function" line="428" lineend="431" name="getPackageFile" signature="getPackageFile()" /><scope ilk="function" line="433" lineend="436" name="getPackageType" returns="string" signature="getPackageType()" /><scope ilk="function" line="438" lineend="441" name="getArchiveFile" returns="this._archiveFile" signature="getArchiveFile()" /><scope ilk="function" line="443" lineend="450" name="packageInfo" returns="boolean" signature="packageInfo($field)"><variable ilk="argument" line="443" name="field" /></scope><scope ilk="function" line="452" lineend="458" name="setDirtree" signature="setDirtree($path)"><variable ilk="argument" line="452" name="path" /></scope><scope ilk="function" line="460" lineend="466" name="getDirtree" returns="this._packageInfo" signature="getDirtree()" /><scope ilk="function" line="468" lineend="471" name="resetDirtree" signature="resetDirtree()" /><scope ilk="function" line="473" lineend="477" name="fromArray" signature="fromArray($pinfo)"><variable ilk="argument" line="473" name="pinfo" /></scope><scope ilk="function" line="479" lineend="482" name="isIncomplete" returns="this._incomplete" signature="isIncomplete()" /><scope ilk="function" line="484" lineend="487" name="getChannel" returns="string" signature="getChannel()" /><scope ilk="function" line="489" lineend="492" name="getUri" returns="boolean" signature="getUri()" /><scope ilk="function" line="494" lineend="497" name="getTime" returns="boolean" signature="getTime()" /><scope ilk="function" line="499" lineend="505" name="getExtends" returns="this._packageInfo" signature="getExtends()" /><scope doc="&#xA;Returns array &#xA;" ilk="function" line="510" lineend="516" name="toArray" returns="array" signature="array toArray()" /><scope ilk="function" line="518" lineend="521" name="getArray" returns="this._packageInfo" signature="getArray()" /><scope ilk="function" line="523" lineend="526" name="getName" returns="this.getPackage()" signature="getName()" /><scope ilk="function" line="528" lineend="534" name="getPackage" returns="this._packageInfo" signature="getPackage()" /><scope doc="&#xA;WARNING - don&apos;t use this unless you know what you are doing&#xA;" ilk="function" line="539" lineend="542" name="setRawPackage" signature="setRawPackage($package)"><variable ilk="argument" line="539" name="package" /></scope><scope ilk="function" line="544" lineend="548" name="setPackage" signature="setPackage($package)"><variable ilk="argument" line="544" name="package" /></scope><scope ilk="function" line="550" lineend="556" name="getVersion" returns="this._packageInfo" signature="getVersion()" /><scope ilk="function" line="558" lineend="562" name="setVersion" signature="setVersion($version)"><variable ilk="argument" line="558" name="version" /></scope><scope ilk="function" line="564" lineend="567" name="clearMaintainers" signature="clearMaintainers()" /><scope ilk="function" line="569" lineend="575" name="getMaintainers" returns="this._packageInfo" signature="getMaintainers()" /><scope doc="&#xA;Adds a new maintainer - no checking of duplicates is performed, use&#xA;updatemaintainer for that purpose.&#xA;" ilk="function" line="581" lineend="586" name="addMaintainer" signature="addMaintainer($role, $handle, $name, $email)"><variable ilk="argument" line="581" name="role" /><variable ilk="argument" line="581" name="handle" /><variable ilk="argument" line="581" name="name" /><variable ilk="argument" line="581" name="email" /></scope><scope ilk="function" line="588" lineend="607" name="updateMaintainer" returns="this.addMaintainer()" signature="updateMaintainer($role, $handle, $name, $email)"><variable ilk="argument" line="588" name="role" /><variable ilk="argument" line="588" name="handle" /><variable ilk="argument" line="588" name="name" /><variable ilk="argument" line="588" name="email" /><variable line="595" name="i" /><variable citdl="boolean" line="590" name="found" /><variable citdl="this._packageInfo[]" line="595" name="maintainer" /></scope><scope ilk="function" line="609" lineend="625" name="deleteMaintainer" returns="boolean" signature="deleteMaintainer($handle)"><variable ilk="argument" line="609" name="handle" /><variable line="612" name="i" /><variable citdl="boolean" line="611" name="found" /><variable citdl="this._packageInfo[]" line="612" name="maintainer" /></scope><scope ilk="function" line="627" lineend="633" name="getState" returns="this._packageInfo" signature="getState()" /><scope ilk="function" line="635" lineend="638" name="setRawState" signature="setRawState($state)"><variable ilk="argument" line="635" name="state" /></scope><scope ilk="function" line="640" lineend="644" name="setState" signature="setState($state)"><variable ilk="argument" line="640" name="state" /></scope><scope ilk="function" line="646" lineend="652" name="getDate" returns="this._packageInfo" signature="getDate()" /><scope ilk="function" line="654" lineend="658" name="setDate" signature="setDate($date)"><variable ilk="argument" line="654" name="date" /></scope><scope ilk="function" line="660" lineend="666" name="getLicense" returns="this._packageInfo" signature="getLicense()" /><scope ilk="function" line="668" lineend="672" name="setLicense" signature="setLicense($date)"><variable ilk="argument" line="668" name="date" /></scope><scope ilk="function" line="674" lineend="680" name="getSummary" returns="this._packageInfo" signature="getSummary()" /><scope ilk="function" line="682" lineend="686" name="setSummary" signature="setSummary($summary)"><variable ilk="argument" line="682" name="summary" /></scope><scope ilk="function" line="688" lineend="694" name="getDescription" returns="this._packageInfo" signature="getDescription()" /><scope ilk="function" line="696" lineend="700" name="setDescription" signature="setDescription($desc)"><variable ilk="argument" line="696" name="desc" /></scope><scope ilk="function" line="702" lineend="708" name="getNotes" returns="this._packageInfo" signature="getNotes()" /><scope ilk="function" line="710" lineend="714" name="setNotes" signature="setNotes($notes)"><variable ilk="argument" line="710" name="notes" /></scope><scope ilk="function" line="716" lineend="722" name="getDeps" returns="this._packageInfo" signature="getDeps()" /><scope doc="&#xA;Reset dependencies prior to adding new ones&#xA;" ilk="function" line="727" lineend="730" name="clearDeps" signature="clearDeps()" /><scope ilk="function" line="732" lineend="739" name="addPhpDep" signature="addPhpDep($version, $rel)"><variable ilk="argument" line="732" name="version" /><variable ilk="argument" line="732" name="rel" /></scope><scope ilk="function" line="741" lineend="753" name="addPackageDep" signature="addPackageDep($name, $version, $rel, $optional = &apos;no&apos;)"><variable ilk="argument" line="741" name="name" /><variable ilk="argument" line="741" name="version" /><variable ilk="argument" line="741" name="rel" /><variable default="&apos;no&apos;" ilk="argument" line="741" name="optional" /><variable citdl="array()" line="748" name="dep" /></scope><scope ilk="function" line="755" lineend="764" name="addExtensionDep" signature="addExtensionDep($name, $version, $rel, $optional = &apos;no&apos;)"><variable ilk="argument" line="755" name="name" /><variable ilk="argument" line="755" name="version" /><variable ilk="argument" line="755" name="rel" /><variable default="&apos;no&apos;" ilk="argument" line="755" name="optional" /></scope><scope doc="&#xA;WARNING - do not use this function directly unless you know what you&apos;re doing&#xA;" ilk="function" line="769" lineend="772" name="setDeps" signature="setDeps($deps)"><variable ilk="argument" line="769" name="deps" /></scope><scope ilk="function" line="774" lineend="778" name="hasDeps" signature="hasDeps()" /><scope ilk="function" line="780" lineend="783" name="getDependencyGroup" returns="boolean" signature="getDependencyGroup($group)"><variable ilk="argument" line="780" name="group" /></scope><scope ilk="function" line="785" lineend="788" name="isCompatible" returns="boolean" signature="isCompatible($pf)"><variable ilk="argument" line="785" name="pf" /></scope><scope ilk="function" line="790" lineend="793" name="isSubpackageOf" returns="p.isSubpackage()" signature="isSubpackageOf($p)"><variable ilk="argument" line="790" name="p" /></scope><scope ilk="function" line="795" lineend="798" name="isSubpackage" returns="boolean" signature="isSubpackage($p)"><variable ilk="argument" line="795" name="p" /></scope><scope ilk="function" line="800" lineend="817" name="dependsOn" returns="boolean" signature="dependsOn($package, $channel)"><variable ilk="argument" line="800" name="package" /><variable ilk="argument" line="800" name="channel" /><variable citdl="deps[]" line="808" name="dep" /></scope><scope ilk="function" line="819" lineend="825" name="getConfigureOptions" returns="this._packageInfo" signature="getConfigureOptions()" /><scope ilk="function" line="827" lineend="831" name="hasConfigureOptions" signature="hasConfigureOptions()" /><scope ilk="function" line="833" lineend="843" name="addConfigureOption" signature="addConfigureOption($name, $prompt, $default = false)"><variable ilk="argument" line="833" name="name" /><variable ilk="argument" line="833" name="prompt" /><variable default="false" ilk="argument" line="833" name="default" /><variable citdl="array()" line="835" name="o" /></scope><scope ilk="function" line="845" lineend="848" name="clearConfigureOptions" signature="clearConfigureOptions()" /><scope ilk="function" line="850" lineend="856" name="getProvides" returns="this._packageInfo" signature="getProvides()" /><scope ilk="function" line="858" lineend="861" name="getProvidesExtension" returns="boolean" signature="getProvidesExtension()" /><scope ilk="function" line="863" lineend="874" name="addFile" signature="addFile($dir, $file, $attrs)"><variable ilk="argument" line="863" name="dir" /><variable ilk="argument" line="863" name="file" /><variable ilk="argument" line="863" name="attrs" /></scope><scope ilk="function" line="876" lineend="879" name="getInstallationFilelist" returns="this.getFilelist()" signature="getInstallationFilelist()" /><scope ilk="function" line="881" lineend="887" name="getFilelist" returns="this._packageInfo" signature="getFilelist()" /><scope ilk="function" line="889" lineend="892" name="setFileAttribute" signature="setFileAttribute($file, $attr, $value)"><variable ilk="argument" line="889" name="file" /><variable ilk="argument" line="889" name="attr" /><variable ilk="argument" line="889" name="value" /></scope><scope ilk="function" line="894" lineend="897" name="resetFilelist" signature="resetFilelist()" /><scope ilk="function" line="899" lineend="905" name="setInstalledAs" returns="this._packageInfo" signature="setInstalledAs($file, $path)"><variable ilk="argument" line="899" name="file" /><variable ilk="argument" line="899" name="path" /></scope><scope ilk="function" line="907" lineend="915" name="installedFile" signature="installedFile($file, $atts)"><variable ilk="argument" line="907" name="file" /><variable ilk="argument" line="907" name="atts" /></scope><scope ilk="function" line="917" lineend="923" name="getChangelog" returns="this._packageInfo" signature="getChangelog()" /><scope ilk="function" line="925" lineend="928" name="getPackagexmlVersion" returns="string" signature="getPackagexmlVersion()" /><scope doc="&#xA;Wrapper to {@link PEAR_ErrorStack::getErrors()}&#xA;&lt;boolean&gt; determines  - whether to purge the error stack after retrieving&#xA;Returns array &#xA;" ilk="function" line="935" lineend="938" name="getValidationWarnings" returns="array" signature="array getValidationWarnings($purge = true)"><variable default="true" ilk="argument" line="935" name="purge" /></scope><scope doc="&#xA;Validation error.  Also marks the object contents as invalid&#xA;&lt;error&gt; code  - &#xA;&lt;array&gt; error  - information&#xA;Access private&#xA;" ilk="function" line="947" lineend="951" name="_validateError" signature="_validateError($code, $params = array())"><variable ilk="argument" line="947" name="code" /><variable default="array()" ilk="argument" line="947" name="params" /></scope><scope doc="&#xA;Validation warning.  Does not mark the object contents invalid.&#xA;&lt;error&gt; code  - &#xA;&lt;array&gt; error  - information&#xA;Access private&#xA;" ilk="function" line="959" lineend="962" name="_validateWarning" signature="_validateWarning($code, $params = array())"><variable ilk="argument" line="959" name="code" /><variable default="array()" ilk="argument" line="959" name="params" /></scope><scope doc="&#xA;&lt;integer&gt; error  - code&#xA;Access protected&#xA;" ilk="function" line="968" lineend="1050" name="_getErrorMessage" returns="array()" signature="_getErrorMessage()" /><scope doc="&#xA;Validate XML package definition file.&#xA;Access public&#xA;Returns boolean &#xA;" ilk="function" line="1058" lineend="1244" name="validate" returns="boolean" signature="boolean validate($state = PEAR_VALIDATE_NORMAL, $nofilechecking = false)"><variable default="PEAR_VALIDATE_NORMAL" ilk="argument" line="1058" name="state" /><variable default="false" ilk="argument" line="1058" name="nofilechecking" /><variable citdl="this._packageInfo" line="1064" name="info" /><variable citdl="info[]" line="1172" name="c" /><variable citdl="info[]" line="1128" name="d" /><variable citdl="int" line="1100" name="i" /><variable citdl="this._registry.getChannel()" line="1219" name="chan" /><variable citdl="info[]" line="1101" name="m" /><variable citdl="boolean" line="1099" name="haslead" /><variable citdl="info[]" line="1188" name="fa" /><variable citdl="chan.getValidationObject()" line="1224" name="validator" /><variable line="1188" name="file" /><variable citdl="failures[]" line="1228" name="error" /><variable citdl="validator.getFailures()" line="1227" name="failures" /><variable citdl="failures[]" line="1231" name="warning" /></scope><variable citdl="pn" line="1067" name="_packageName" /><scope ilk="function" line="1246" lineend="1299" name="_analyzePhpFiles" returns="boolean" signature="_analyzePhpFiles()"><variable citdl="this.getFilelist()" line="1258" name="info" /><variable citdl="array()[]" line="1276" name="what" /><variable citdl="dirname()" line="1254" name="dir_prefix" /><variable line="1276" name="key" /><variable citdl="info[]" line="1259" name="fa" /><variable citdl="PEAR_Common" line="1255" name="common" /><variable line="1259" name="file" /><variable citdl="this._analyzeSourceCode()" line="1267" name="srcinfo" /><variable citdl="strlen()" line="1274" name="pnl" /><variable line="1289" name="type" /><variable line="1257" name="log" /></scope><scope doc="&#xA;Get the default xml generator object&#xA;Returns pear_packagefile_generator_v1 &#xA;" ilk="function" line="1306" lineend="1313" name="getDefaultGenerator" returns="PEAR_PackageFile_Generator_v1" signature="pear_packagefile_generator_v1 &amp;getDefaultGenerator()"><variable citdl="PEAR_PackageFile_Generator_v1" line="1311" name="a" /></scope><scope doc="Get the contents of a file listed within the package.xml&#xA;@param string&#xA;@return string" ilk="function" line="1320" lineend="1346" name="getFileContents" returns="string" signature="string getFileContents($file)"><variable ilk="argument" line="1320" name="file" /><variable citdl="Archive_Tar" line="1334" name="tar" /><variable citdl="dirname()" line="1323" name="dir" /></scope><scope doc="&#xA;Analyze the source code of the given PHP file&#xA;&lt;string&gt; Filename  - of the PHP file&#xA;Returns mixed &#xA;Access private&#xA;" ilk="function" line="1356" lineend="1543" name="_analyzeSourceCode" returns="mixed" signature="mixed _analyzeSourceCode($file)"><variable ilk="argument" line="1356" name="file" /><variable citdl="string" line="1391" name="lastphpdoc" /><variable citdl="string" line="1395" name="current_function" /><variable citdl="int" line="1388" name="paren_level" /><variable citdl="file_get_contents()" line="1374" name="contents" /><variable citdl="array()" line="1400" name="declared_methods" /><variable citdl="string" line="1392" name="current_class" /><variable citdl="array()" line="1398" name="declared_interfaces" /><variable citdl="array()" line="1399" name="declared_functions" /><variable citdl="array()" line="1397" name="declared_classes" /><variable citdl="array()" line="1403" name="extends" /><variable citdl="string" line="1393" name="current_interface" /><variable citdl="array()" line="1402" name="used_functions" /><variable citdl="array()" line="1405" name="nodeps" /><variable citdl="boolean" line="1406" name="inquote" /><variable citdl="token_get_all()" line="1375" name="tokens" /><variable citdl="boolean" line="1407" name="interface" /><variable citdl="brace_level" line="1396" name="current_function_level" /><variable attributes="__not_yet_defined__" citdl="string" line="1410" name="data" /><variable citdl="tokens" line="1526" name="class" /><variable citdl="array()" line="1404" name="implements" /><variable line="1408" name="i" /><variable citdl="array()" line="1502" name="m" /><variable citdl="int" line="1387" name="look_for" /><variable citdl="brace_level" line="1394" name="current_class_level" /><variable attributes="__not_yet_defined__" citdl="tokens" line="1410" name="token" /><variable citdl="int" line="1389" name="bracket_level" /><variable citdl="int" line="1390" name="brace_level" /><variable citdl="array()" line="1401" name="used_classes" /></scope><scope doc="&#xA;Build a &quot;provides&quot; array from data returned by&#xA;analyzeSourceCode().  The format of the built array is like&#xA;this:&#xA; array(&#xA;   &apos;class;MyClass&apos; =&gt; &apos;array(&apos;type&apos; =&gt; &apos;class&apos;, &apos;name&apos; =&gt; &apos;MyClass&apos;),&#xA;   ...&#xA; )&#xA;&lt;array&gt; $srcinfo  - array with information about a source file&#xA;as returned by the analyzeSourceCode() method.&#xA;Returns void &#xA;Access private&#xA;" ilk="function" line="1564" lineend="1608" name="_buildProvidesArray" signature="void _buildProvidesArray(array $srcinfo)"><variable citdl="array" ilk="argument" line="1564" name="srcinfo" /><variable citdl="string" line="1586" name="function" /><variable citdl="basename()" line="1569" name="file" /><variable citdl="srcinfo[]" line="1584" name="methods" /><variable citdl="methods[]" line="1585" name="method" /><variable citdl="strlen()" line="1571" name="pnl" /><variable citdl="string" line="1573" name="key" /><variable citdl="this.getPackage()" line="1570" name="pn" /><variable citdl="srcinfo[]" line="1572" name="class" /></scope></scope><variable citdl="T_COMMENT" ilk="constant" line="1362" name="T_DOC_COMMENT" /><variable ilk="constant" line="1365" name="T_INTERFACE" /><variable ilk="constant" line="1368" name="T_IMPLEMENTS" /></scope>