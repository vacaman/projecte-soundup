<scope ilk="blob" lang="PHP" name="ChannelFile.php" src="/usr/share/php/PEAR/ChannelFile.php"><import line="20" module="PEAR/ErrorStack.php" /><import line="21" module="PEAR/XMLParser.php" /><import line="22" module="PEAR/Common.php" /><import line="391" module="PEAR.php" /><import line="427" module="PEAR.php" /><import line="1491" module="PEAR/Validate.php" /><import line="1512" module="_" /><variable citdl="int" ilk="constant" line="27" name="PEAR_CHANNELFILE_ERROR_NO_VERSION" /><variable citdl="int" ilk="constant" line="32" name="PEAR_CHANNELFILE_ERROR_INVALID_VERSION" /><variable citdl="int" ilk="constant" line="37" name="PEAR_CHANNELFILE_ERROR_NO_XML_EXT" /><variable citdl="int" ilk="constant" line="42" name="PEAR_CHANNELFILE_ERROR_CANT_MAKE_PARSER" /><variable citdl="int" ilk="constant" line="47" name="PEAR_CHANNELFILE_ERROR_PARSER_ERROR" /><variable citdl="int" ilk="constant" line="55" name="PEAR_CHANNELFILE_ERROR_NO_NAME" /><variable citdl="int" ilk="constant" line="59" name="PEAR_CHANNELFILE_ERROR_INVALID_NAME" /><variable citdl="int" ilk="constant" line="63" name="PEAR_CHANNELFILE_ERROR_NO_SUMMARY" /><variable citdl="int" ilk="constant" line="67" name="PEAR_CHANNELFILE_ERROR_MULTILINE_SUMMARY" /><variable citdl="int" ilk="constant" line="71" name="PEAR_CHANNELFILE_ERROR_NO_HOST" /><variable citdl="int" ilk="constant" line="75" name="PEAR_CHANNELFILE_ERROR_INVALID_HOST" /><variable citdl="int" ilk="constant" line="79" name="PEAR_CHANNELFILE_ERROR_INVALID_MIRROR" /><variable citdl="int" ilk="constant" line="83" name="PEAR_CHANNELFILE_ERROR_INVALID_MIRRORTYPE" /><variable citdl="int" ilk="constant" line="87" name="PEAR_CHANNELFILE_ERROR_INVALID" /><variable citdl="int" ilk="constant" line="91" name="PEAR_CHANNELFILE_ERROR_EMPTY_REGEX" /><variable citdl="int" ilk="constant" line="95" name="PEAR_CHANNELFILE_ERROR_NO_FUNCTIONVERSION" /><variable citdl="int" ilk="constant" line="99" name="PEAR_CHANNELFILE_ERROR_NO_FUNCTIONNAME" /><variable citdl="int" ilk="constant" line="103" name="PEAR_CHANNELFILE_ERROR_NOVALIDATE_NAME" /><variable citdl="int" ilk="constant" line="107" name="PEAR_CHANNELFILE_ERROR_NOVALIDATE_VERSION" /><variable citdl="int" ilk="constant" line="112" name="PEAR_CHANNELFILE_ERROR_MIRROR_NOT_FOUND" /><variable citdl="int" ilk="constant" line="116" name="PEAR_CHANNELFILE_ERROR_INVALID_PORT" /><variable citdl="int" ilk="constant" line="120" name="PEAR_CHANNELFILE_ERROR_NO_STATICVERSION" /><variable citdl="int" ilk="constant" line="124" name="PEAR_CHANNELFILE_ERROR_NOBASEURLTYPE" /><variable citdl="int" ilk="constant" line="128" name="PEAR_CHANNELFILE_URI_CANT_MIRROR" /><variable citdl="int" ilk="constant" line="132" name="PEAR_CHANNELFILE_ERROR_INVALID_SSL" /><scope doc="The Channel handling class&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.4.0a1" ilk="class" line="153" lineend="1559" name="PEAR_ChannelFile"><variable citdl="PEAR_ErrorStack" doc="@access private&#xA;@var PEAR_ErrorStack&#xA;@access private" line="160" name="_stack" /><variable citdl="array" doc="Supported channel.xml versions, for parsing&#xA;@var array&#xA;@access private" line="167" name="_supportedVersions" /><variable citdl="array" doc="Parsed channel information&#xA;@var array&#xA;@access private" line="174" name="_channelInfo" /><variable citdl="int" doc="index into the subchannels array, used for parsing xml&#xA;@var int&#xA;@access private" line="181" name="_subchannelIndex" /><variable citdl="int" doc="index into the mirrors array, used for parsing xml&#xA;@var int&#xA;@access private" line="188" name="_mirrorIndex" /><variable citdl="boolean" doc="Flag used to determine the validity of parsed content&#xA;@var boolean&#xA;@access private" line="195" name="_isValid" /><scope attributes="__ctor__" ilk="function" line="197" lineend="202" name="PEAR_ChannelFile" signature="PEAR_ChannelFile()" /><scope doc="&#xA;Returns array &#xA;Access protected&#xA;" ilk="function" line="208" lineend="263" name="_getErrorMessage" returns="array" signature="array _getErrorMessage()" /><scope doc="&#xA;&lt;string&gt; contents  - of package.xml file&#xA;Returns bool  - success of parsing&#xA;" ilk="function" line="269" lineend="294" name="fromXmlString" returns="bool" signature="bool fromXmlString($data)"><variable ilk="argument" line="269" name="data" /><variable citdl="PEAR_XMLParser" line="277" name="parser" /><variable citdl="parser.parse()" line="278" name="result" /></scope><scope doc="&#xA;Returns array &#xA;" ilk="function" line="299" lineend="305" name="toArray" returns="array" signature="array toArray()" /><scope doc="@param array&#xA;@static&#xA;@return PEAR_ChannelFile|false false if invalid" ilk="function" line="312" lineend="321" name="fromArray" returns="PEAR_ChannelFile" signature="pear_channelfile &amp;fromArray($data, $compatibility = false, $stackClass = &apos;PEAR_ErrorStack&apos;)"><variable ilk="argument" line="312" name="data" /><variable default="false" ilk="argument" line="312" name="compatibility" /><variable default="&apos;PEAR_ErrorStack&apos;" ilk="argument" line="312" name="stackClass" /><variable citdl="PEAR_ChannelFile" line="314" name="a" /></scope><scope doc="Unlike {@link fromArray()} this does not do any validation&#xA;@param array&#xA;@static&#xA;@return PEAR_ChannelFile" ilk="function" line="329" lineend="335" name="fromArrayWithErrors" returns="PEAR_ChannelFile" signature="pear_channelfile &amp;fromArrayWithErrors($data, $compatibility = false, $stackClass = &apos;PEAR_ErrorStack&apos;)"><variable ilk="argument" line="329" name="data" /><variable default="false" ilk="argument" line="329" name="compatibility" /><variable default="&apos;PEAR_ErrorStack&apos;" ilk="argument" line="329" name="stackClass" /><variable citdl="PEAR_ChannelFile" line="332" name="a" /></scope><scope doc="@param array&#xA;@access private" ilk="function" line="341" lineend="344" name="_fromArray" signature="_fromArray($data)"><variable ilk="argument" line="341" name="data" /></scope><scope doc="&#xA;Wrapper to {@link PEAR_ErrorStack::getErrors()}&#xA;&lt;boolean&gt; determines  - whether to purge the error stack after retrieving&#xA;Returns array &#xA;" ilk="function" line="351" lineend="354" name="getErrors" returns="array" signature="array getErrors($purge = false)"><variable default="false" ilk="argument" line="351" name="purge" /></scope><scope doc="&#xA;Unindent given string (?)&#xA;&lt;string&gt; $str  - The string that has to be unindented.&#xA;Returns string &#xA;Access private&#xA;" ilk="function" line="363" lineend="378" name="_unIndent" returns="string" signature="string _unIndent(string $str)"><variable citdl="string" ilk="argument" line="363" name="str" /><variable citdl="substr()" line="369" name="indent" /><variable citdl="explode()[]" line="372" name="line" /><variable citdl="strspn()" line="368" name="indent_len" /><variable citdl="string" line="370" name="data" /></scope><scope doc="&#xA;Parse a channel.xml file.  Expects the name of&#xA;a channel xml file as input.&#xA;&lt;string&gt; $descfile  - name of channel xml file&#xA;Returns bool  - success of parsing&#xA;" ilk="function" line="387" lineend="400" name="fromXmlFile" returns="bool" signature="bool fromXmlFile(string $descfile)"><variable citdl="string" ilk="argument" line="387" name="descfile" /><variable citdl="file_get_contents()" line="398" name="data" /></scope><scope doc="&#xA;Parse channel information from different sources&#xA;This method is able to extract information about a channel&#xA;from an .xml file or a string&#xA;Access public&#xA;&lt;string&gt; Filename  - of the source or the source itself&#xA;Returns bool &#xA;" ilk="function" line="412" lineend="435" name="fromAny" returns="bool" signature="bool fromAny($info)"><variable ilk="argument" line="412" name="info" /><variable citdl="substr()" line="415" name="tmp" /><variable citdl="fopen()" line="419" name="fp" /><variable citdl="fread()" line="420" name="test" /></scope><scope doc="&#xA;Return an XML document based on previous parsing and modifications&#xA;Returns string  - XML data&#xA;Access public&#xA;" ilk="function" line="444" lineend="492" name="toXml" returns="string" signature="string toXml()"><variable citdl="string" line="454" name="ret" /><variable citdl="this._channelInfo" line="453" name="channelInfo" /></scope><scope doc="&#xA;Generate the &lt;rest&gt; tag&#xA;Access private&#xA;" ilk="function" line="498" lineend="513" name="_makeRestXml" returns="ret" signature="_makeRestXml($info, $indent)"><variable ilk="argument" line="498" name="info" /><variable ilk="argument" line="498" name="indent" /><variable citdl="info[]" line="506" name="url" /><variable citdl="indent" line="500" name="ret" /></scope><scope doc="&#xA;Generate the &lt;mirrors&gt; tag&#xA;Access private&#xA;" ilk="function" line="519" lineend="544" name="_makeMirrorsXml" returns="ret" signature="_makeMirrorsXml($channelInfo)"><variable ilk="argument" line="519" name="channelInfo" /><variable citdl="string" line="521" name="ret" /><variable citdl="channelInfo[]" line="525" name="mirror" /></scope><scope doc="&#xA;Generate the &lt;functions&gt; tag&#xA;Access private&#xA;" ilk="function" line="550" lineend="564" name="_makeFunctionsXml" returns="ret" signature="_makeFunctionsXml($functions, $indent, $rest = false)"><variable ilk="argument" line="550" name="functions" /><variable ilk="argument" line="550" name="indent" /><variable default="false" ilk="argument" line="550" name="rest" /><variable citdl="functions[]" line="556" name="function" /><variable citdl="string" line="552" name="ret" /></scope><scope doc="&#xA;Validation error.  Also marks the object contents as invalid&#xA;&lt;error&gt; code  - &#xA;&lt;array&gt; error  - information&#xA;Access private&#xA;" ilk="function" line="572" lineend="576" name="_validateError" signature="_validateError($code, $params = array())"><variable ilk="argument" line="572" name="code" /><variable default="array()" ilk="argument" line="572" name="params" /></scope><scope doc="&#xA;Validation warning.  Does not mark the object contents invalid.&#xA;&lt;error&gt; code  - &#xA;&lt;array&gt; error  - information&#xA;Access private&#xA;" ilk="function" line="584" lineend="587" name="_validateWarning" signature="_validateWarning($code, $params = array())"><variable ilk="argument" line="584" name="code" /><variable default="array()" ilk="argument" line="584" name="params" /></scope><scope doc="&#xA;Validate parsed file.&#xA;Access public&#xA;Returns boolean &#xA;" ilk="function" line="595" lineend="681" name="validate" returns="boolean" signature="boolean validate()"><variable citdl="this._channelInfo" line="598" name="info" /><variable line="632" name="content" /><variable citdl="info[]" line="662" name="mirror" /></scope><scope doc="&#xA;&lt;string&gt; rest  - - protocol name this function applies to&#xA;&lt;array&gt; the  - functions&#xA;&lt;string&gt; the  - name of the parent element (mirror name, for instance)&#xA;" ilk="function" line="688" lineend="714" name="_validateFunctions" signature="_validateFunctions($protocol, $functions, $parent = &apos;&apos;)"><variable ilk="argument" line="688" name="protocol" /><variable ilk="argument" line="688" name="functions" /><variable default="&apos;&apos;" ilk="argument" line="688" name="parent" /><variable citdl="functions[]" line="694" name="function" /></scope><scope doc="&#xA;Test whether a string contains a valid channel server.&#xA;&lt;string&gt; $ver  - the package version to test&#xA;Returns bool &#xA;" ilk="function" line="721" lineend="727" name="validChannelServer" returns="bool" signature="bool validChannelServer($server, string $ver)"><variable ilk="argument" line="721" name="server" /><variable citdl="string" ilk="argument" line="721" name="ver" /></scope><scope doc="&#xA;Returns string|false &#xA;" ilk="function" line="732" lineend="739" name="getName" returns="string" signature="string getName()" /><scope doc="&#xA;Returns string|false &#xA;" ilk="function" line="744" lineend="751" name="getServer" returns="string" signature="string getServer()" /><scope doc="&#xA;Returns int|80  - port number to connect to&#xA;" ilk="function" line="756" lineend="783" name="getPort" returns="int" signature="int getPort($mirror = false)"><variable default="false" ilk="argument" line="756" name="mirror" /></scope><scope doc="&#xA;Returns bool  - Determines whether secure sockets layer (SSL) is used to connect to this channel&#xA;" ilk="function" line="788" lineend="807" name="getSSL" returns="bool" signature="bool getSSL($mirror = false)"><variable default="false" ilk="argument" line="788" name="mirror" /></scope><scope doc="&#xA;Returns string|false &#xA;" ilk="function" line="812" lineend="819" name="getSummary" returns="string" signature="string getSummary()" /><scope doc="&#xA;&lt;string&gt; protocol  - type&#xA;&lt;string&gt; Mirror  - name&#xA;Returns array|false &#xA;" ilk="function" line="826" lineend="848" name="getFunctions" returns="array" signature="array getFunctions($protocol, $mirror = false)"><variable ilk="argument" line="826" name="protocol" /><variable default="false" ilk="argument" line="826" name="mirror" /><variable citdl="protocol" line="832" name="function" /></scope><scope doc="&#xA;&lt;string&gt; Protocol  - type&#xA;&lt;string&gt; Function  - name (null to return the&#xA;              first protocol of the type requested)&#xA;&lt;string&gt; Mirror  - name, if any&#xA;Returns array &#xA;" ilk="function" line="857" lineend="877" name="getFunction" returns="array" signature="array getFunction($type, $name = null, $mirror = false)"><variable ilk="argument" line="857" name="type" /><variable default="null" ilk="argument" line="857" name="name" /><variable default="false" ilk="argument" line="857" name="mirror" /><variable citdl="protocols[]" line="864" name="protocol" /><variable citdl="this.getFunctions()" line="859" name="protocols" /></scope><scope doc="&#xA;&lt;string&gt; protocol  - type&#xA;&lt;string&gt; protocol  - name&#xA;&lt;string&gt; version  - &#xA;&lt;string&gt; mirror  - name&#xA;Returns boolean &#xA;" ilk="function" line="886" lineend="910" name="supports" returns="boolean" signature="boolean supports($type, $name = null, $mirror = false, $version = &apos;1.0&apos;)"><variable ilk="argument" line="886" name="type" /><variable default="null" ilk="argument" line="886" name="name" /><variable default="false" ilk="argument" line="886" name="mirror" /><variable default="&apos;1.0&apos;" ilk="argument" line="886" name="version" /><variable citdl="protocols[]" line="893" name="protocol" /><variable citdl="this.getFunctions()" line="888" name="protocols" /></scope><scope doc="Determines whether a channel supports Representational State Transfer (REST) protocols&#xA;for retrieving channel information&#xA;@param string&#xA;@return bool" ilk="function" line="918" lineend="933" name="supportsREST" returns="bool" signature="bool supportsREST($mirror = false)"><variable default="false" ilk="argument" line="918" name="mirror" /></scope><scope doc="&#xA;Get the URL to access a base resource.&#xA;Hyperlinks in the returned xml will be used to retrieve the proper information&#xA;needed.  This allows extreme extensibility and flexibility in implementation&#xA;&lt;string&gt; Resource  - Type to retrieve&#xA;" ilk="function" line="942" lineend="970" name="getBaseURL" returns="boolean" signature="getBaseURL($resourceType, $mirror = false)"><variable ilk="argument" line="942" name="resourceType" /><variable default="false" ilk="argument" line="942" name="mirror" /><variable citdl="this.getMirror()" line="949" name="mir" /><variable citdl="rest[]" line="963" name="baseurl" /><variable citdl="mir" line="954" name="rest" /></scope><scope doc="&#xA;Since REST does not implement RPC, provide this as a logical wrapper around&#xA;resetFunctions for REST&#xA;&lt;string|false&gt; mirror  - name, if any&#xA;" ilk="function" line="977" lineend="980" name="resetREST" returns="this.resetFunctions()" signature="resetREST($mirror = false)"><variable default="false" ilk="argument" line="977" name="mirror" /></scope><scope doc="&#xA;Empty all protocol definitions&#xA;&lt;string&gt; protocol  - type&#xA;&lt;string|false&gt; mirror  - name, if any&#xA;" ilk="function" line="987" lineend="1017" name="resetFunctions" returns="boolean" signature="resetFunctions($type, $mirror = false)"><variable ilk="argument" line="987" name="type" /><variable default="false" ilk="argument" line="987" name="mirror" /><variable line="996" name="i" /><variable citdl="mirrors[]" line="996" name="mir" /><variable citdl="this._channelInfo" line="991" name="mirrors" /></scope><scope doc="&#xA;Set a channel&apos;s protocols to the protocols supported by pearweb&#xA;" ilk="function" line="1022" lineend="1041" name="setDefaultPEARProtocols" returns="boolean" signature="setDefaultPEARProtocols($version = &apos;1.0&apos;, $mirror = false)"><variable default="&apos;1.0&apos;" ilk="argument" line="1022" name="version" /><variable default="false" ilk="argument" line="1022" name="mirror" /></scope><scope doc="&#xA;Returns array &#xA;" ilk="function" line="1046" lineend="1058" name="getMirrors" returns="array" signature="array getMirrors()"><variable citdl="this._channelInfo" line="1049" name="mirrors" /></scope><scope doc="&#xA;Get the unserialized XML representing a mirror&#xA;Returns array|false &#xA;" ilk="function" line="1064" lineend="1073" name="getMirror" returns="array" signature="array getMirror($server)"><variable ilk="argument" line="1064" name="server" /><variable citdl="this.getMirrors()[]" line="1066" name="mirror" /></scope><scope doc="@param string&#xA;@return string|false&#xA;@error PEAR_CHANNELFILE_ERROR_NO_NAME&#xA;@error PEAR_CHANNELFILE_ERROR_INVALID_NAME" ilk="function" line="1081" lineend="1084" name="setName" returns="string" signature="string setName($name)"><variable ilk="argument" line="1081" name="name" /></scope><scope doc="Set the socket number (port) that is used to connect to this channel&#xA;@param integer&#xA;@param string|false name of the mirror server, or false for the primary" ilk="function" line="1091" lineend="1119" name="setPort" returns="boolean" signature="setPort($port, $mirror = false)"><variable ilk="argument" line="1091" name="port" /><variable default="false" ilk="argument" line="1091" name="mirror" /><variable line="1101" name="i" /><variable citdl="this._channelInfo[]" line="1101" name="mir" /></scope><scope doc="&#xA;Set the socket number (port) that is used to connect to this channel&#xA;&lt;bool&gt; Determines  - whether to turn on SSL support or turn it off&#xA;&lt;string|false&gt; name  - of the mirror server, or false for the primary&#xA;" ilk="function" line="1126" lineend="1176" name="setSSL" returns="boolean" signature="setSSL($ssl = true, $mirror = false)"><variable default="true" ilk="argument" line="1126" name="ssl" /><variable default="false" ilk="argument" line="1126" name="mirror" /><variable line="1136" name="i" /><variable citdl="this._channelInfo[]" line="1136" name="mir" /></scope><scope doc="@param string&#xA;@return string|false&#xA;@error PEAR_CHANNELFILE_ERROR_NO_SERVER&#xA;@error PEAR_CHANNELFILE_ERROR_INVALID_SERVER" ilk="function" line="1184" lineend="1216" name="setServer" returns="string" signature="string setServer($server, $mirror = false)"><variable ilk="argument" line="1184" name="server" /><variable default="false" ilk="argument" line="1184" name="mirror" /><variable line="1197" name="i" /><variable citdl="boolean" line="1196" name="found" /><variable citdl="this._channelInfo[]" line="1197" name="mir" /></scope><scope doc="@param string&#xA;@return boolean success&#xA;@error PEAR_CHANNELFILE_ERROR_NO_SUMMARY&#xA;@warning PEAR_CHANNELFILE_ERROR_MULTILINE_SUMMARY" ilk="function" line="1224" lineend="1236" name="setSummary" returns="boolean" signature="boolean setSummary($summary)"><variable ilk="argument" line="1224" name="summary" /></scope><scope doc="@param string&#xA;@param boolean determines whether the alias is in channel.xml or local&#xA;@return boolean success" ilk="function" line="1243" lineend="1258" name="setAlias" returns="boolean" signature="boolean setAlias($alias, $local = false)"><variable ilk="argument" line="1243" name="alias" /><variable default="false" ilk="argument" line="1243" name="local" /></scope><scope doc="&#xA;Returns string &#xA;" ilk="function" line="1263" lineend="1275" name="getAlias" returns="string" signature="string getAlias()" /><scope doc="&#xA;Set the package validation object if it differs from PEAR&apos;s default&#xA;The class must be includeable via changing _ in the classname to path separator,&#xA;but no checking of this is made.&#xA;&lt;string|false&gt; pass  - in false to reset to the default packagename regex&#xA;Returns boolean  - success&#xA;" ilk="function" line="1284" lineend="1291" name="setValidationPackage" returns="boolean" signature="boolean setValidationPackage($validateclass, $version)"><variable ilk="argument" line="1284" name="validateclass" /><variable ilk="argument" line="1284" name="version" /></scope><scope doc="&#xA;Add a protocol to the provides section&#xA;&lt;string&gt; protocol  - type&#xA;&lt;string&gt; protocol  - version&#xA;&lt;string&gt; protocol  - name, if any&#xA;&lt;string&gt; mirror  - name, if this is a mirror&apos;s protocol&#xA;Returns bool &#xA;" ilk="function" line="1301" lineend="1326" name="addFunction" returns="bool" signature="bool addFunction($type, $version, $name = &apos;&apos;, $mirror = false)"><variable ilk="argument" line="1301" name="type" /><variable ilk="argument" line="1301" name="version" /><variable default="&apos;&apos;" ilk="argument" line="1301" name="name" /><variable default="false" ilk="argument" line="1301" name="mirror" /><variable citdl="array()" line="1307" name="set" /></scope><scope doc="&#xA;Add a protocol to a mirror&apos;s provides section&#xA;&lt;string&gt; mirror  - name (server)&#xA;&lt;string&gt; protocol  - type&#xA;&lt;string&gt; protocol  - version&#xA;&lt;string&gt; protocol  - name, if any&#xA;" ilk="function" line="1334" lineend="1374" name="addMirrorFunction" returns="boolean" signature="addMirrorFunction($mirror, $type, $version, $name = &apos;&apos;)"><variable ilk="argument" line="1334" name="mirror" /><variable ilk="argument" line="1334" name="type" /><variable ilk="argument" line="1334" name="version" /><variable default="&apos;&apos;" ilk="argument" line="1334" name="name" /><variable citdl="this._channelInfo" line="1342" name="setmirror" /><variable line="1344" name="i" /><variable citdl="this._channelInfo[]" line="1344" name="mir" /><variable citdl="array()" line="1362" name="set" /></scope><scope doc="&#xA;&lt;string&gt; Resource  - Type this url links to&#xA;&lt;string&gt; URL  - &#xA;&lt;string|false&gt; mirror  - name, if this is not a primary server REST base URL&#xA;" ilk="function" line="1381" lineend="1431" name="setBaseURL" returns="boolean" signature="setBaseURL($resourceType, $url, $mirror = false)"><variable ilk="argument" line="1381" name="resourceType" /><variable ilk="argument" line="1381" name="url" /><variable default="false" ilk="argument" line="1381" name="mirror" /><variable citdl="this._channelInfo" line="1390" name="setmirror" /><variable line="1392" name="i" /><variable citdl="this._channelInfo[]" line="1392" name="mir" /><variable citdl="array()" line="1407" name="set" /></scope><scope doc="&#xA;&lt;string&gt; mirror  - server&#xA;&lt;int&gt; mirror  - http port&#xA;Returns boolean &#xA;" ilk="function" line="1438" lineend="1461" name="addMirror" returns="boolean" signature="boolean addMirror($server, $port = null)"><variable ilk="argument" line="1438" name="server" /><variable default="null" ilk="argument" line="1438" name="port" /><variable citdl="array()" line="1444" name="set" /></scope><scope doc="&#xA;Retrieve the name of the validation package for this channel&#xA;Returns string|false &#xA;" ilk="function" line="1467" lineend="1479" name="getValidationPackage" returns="string" signature="string getValidationPackage()" /><scope doc="&#xA;Retrieve the object that can be used for custom validation&#xA;&lt;string|false&gt; the  - name of the package to validate. If the package is&#xA;                    the channel validation package, PEAR_Validate is returned&#xA;Returns pear_validate|false  - false is returned if the validation package&#xA;        cannot be located&#xA;" ilk="function" line="1488" lineend="1531" name="getValidationObject" returns="PEAR_Validate" signature="pear_validate &amp;getValidationObject($package = false)"><variable default="false" ilk="argument" line="1488" name="package" /><variable citdl="boolean" line="1496" name="a" /><variable citdl="str_replace()" line="1515" name="vclass" /><variable citdl="PEAR_Validate" line="1504" name="val" /></scope><scope ilk="function" line="1533" lineend="1544" name="isIncludeable" returns="boolean" signature="isIncludeable($path)"><variable ilk="argument" line="1533" name="path" /><variable citdl="explode()" line="1535" name="possibilities" /><variable citdl="possibilities[]" line="1536" name="dir" /></scope><scope doc="&#xA;This function is used by the channel updater and retrieves a value set by&#xA;the registry, or the current time if it has not been set&#xA;Returns string &#xA;" ilk="function" line="1551" lineend="1558" name="lastModified" returns="string" signature="string lastModified()" /></scope></scope>