<scope ilk="blob" lang="PHP" name="RunTest.php" src="/usr/share/php/PEAR/RunTest.php"><import line="21" module="PEAR.php" /><import line="22" module="PEAR/Config.php" /><import line="97" module="PEAR/Common.php" /><variable citdl="int" ilk="constant" line="24" name="DETAILED" /><scope doc="Simplified version of PHP&apos;s test suite&#xA;&#xA;Try it with:&#xA;&#xA;$ php -r &apos;include &quot;../PEAR/RunTest.php&quot;; $t=new PEAR_RunTest; $o=$t-&gt;run(&quot;./pear_system.phpt&quot;);print_r($o);&apos;&#xA;&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Tomas V.V.Cox &lt;cox@idecnet.com&gt;&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.3.3" ilk="class" line="45" lineend="968" name="PEAR_RunTest"><variable citdl="array()" line="47" name="_headers" /><variable citdl="logger" line="48" name="_logger" /><variable citdl="options" line="49" name="_options" /><variable citdl="conf.get()" line="50" name="_php" /><variable line="51" name="tests_count" /><variable line="52" name="xdebug_loaded" /><variable citdl="unknown_type" doc="Saved value of php executable, used to reset $_php when we&#xA;have a test that uses cgi&#xA;&#xA;@var unknown_type" line="59" name="_savephp" /><variable citdl="array()" line="81" name="ini_overwrites" /><scope attributes="__ctor__" doc="An object that supports the PEAR_Common-&gt;log() signature, or null&#xA;@param PEAR_Common|null" ilk="function" line="87" lineend="105" name="PEAR_RunTest" signature="PEAR_RunTest($logger = null, $options = array())"><variable default="null" ilk="argument" line="87" name="logger" /><variable default="array()" ilk="argument" line="87" name="options" /><variable citdl="PEAR_Config.singleton()" line="103" name="conf" /></scope><scope doc="&#xA;Taken from php-src/run-tests.php&#xA;&lt;string&gt; $commandline  - command name&#xA;&lt;array&gt; $env  - &#xA;&lt;string&gt; $stdin  - standard input to pass to the command&#xA;Returns unknown &#xA;" ilk="function" line="115" lineend="172" name="system_with_timeout" returns="unknown" signature="unknown system_with_timeout(string $commandline, array $env = null, string $stdin = null)"><variable citdl="string" ilk="argument" line="115" name="commandline" /><variable citdl="array" default="null" ilk="argument" line="115" name="env" /><variable citdl="string" default="null" ilk="argument" line="115" name="stdin" /><variable citdl="proc_get_status()" line="162" name="stat" /><variable citdl="proc_close()" line="167" name="code" /><variable citdl="w" line="144" name="e" /><variable citdl="string" line="117" name="data" /><variable line="145" name="n" /><variable citdl="pipes" line="143" name="r" /><variable line="145" name="w" /><variable citdl="fread()" line="153" name="line" /><variable citdl="proc_open()" line="123" name="proc" /></scope><scope doc="&#xA;Turns a PHP INI string into an array&#xA;Turns -d &quot;include_path=/foo/bar&quot; into this:&#xA;array(&#xA;  &apos;include_path&apos; =&gt; array(&#xA;         &apos;operator&apos; =&gt; &apos;-d&apos;,&#xA;         &apos;value&apos;    =&gt; &apos;/foo/bar&apos;,&#xA;  )&#xA;)&#xA;Works both with quotes and without&#xA;&lt;string&gt; an  - PHP INI string, -d &quot;include_path=/foo/bar&quot;&#xA;Returns array &#xA;" ilk="function" line="189" lineend="200" name="iniString2array" returns="array" signature="array iniString2array($ini_string)"><variable ilk="argument" line="189" name="ini_string" /><variable citdl="split" line="196" name="value" /><variable citdl="array()" line="198" name="array" /><variable citdl="preg_split()" line="194" name="split" /><variable citdl="split" line="195" name="key" /></scope><scope ilk="function" line="202" lineend="213" name="settings2array" returns="ini_settings" signature="settings2array($settings, $ini_settings)"><variable ilk="argument" line="202" name="settings" /><variable ilk="argument" line="202" name="ini_settings" /><variable citdl="settings[]" line="204" name="setting" /><variable citdl="trim()" line="207" name="name" /><variable citdl="trim()" line="208" name="value" /></scope><scope ilk="function" line="215" lineend="229" name="settings2params" returns="settings" signature="settings2params($ini_settings)"><variable ilk="argument" line="215" name="ini_settings" /><variable citdl="value" line="220" name="operator" /><variable line="218" name="name" /><variable citdl="ini_settings[]" line="218" name="value" /><variable citdl="string" line="217" name="settings" /></scope><scope ilk="function" line="231" lineend="242" name="_preparePhpBin" returns="cmd" signature="_preparePhpBin($php, $file, $ini_settings)"><variable ilk="argument" line="231" name="php" /><variable ilk="argument" line="231" name="file" /><variable ilk="argument" line="231" name="ini_settings" /><variable citdl="string" line="236" name="cmd" /></scope><scope ilk="function" line="244" lineend="262" name="runPHPUnit" returns="string" signature="runPHPUnit($file, $ini_settings = &apos;&apos;)"><variable ilk="argument" line="244" name="file" /><variable default="&apos;&apos;" ilk="argument" line="244" name="ini_settings" /><variable citdl="getcwd()" line="257" name="savedir" /><variable citdl="this._preparePhpBin()" line="252" name="cmd" /></scope><scope doc="&#xA;Runs an individual test case.&#xA;&lt;string&gt; The  - filename of the test&#xA;&lt;array|string&gt; INI  - settings to be applied to the test run&#xA;&lt;integer&gt; Number  - what the current running test is of the&#xA;                    whole test suite being runned.&#xA;Returns string|object  - Returns PASSED, WARNED, FAILED depending on how the&#xA;                      test came out.&#xA;                      PEAR Error when the tester it self fails&#xA;" ilk="function" line="276" lineend="677" name="run" returns="string" signature="string run($file, $ini_settings = array(), $test_number = 1)"><variable ilk="argument" line="276" name="file" /><variable default="array()" ilk="argument" line="276" name="ini_settings" /><variable default="1" ilk="argument" line="276" name="test_number" /><variable citdl="strlen()" line="462" name="content_length" /><variable citdl="string" line="421" name="cmd" /><variable citdl="basename()" line="348" name="main_file_name" /><variable citdl="temp_dir" line="355" name="temp_skipif" /><variable citdl="explode()" line="437" name="raw_lines" /><variable citdl="string" line="374" name="text" /><variable citdl="string" line="439" name="request" /><variable citdl="temp_dir" line="352" name="output_filename" /><variable citdl="count()" line="387" name="numLines" /><variable citdl="temp_dir" line="353" name="memcheck_filename" /><variable citdl="out" line="486" name="return_value" /><variable citdl="preg_split()" line="322" name="ini" /><variable citdl="string" line="505" name="changed" /><variable citdl="boolean" line="481" name="returnfail" /><variable citdl="warn" line="621" name="txt" /><variable citdl="raw_lines[]" line="441" name="line" /><variable citdl="ob_get_contents()" line="478" name="out" /><variable citdl="temp_dir" line="349" name="diff_filename" /><variable citdl="string" line="389" name="coverage_shutdown" /><variable citdl="this._writeLog()" line="284" name="res" /><variable citdl="string" line="388" name="namespace" /><variable line="638" name="returns" /><variable citdl="realpath()" line="347" name="temp_dir" /><variable citdl="this.generate_diff()" line="600" name="faildiff" /><variable citdl="str_replace()" line="326" name="shortname" /><variable citdl="getcwd()" line="306" name="cwd" /><variable citdl="this._resetEnv()" line="428" name="env" /><variable citdl="array_diff_assoc()" line="504" name="missing" /><variable citdl="boolean" line="440" name="started" /><variable citdl="temp_dir" line="372" name="xdebug_file" /><variable citdl="temp_dir" line="350" name="log_filename" /><variable citdl="section_text" line="420" name="args" /><variable citdl="res" line="368" name="warn" /><variable citdl="trim()" line="328" name="tested" /><variable citdl="str_replace()" line="527" name="wanted_re" /><variable citdl="temp_dir" line="357" name="tmp_post" /><variable citdl="this._processHeaders()" line="503" name="testheaders" /><variable citdl="this._readFile()" line="297" name="section_text" /><variable citdl="trim()" line="436" name="post" /><variable citdl="trim()" line="523" name="wanted" /><variable citdl="this.generate_diff()" line="640" name="data" /><variable citdl="temp_dir" line="356" name="temp_clean" /><variable line="484" name="stdin" /><variable citdl="res" line="367" name="info" /><variable citdl="temp_dir" line="562" name="f" /><variable line="599" name="expectf" /><variable line="506" name="header" /><variable citdl="string" line="308" name="pass_options" /><variable citdl="temp_dir" line="351" name="exp_filename" /><variable citdl="explode()" line="386" name="lines" /><variable citdl="missing[]" line="506" name="value" /><variable line="399" name="i" /><variable citdl="string" line="291" name="test_nr" /><variable citdl="preg_replace()" line="490" name="output" /><variable citdl="temp_dir" line="354" name="temp_file" /></scope><scope ilk="function" line="679" lineend="703" name="generate_diff" returns="implode()" signature="generate_diff($wanted, $output, $rvalue, $wanted_re)"><variable ilk="argument" line="679" name="wanted" /><variable ilk="argument" line="679" name="output" /><variable ilk="argument" line="679" name="rvalue" /><variable ilk="argument" line="679" name="wanted_re" /><variable citdl="explode()" line="681" name="w" /><variable line="687" name="idx" /><variable citdl="rvalue" line="701" name="extra" /><variable citdl="explode()" line="682" name="o" /><variable citdl="w1[]" line="687" name="val" /><variable citdl="explode()" line="683" name="wr" /><variable citdl="array_diff_assoc()" line="684" name="w1" /><variable citdl="array_merge()" line="699" name="diff" /><variable citdl="w2" line="686" name="o2" /><variable citdl="array_diff_assoc()" line="685" name="o1" /></scope><scope doc="&#xA;Write the given text to a temporary file, and return the filename.&#xA;" ilk="function" line="706" lineend="718" name="save_text" returns="PEAR.raiseError()" signature="save_text($filename, $text)"><variable ilk="argument" line="706" name="filename" /><variable ilk="argument" line="706" name="text" /></scope><scope ilk="function" line="720" lineend="744" name="_cleanupOldFiles" signature="_cleanupOldFiles($file)"><variable ilk="argument" line="720" name="file" /><variable citdl="temp_dir" line="724" name="diff_filename" /><variable citdl="temp_dir" line="730" name="temp_skipif" /><variable citdl="temp_dir" line="725" name="log_filename" /><variable citdl="temp_dir" line="726" name="exp_filename" /><variable citdl="basename()" line="723" name="mainFileName" /><variable citdl="temp_dir" line="727" name="output_filename" /><variable citdl="temp_dir" line="728" name="memcheck_filename" /><variable citdl="temp_dir" line="732" name="tmp_post" /><variable citdl="realpath()" line="722" name="temp_dir" /><variable citdl="temp_dir" line="731" name="temp_clean" /><variable citdl="temp_dir" line="729" name="temp_file" /></scope><scope ilk="function" line="746" lineend="783" name="_runSkipIf" returns="array()" signature="_runSkipIf($section_text, $temp_skipif, $tested, $ini_settings)"><variable ilk="argument" line="746" name="section_text" /><variable ilk="argument" line="746" name="temp_skipif" /><variable ilk="argument" line="746" name="tested" /><variable ilk="argument" line="746" name="ini_settings" /><variable citdl="string" line="748" name="info" /><variable citdl="boolean" line="749" name="warn" /><variable citdl="string" line="757" name="skipreason" /><variable citdl="ltrim()" line="754" name="loutput" /><variable citdl="this.system_with_timeout()" line="752" name="output" /></scope><scope ilk="function" line="785" lineend="796" name="_stripHeadersCGI" returns="output" signature="_stripHeadersCGI($output)"><variable ilk="argument" line="785" name="output" /></scope><variable citdl="array()" line="787" name="headers" /><scope doc="&#xA;Return an array that can be used with array_diff() to compare headers&#xA;&lt;string&gt; $text  - &#xA;" ilk="function" line="803" lineend="814" name="_processHeaders" returns="headers" signature="_processHeaders(string $text)"><variable citdl="string" ilk="argument" line="803" name="text" /><variable citdl="array()" line="805" name="headers" /><variable citdl="rh[]" line="807" name="line" /><variable citdl="preg_split()" line="806" name="rh" /></scope><scope ilk="function" line="816" lineend="854" name="_readFile" returns="PEAR.raiseError()" signature="_readFile($file)"><variable ilk="argument" line="816" name="file" /><variable attributes="__not_yet_defined__" line="835" name="fp" /><variable citdl="array()" line="828" name="section_text" /><variable citdl="string" line="834" name="section" /><variable citdl="fgets()" line="836" name="line" /></scope><scope ilk="function" line="856" lineend="863" name="_writeLog" returns="PEAR.raiseError()" signature="_writeLog($logname, $data)"><variable ilk="argument" line="856" name="logname" /><variable ilk="argument" line="856" name="data" /></scope><scope ilk="function" line="865" lineend="901" name="_resetEnv" returns="env" signature="_resetEnv($section_text, $temp_file)"><variable ilk="argument" line="865" name="section_text" /><variable ilk="argument" line="865" name="temp_file" /><variable citdl="explode()[]" line="879" name="e" /><variable citdl="_ENV" line="867" name="env" /></scope><scope ilk="function" line="903" lineend="952" name="_processUpload" returns="PEAR.raiseError()" signature="_processUpload($section_text, $file)"><variable ilk="argument" line="903" name="section_text" /><variable ilk="argument" line="903" name="file" /><variable citdl="trim()" line="906" name="upload_files" /><variable line="932" name="i" /><variable citdl="string" line="910" name="request" /><variable citdl="post[]" line="932" name="post_info" /><variable citdl="file_get_contents()" line="920" name="file_contents" /><variable citdl="trim()" line="930" name="post" /><variable citdl="upload_files[]" line="911" name="fileinfo" /></scope><scope ilk="function" line="954" lineend="967" name="_testCleanup" signature="_testCleanup($section_text, $temp_clean)"><variable ilk="argument" line="954" name="section_text" /><variable ilk="argument" line="954" name="temp_clean" /><variable citdl="this.system_with_timeout()" line="959" name="output" /></scope></scope><variable citdl="int" ilk="constant" line="90" name="E_DEPRECATED" /><variable citdl="int" ilk="constant" line="93" name="E_STRICT" /></scope>