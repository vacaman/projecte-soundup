<scope ilk="blob" lang="PHP" name="Autoloader.php" src="/usr/share/php/PEAR/Autoloader.php"><import line="29" module="PEAR.php" /><scope classrefs="PEAR" doc="This class is for objects where you want to separate the code for&#xA;some methods into separate classes.  This is useful if you have a&#xA;class with not-frequently-used methods that contain lots of code&#xA;that you would like to avoid always parsing.&#xA;&#xA;The PEAR_Autoloader class provides autoloading and aggregation.&#xA;The autoloading lets you set up in which classes the separated&#xA;methods are found.  Aggregation is the technique used to import new&#xA;methods, an instance of each class providing separated methods is&#xA;stored and called every time the aggregated method is called.&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author Stig Bakken &lt;ssb@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/manual/en/core.ppm.php#core.ppm.pear-autoloader&#xA;@since      File available since Release 0.1&#xA;@deprecated File deprecated in Release 1.4.0a1" ilk="class" line="53" lineend="214" name="PEAR_Autoloader"><variable citdl="array" doc="Map of methods and classes where they are defined&#xA;&#xA;@var array&#xA;&#xA;@access private" line="64" name="_autoload_map" /><variable citdl="array" doc="Map of methods and aggregate objects&#xA;&#xA;@var array&#xA;&#xA;@access private" line="73" name="_method_map" /><scope doc="&#xA;Add one or more autoload entries.&#xA;&lt;string&gt; $method  - which method to autoload&#xA;&lt;string&gt; $classname  - (optional) which class to find the method in.&#xA;                          If the $method parameter is an array, this&#xA;                          parameter may be omitted (and will be ignored&#xA;                          if not), and the $method parameter will be&#xA;                          treated as an associative array with method&#xA;                          names as keys and class names as values.&#xA;Returns void &#xA;Access public&#xA;" ilk="function" line="94" lineend="102" name="addAutoload" signature="void addAutoload(string $method, string $classname = null)"><variable citdl="string" ilk="argument" line="94" name="method" /><variable citdl="string" default="null" ilk="argument" line="94" name="classname" /></scope><scope doc="&#xA;Remove an autoload entry.&#xA;&lt;string&gt; $method  - which method to remove the autoload entry for&#xA;Returns bool  - TRUE if an entry was removed, FALSE if not&#xA;Access public&#xA;" ilk="function" line="116" lineend="122" name="removeAutoload" returns="bool" signature="bool removeAutoload(string $method)"><variable citdl="string" ilk="argument" line="116" name="method" /><variable line="119" name="ok" /></scope><scope doc="&#xA;Add an aggregate object to this object.  If the specified class&#xA;is not defined, loading it will be attempted following PEAR&apos;s&#xA;file naming scheme.  All the methods in the class will be&#xA;aggregated, except private ones (name starting with an&#xA;underscore) and constructors.&#xA;&lt;string&gt; $classname  - what class to instantiate for the object.&#xA;Returns void &#xA;Access public&#xA;" ilk="function" line="140" lineend="155" name="addAggregateObject" signature="void addAggregateObject(string $classname)"><variable citdl="string" ilk="argument" line="140" name="classname" /><variable citdl="preg_replace()" line="144" name="include_file" /><variable line="147" name="obj" /><variable citdl="get_class_methods()" line="148" name="methods" /><variable citdl="methods[]" line="149" name="method" /></scope><scope doc="&#xA;Remove an aggregate object.&#xA;&lt;string&gt; $classname  - the class of the object to remove&#xA;Returns bool  - TRUE if an object was removed, FALSE if not&#xA;Access public&#xA;" ilk="function" line="169" lineend="181" name="removeAggregateObject" returns="bool" signature="bool removeAggregateObject(string $classname)"><variable citdl="string" ilk="argument" line="169" name="classname" /><variable attributes="__not_yet_defined__" line="174" name="obj" /><variable citdl="boolean" line="171" name="ok" /><variable attributes="__not_yet_defined__" line="174" name="method" /></scope><scope doc="&#xA;Overloaded object call handler, called each time an&#xA;undefined/aggregated method is invoked.  This method repeats&#xA;the call in the right aggregate object and passes on the return&#xA;value.&#xA;&lt;string&gt; $method  - which method that was called&#xA;&lt;string&gt; $args  - An array of the parameters passed in the&#xA;                       original call&#xA;Returns mixed  - The return value from the aggregated method, or a PEAR&#xA;               error if the called method was unknown.&#xA;" ilk="function" line="200" lineend="211" name="__call" returns="mixed" signature="mixed __call(string $method, string $args, &amp; $retval)"><variable citdl="string" ilk="argument" line="200" name="method" /><variable citdl="string" ilk="argument" line="200" name="args" /><variable ilk="argument" line="200" name="retval" /></scope></scope></scope>