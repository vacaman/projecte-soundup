<scope ilk="blob" lang="PHP" name="Command.php" src="/usr/share/php/PEAR/Command.php"><import line="21" module="PEAR.php" /><import line="22" module="PEAR/Frontend.php" /><import line="23" module="PEAR/XMLParser.php" /><import line="130" module="_PEAR_Command_objects" /><import line="147" module="_PEAR_Command_objects" /><scope doc="PEAR command class, a simple factory class for administrative&#xA;commands.&#xA;&#xA;How to implement command classes:&#xA;&#xA;- The class must be called PEAR_Command_Nnn, installed in the&#xA;  &quot;PEAR/Common&quot; subdir, with a method called getCommands() that&#xA;  returns an array of the commands implemented by the class (see&#xA;  PEAR/Command/Install.php for an example).&#xA;&#xA;- The class must implement a run() function that is called with three&#xA;  params:&#xA;&#xA;   (string) command name&#xA;   (array)  assoc array with options, freely defined by each&#xA;            command, for example:&#xA;            array(&apos;force&apos; =&gt; true)&#xA;   (array)  list of the other parameters&#xA;&#xA;  The run() function returns a PEAR_CommandResponse object.  Use&#xA;  these methods to get information:&#xA;&#xA;   int getStatus()   Returns PEAR_COMMAND_(SUCCESS|FAILURE|PARTIAL)&#xA;                     *_PARTIAL means that you need to issue at least&#xA;                     one more command to complete the operation&#xA;                     (used for example for validation steps).&#xA;&#xA;   string getMessage()  Returns a message for the user.  Remember,&#xA;                        no HTML or other interface-specific markup.&#xA;&#xA;  If something unexpected happens, run() returns a PEAR error.&#xA;&#xA;- DON&apos;T OUTPUT ANYTHING! Return text for output instead.&#xA;&#xA;- DON&apos;T USE HTML! The text you return will be used from both Gtk,&#xA;  web and command-line interfaces, so for now, keep everything to&#xA;  plain text.&#xA;&#xA;- DON&apos;T USE EXIT OR DIE! Always use pear errors.  From static&#xA;  classes do PEAR::raiseError(), from other classes do&#xA;  $this-&gt;raiseError().&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Stig Bakken &lt;ssb@php.net&gt;&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 0.1" ilk="class" line="101" lineend="414" name="PEAR_Command"><scope doc="&#xA;Get the right object for executing a command.&#xA;&lt;string&gt; $command  - The name of the command&#xA;&lt;object&gt; $config  - Instance of PEAR_Config object&#xA;Returns object  - the command object or a PEAR error&#xA;Access public&#xA;Static&#xA;" ilk="function" line="116" lineend="139" name="factory" returns="object" signature="object &amp;factory(string $command, object &amp; $config)"><variable citdl="string" ilk="argument" line="116" name="command" /><variable citdl="object" ilk="argument" line="116" name="config" /><variable citdl="PEAR.raiseError()" line="125" name="a" /><variable line="137" name="obj" /><variable citdl="PEAR_Command.getFrontendObject()" line="136" name="ui" /><variable citdl="GLOBALS" line="128" name="class" /></scope><scope doc="&#xA;}}}&#xA;{{{ &amp; getObject()&#xA;" ilk="function" line="143" lineend="156" name="getObject" returns="PEAR.raiseError()" signature="&amp;getObject($command)"><variable ilk="argument" line="143" name="command" /><variable citdl="PEAR_Config.singleton()" line="153" name="config" /><variable line="154" name="obj" /><variable citdl="PEAR_Command.getFrontendObject()" line="152" name="ui" /><variable citdl="GLOBALS" line="145" name="class" /></scope><scope doc="&#xA;Get instance of frontend object.&#xA;Returns object|pear_error &#xA;Static&#xA;" ilk="function" line="167" lineend="171" name="getFrontendObject" returns="object" signature="object &amp;getFrontendObject()"><variable citdl="PEAR_Frontend.singleton()" line="169" name="a" /></scope><scope doc="&#xA;Load current frontend class.&#xA;&lt;string&gt; $uiclass  - Name of class implementing the frontend&#xA;Returns object  - the frontend object, or a PEAR error&#xA;Static&#xA;" ilk="function" line="184" lineend="188" name="setFrontendClass" returns="object" signature="object &amp;setFrontendClass(string $uiclass)"><variable citdl="string" ilk="argument" line="184" name="uiclass" /><variable citdl="PEAR_Frontend.setFrontendClass()" line="186" name="a" /></scope><scope doc="&#xA;Set current frontend.&#xA;&lt;string&gt; $uitype  - Name of the frontend type (for example &quot;CLI&quot;)&#xA;Returns object  - the frontend object, or a PEAR error&#xA;Static&#xA;" ilk="function" line="201" lineend="205" name="setFrontendType" returns="object" signature="object setFrontendType(string $uitype)"><variable citdl="string" ilk="argument" line="201" name="uitype" /><variable citdl="string" line="203" name="uiclass" /></scope><scope doc="&#xA;Scan through the Command directory looking for classes&#xA;and see what commands they implement.&#xA;&lt;bool&gt; (optional)  - if FALSE (default), the new list of&#xA;              commands should replace the current one.  If TRUE,&#xA;              new entries will be merged with old.&#xA;&lt;string&gt; (optional)  - where (what directory) to look for&#xA;              classes, defaults to the Command subdirectory of&#xA;              the directory from where this file (__FILE__) is&#xA;              included.&#xA;Returns bool  - TRUE on success, a PEAR error on failure&#xA;Access public&#xA;Static&#xA;" ilk="function" line="228" lineend="298" name="registerCommands" returns="bool" signature="bool registerCommands($merge = false, $dir = null)"><variable default="false" ilk="argument" line="228" name="merge" /><variable default="null" ilk="argument" line="228" name="dir" /><variable citdl="parser.getData()" line="258" name="implements" /><variable citdl="desc[]" line="282" name="option" /><variable citdl="substr()" line="250" name="f" /><variable citdl="PEAR_XMLParser" line="230" name="parser" /><variable citdl="desc" line="272" name="shortcut" /><variable line="259" name="command" /><variable line="245" name="file" /><variable line="282" name="oname" /><variable citdl="string" line="251" name="class" /><variable line="237" name="dp" /><variable citdl="implements[]" line="259" name="desc" /></scope><scope doc="&#xA;Get the list of currently supported commands, and what&#xA;classes implement them.&#xA;Returns array  - command =&gt; implementing class&#xA;Access public&#xA;Static&#xA;" ilk="function" line="312" lineend="318" name="getCommands" returns="array" signature="array getCommands()" /><scope doc="&#xA;Get the list of command shortcuts.&#xA;Returns array  - shortcut =&gt; command&#xA;Access public&#xA;Static&#xA;" ilk="function" line="331" lineend="337" name="getShortcuts" returns="array" signature="array getShortcuts()" /><scope doc="&#xA;Compiles arguments for getopt.&#xA;&lt;string&gt; $command  - command to get optstring for&#xA;&lt;string&gt; $short_args  - (reference) short getopt format&#xA;&lt;array&gt; $long_args  - (reference) long getopt format&#xA;Returns void &#xA;Access public&#xA;Static&#xA;" ilk="function" line="354" lineend="367" name="getGetoptArgs" signature="void getGetoptArgs(string $command, string &amp; $short_args, array &amp; $long_args)"><variable citdl="string" ilk="argument" line="354" name="command" /><variable citdl="string" ilk="argument" line="354" name="short_args" /><variable citdl="array" ilk="argument" line="354" name="long_args" /><variable citdl="PEAR_Command.getObject()" line="365" name="obj" /></scope><scope doc="&#xA;Get description for a command.&#xA;&lt;string&gt; $command  - Name of the command&#xA;Returns string  - command description&#xA;Access public&#xA;Static&#xA;" ilk="function" line="382" lineend="388" name="getDescription" returns="string" signature="string getDescription(string $command)"><variable citdl="string" ilk="argument" line="382" name="command" /></scope><scope doc="&#xA;Get help for command.&#xA;&lt;string&gt; $command  - Name of the command to return help for&#xA;Access public&#xA;Static&#xA;" ilk="function" line="401" lineend="412" name="getHelp" returns="obj.getHelp()" signature="getHelp(string $command)"><variable citdl="string" ilk="argument" line="401" name="command" /><variable citdl="PEAR_Command.getObject()" line="408" name="obj" /><variable citdl="PEAR_Command.getCommands()" line="403" name="cmds" /></scope></scope></scope>