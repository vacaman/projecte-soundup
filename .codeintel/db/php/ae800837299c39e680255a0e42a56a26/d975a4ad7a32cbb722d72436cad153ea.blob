<scope ilk="blob" lang="PHP" name="Registry.php" src="/usr/share/php/PEAR/Registry.php"><import line="22" module="PEAR.php" /><import line="23" module="PEAR/DependencyDB.php" /><import line="203" module="PEAR/ChannelFile.php" /><import line="228" module="PEAR/ChannelFile.php" /><import line="252" module="PEAR/ChannelFile.php" /><import line="274" module="PEAR/ChannelFile.php" /><import line="383" module="System.php" /><import line="451" module="System.php" /><import line="479" module="System.php" /><import line="493" module="System.php" /><import line="698" module="PEAR/Installer/Role.php" /><import line="1455" module="PEAR/PackageFile.php" /><import line="1476" module="PEAR/ChannelFile.php" /><import line="1499" module="PEAR/ChannelFile.php" /><import line="1516" module="PEAR/ChannelFile.php" /><import line="1532" module="PEAR/ChannelFile.php" /><import line="1550" module="PEAR/ChannelFile.php" /><import line="1762" module="PEAR/PackageFile/v1.php" /><import line="1891" module="PEAR/PackageFile/v1.php" /><import line="2072" module="PEAR/Installer/Role.php" /><variable ilk="constant" line="25" name="PEAR_REGISTRY_ERROR_LOCK" /><variable ilk="constant" line="26" name="PEAR_REGISTRY_ERROR_FORMAT" /><variable ilk="constant" line="27" name="PEAR_REGISTRY_ERROR_FILE" /><variable ilk="constant" line="28" name="PEAR_REGISTRY_ERROR_CONFLICT" /><variable ilk="constant" line="29" name="PEAR_REGISTRY_ERROR_CHANNEL_FILE" /><scope classrefs="PEAR" doc="Administration class used to maintain the installed package database.&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Stig Bakken &lt;ssb@php.net&gt;&#xA;@author     Tomas V. V. Cox &lt;cox@idecnet.com&gt;&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.4.0a1" ilk="class" line="44" lineend="2395" name="PEAR_Registry"><variable citdl="string" doc="File containing all channel information.&#xA;@var string" line="50" name="channels" /><variable citdl="string" doc="Directory where registry files are stored.&#xA;@var string" line="55" name="statedir" /><variable citdl="string" doc="File where the file map is stored&#xA;@var string" line="60" name="filemap" /><variable citdl="string" doc="Directory where registry files for channels are stored.&#xA;@var string" line="65" name="channelsdir" /><variable citdl="string" doc="Name of file used for locking the registry&#xA;@var string" line="70" name="lockfile" /><variable citdl="resource" doc="File descriptor used during locking&#xA;@var resource" line="75" name="lock_fp" /><variable citdl="int" doc="Mode used during locking&#xA;@var int" line="80" name="lock_mode" /><variable citdl="array" doc="Cache of package information.  Structure:&#xA;array(&#xA;  &apos;package&apos; =&gt; array(&apos;id&apos; =&gt; ... ),&#xA;  ... )&#xA;@var array" line="88" name="pkginfo_cache" /><variable citdl="array" doc="Cache of file map.  Structure:&#xA;array( &apos;/path/to/file&apos; =&gt; &apos;package&apos;, ... )&#xA;@var array" line="94" name="filemap_cache" /><variable citdl="false" doc="@var false|PEAR_ChannelFile" line="99" name="_pearChannel" /><variable citdl="false" doc="@var false|PEAR_ChannelFile" line="104" name="_peclChannel" /><variable citdl="false" doc="@var false|PEAR_ChannelFile" line="109" name="_docChannel" /><variable citdl="PEAR_DependencyDB" doc="@var PEAR_DependencyDB" line="114" name="_dependencyDB" /><variable citdl="PEAR_Config" doc="@var PEAR_Config" line="119" name="_config" /><scope attributes="__ctor__" doc="&#xA;PEAR_Registry constructor.&#xA;&lt;string&gt; (optional)  - PEAR install directory (for .php files)&#xA;&lt;pear_channelfile&gt; PEAR_ChannelFile  - object representing the PEAR channel, if&#xA;       default values are not desired.  Only used the very first time a PEAR&#xA;       repository is initialized&#xA;&lt;pear_channelfile&gt; PEAR_ChannelFile  - object representing the PECL channel, if&#xA;       default values are not desired.  Only used the very first time a PEAR&#xA;       repository is initialized&#xA;Access public&#xA;" ilk="function" line="134" lineend="142" name="PEAR_Registry" signature="PEAR_Registry($pear_install_dir = PEAR_INSTALL_DIR, $pear_channel = false, $pecl_channel = false)"><variable default="PEAR_INSTALL_DIR" ilk="argument" line="134" name="pear_install_dir" /><variable default="false" ilk="argument" line="134" name="pear_channel" /><variable default="false" ilk="argument" line="134" name="pecl_channel" /></scope><scope ilk="function" line="144" lineend="152" name="setInstallDir" signature="setInstallDir($pear_install_dir = PEAR_INSTALL_DIR)"><variable default="PEAR_INSTALL_DIR" ilk="argument" line="144" name="pear_install_dir" /><variable line="146" name="ds" /></scope><variable citdl="pear_install_dir" line="147" name="install_dir" /><scope ilk="function" line="154" lineend="178" name="hasWriteAccess" returns="boolean" signature="hasWriteAccess()"><variable citdl="dir" line="159" name="olddir" /><variable citdl="this.install_dir" line="157" name="dir" /></scope><scope ilk="function" line="180" lineend="186" name="setConfig" signature="setConfig(&amp; $config, $resetInstallDir = true)"><variable ilk="argument" line="180" name="config" /><variable default="true" ilk="argument" line="180" name="resetInstallDir" /></scope><scope ilk="function" line="188" lineend="289" name="_initializeChannelDirs" signature="_initializeChannelDirs()"><variable citdl="this._pearChannel" line="200" name="pear_channel" /><variable citdl="PEAR_ChannelFile" line="277" name="private" /><variable citdl="this._peclChannel" line="225" name="pecl_channel" /><variable citdl="boolean" line="192" name="running" /><variable citdl="this._docChannel" line="249" name="doc_channel" /><variable line="193" name="ds" /></scope><variable attributes="static" citdl="boolean" line="190" name="running" /><scope ilk="function" line="291" lineend="312" name="_initializeDirs" signature="_initializeDirs()"><variable citdl="this.statedir" line="298" name="dest" /><variable attributes="__not_yet_defined__" line="299" name="handle" /><variable line="293" name="ds" /><variable line="299" name="file" /></scope><scope ilk="function" line="314" lineend="348" name="_initializeDepDB" signature="_initializeDepDB()"><variable citdl="OS_WINDOWS" line="321" name="file" /><variable citdl="boolean" line="319" name="initializing" /></scope><variable attributes="static" citdl="boolean" line="317" name="initializing" /><scope doc="&#xA;PEAR_Registry destructor.  Makes sure no locks are forgotten.&#xA;Access private&#xA;" ilk="function" line="355" lineend="361" name="_PEAR_Registry" signature="_PEAR_Registry()" /><scope doc="&#xA;Make sure the directory where we keep registry files exists.&#xA;Returns bool  - TRUE if directory exists, FALSE if it could not be&#xA;created&#xA;Access private&#xA;" ilk="function" line="371" lineend="419" name="_assertStateDir" returns="bool" signature="bool _assertStateDir($channel = false)"><variable default="false" ilk="argument" line="371" name="channel" /><variable citdl="boolean" line="409" name="running" /><variable citdl="boolean" line="387" name="init" /><variable line="393" name="ds" /></scope><variable attributes="static" citdl="boolean" line="377" name="init" /><scope doc="&#xA;Make sure the directory where we keep registry files exists for a non-standard channel.&#xA;&lt;string&gt; channel  - name&#xA;Returns bool  - TRUE if directory exists, FALSE if it could not be&#xA;created&#xA;Access private&#xA;" ilk="function" line="430" lineend="462" name="_assertChannelStateDir" returns="bool" signature="bool _assertChannelStateDir($channel)"><variable ilk="argument" line="430" name="channel" /><variable citdl="this._channelDirectoryName()" line="440" name="channelDir" /><variable line="432" name="ds" /></scope><scope doc="&#xA;Make sure the directory where we keep registry files for channels exists&#xA;Returns bool  - TRUE if directory exists, FALSE if it could not be&#xA;created&#xA;Access private&#xA;" ilk="function" line="472" lineend="503" name="_assertChannelDir" returns="bool" signature="bool _assertChannelDir()" /><scope doc="&#xA;Get the name of the file where data for a given package is stored.&#xA;&lt;string&gt; channel  - name, or false if this is a PEAR package&#xA;&lt;string&gt; package  - name&#xA;Returns string  - registry file name&#xA;Access public&#xA;" ilk="function" line="515" lineend="523" name="_packageFileName" returns="string" signature="string _packageFileName($package, $channel = false)"><variable ilk="argument" line="515" name="package" /><variable default="false" ilk="argument" line="515" name="channel" /></scope><scope doc="&#xA;Get the name of the file where data for a given channel is stored.&#xA;&lt;string&gt; channel  - name&#xA;Returns string  - registry file name&#xA;" ilk="function" line="530" lineend="539" name="_channelFileName" returns="string" signature="string _channelFileName($channel, $noaliases = false)"><variable ilk="argument" line="530" name="channel" /><variable default="false" ilk="argument" line="530" name="noaliases" /></scope><scope doc="@param string&#xA;@return string" ilk="function" line="545" lineend="549" name="_getChannelAliasFileName" returns="string" signature="string _getChannelAliasFileName($alias)"><variable ilk="argument" line="545" name="alias" /></scope><scope doc="&#xA;Get the name of a channel from its alias&#xA;" ilk="function" line="554" lineend="583" name="_getChannelFromAlias" returns="string" signature="_getChannelFromAlias($channel)"><variable ilk="argument" line="554" name="channel" /></scope><scope doc="&#xA;Get the alias of a channel from its alias or its name&#xA;" ilk="function" line="588" lineend="612" name="_getAlias" returns="string" signature="_getAlias($channel)"><variable ilk="argument" line="588" name="channel" /></scope><scope doc="&#xA;Get the name of the file where data for a given package is stored.&#xA;&lt;string&gt; channel  - name, or false if this is a PEAR package&#xA;&lt;string&gt; package  - name&#xA;Returns string  - registry file name&#xA;Access public&#xA;" ilk="function" line="624" lineend="637" name="_channelDirectoryName" returns="string" signature="string _channelDirectoryName($channel)"><variable ilk="argument" line="624" name="channel" /><variable citdl="this._getChannelFromAlias()" line="630" name="ch" /></scope><scope ilk="function" line="639" lineend="660" name="_openPackageFile" returns="fp" signature="_openPackageFile($package, $mode, $channel = false)"><variable ilk="argument" line="639" name="package" /><variable ilk="argument" line="639" name="mode" /><variable default="false" ilk="argument" line="639" name="channel" /><variable line="654" name="fp" /><variable citdl="this._packageFileName()" line="649" name="file" /></scope><scope ilk="function" line="662" lineend="665" name="_closePackageFile" signature="_closePackageFile($fp)"><variable ilk="argument" line="662" name="fp" /></scope><scope ilk="function" line="667" lineend="688" name="_openChannelFile" returns="fp" signature="_openChannelFile($channel, $mode)"><variable ilk="argument" line="667" name="channel" /><variable ilk="argument" line="667" name="mode" /><variable line="682" name="fp" /><variable citdl="this._channelFileName()" line="677" name="file" /></scope><scope ilk="function" line="690" lineend="693" name="_closeChannelFile" signature="_closeChannelFile($fp)"><variable ilk="argument" line="690" name="fp" /></scope><scope ilk="function" line="695" lineend="771" name="_rebuildFileMap" returns="boolean" signature="_rebuildFileMap()"><variable citdl="array()" line="702" name="files" /><variable line="762" name="fp" /><variable line="711" name="name" /><variable citdl="packages[]" line="704" name="package" /><variable citdl="this._packageInfo()" line="706" name="filelist" /><variable citdl="this._listAllPackages()" line="701" name="channels" /><variable citdl="this._packageInfo()" line="705" name="version" /><variable citdl="filelist[]" line="711" name="attrs" /><variable citdl="attrs" line="734" name="file" /><variable citdl="channels[]" line="703" name="packages" /><variable line="703" name="channel" /></scope><scope ilk="function" line="773" lineend="798" name="_readFileMap" returns="array()" signature="_readFileMap()"><variable line="779" name="fp" /><variable citdl="get_magic_quotes_runtime()" line="785" name="rt" /><variable citdl="unserialize()" line="791" name="tmp" /><variable citdl="filesize()" line="787" name="fsize" /><variable citdl="file_get_contents()" line="789" name="data" /></scope><scope doc="&#xA;Lock the registry.&#xA;&lt;integer&gt; lock  - mode, one of LOCK_EX, LOCK_SH or LOCK_UN.&#xA;               See flock manual for more information.&#xA;Returns bool  - TRUE on success, FALSE if locking failed, or a&#xA;             PEAR error if some other error occurs (such as the&#xA;             lock file not being writable).&#xA;Access private&#xA;" ilk="function" line="812" lineend="866" name="_lock" returns="bool" signature="bool _lock($mode = LOCK_EX)"><variable default="LOCK_EX" ilk="argument" line="812" name="mode" /><variable citdl="string" line="852" name="str" /><variable citdl="string" line="831" name="open_mode" /></scope><scope ilk="function" line="868" lineend="877" name="_unlock" returns="ret" signature="_unlock()"><variable citdl="this._lock()" line="870" name="ret" /></scope><scope ilk="function" line="879" lineend="882" name="_packageExists" returns="file_exists()" signature="_packageExists($package, $channel = false)"><variable ilk="argument" line="879" name="package" /><variable default="false" ilk="argument" line="879" name="channel" /></scope><scope doc="&#xA;Determine whether a channel exists in the registry&#xA;&lt;string&gt; Channel  - name&#xA;&lt;bool&gt; if  - true, then aliases will be ignored&#xA;Returns boolean &#xA;" ilk="function" line="891" lineend="907" name="_channelExists" returns="boolean" signature="boolean _channelExists($channel, $noaliases = false)"><variable ilk="argument" line="891" name="channel" /><variable default="false" ilk="argument" line="891" name="noaliases" /><variable citdl="file_exists()" line="893" name="a" /></scope><scope doc="&#xA;Determine whether a mirror exists within the deafult channel in the registry&#xA;&lt;string&gt; Channel  - name&#xA;&lt;string&gt; Mirror  - name&#xA;Returns boolean &#xA;" ilk="function" line="917" lineend="931" name="_mirrorExists" returns="boolean" signature="boolean _mirrorExists($channel, $mirror)"><variable ilk="argument" line="917" name="channel" /><variable ilk="argument" line="917" name="mirror" /><variable citdl="data[]" line="924" name="m" /><variable citdl="this._channelInfo()" line="919" name="data" /></scope><scope doc="@param PEAR_ChannelFile Channel object&#xA;@param donotuse&#xA;@param string Last-Modified HTTP tag from remote request&#xA;@return boolean|PEAR_Error True on creation, false if it already exists" ilk="function" line="939" lineend="1018" name="_addChannel" returns="boolean" signature="boolean _addChannel($channel, $update = false, $lastmodified = false)"><variable ilk="argument" line="939" name="channel" /><variable default="false" ilk="argument" line="939" name="update" /><variable default="false" ilk="argument" line="939" name="lastmodified" /><variable line="990" name="fp" /><variable citdl="channel.toArray()" line="1008" name="info" /><variable citdl="this._getChannel()" line="954" name="checker" /><variable citdl="this._assertChannelDir()" line="970" name="ret" /></scope><scope doc="&#xA;Deletion fails if there are any packages installed from the channel&#xA;&lt;string|pear_channelfile&gt; channel  - name&#xA;Returns boolean|pear_error  - True on deletion, false if it doesn&apos;t exist&#xA;" ilk="function" line="1025" lineend="1088" name="_deleteChannel" returns="boolean" signature="boolean _deleteChannel($channel)"><variable ilk="argument" line="1025" name="channel" /><variable citdl="this._listChannelPackages()" line="1063" name="test" /><variable citdl="boolean" line="1082" name="ret" /><variable citdl="this._getChannelAliasFileName()" line="1073" name="file" /></scope><scope doc="&#xA;Determine whether a channel exists in the registry&#xA;&lt;string&gt; Channel  - Alias&#xA;Returns boolean &#xA;" ilk="function" line="1095" lineend="1098" name="_isChannelAlias" returns="boolean" signature="boolean _isChannelAlias($alias)"><variable ilk="argument" line="1095" name="alias" /></scope><scope doc="@param string|null&#xA;@param string|null&#xA;@param string|null&#xA;@return array|null&#xA;@access private" ilk="function" line="1107" lineend="1160" name="_packageInfo" returns="array" signature="array _packageInfo($package = null, $key = null, $channel = &apos;pear.php.net&apos;)"><variable default="null" ilk="argument" line="1107" name="package" /><variable default="null" ilk="argument" line="1107" name="key" /><variable default="&apos;pear.php.net&apos;" ilk="argument" line="1107" name="channel" /><variable citdl="this._openPackageFile()" line="1134" name="fp" /><variable citdl="this._listPackages()" line="1125" name="ps" /><variable citdl="get_magic_quotes_runtime()" line="1139" name="rt" /><variable citdl="array()" line="1112" name="ret" /><variable citdl="this._listChannels()" line="1111" name="channels" /><variable citdl="this._listPackages()" line="1116" name="packages" /><variable citdl="file_get_contents()" line="1143" name="data" /></scope><scope doc="&#xA;&lt;string&gt; Channel  - name&#xA;&lt;bool&gt; whether  - to strictly retrieve info of channels, not just aliases&#xA;Returns array|null &#xA;" ilk="function" line="1167" lineend="1186" name="_channelInfo" returns="array" signature="array _channelInfo($channel, $noaliases = false)"><variable ilk="argument" line="1167" name="channel" /><variable default="false" ilk="argument" line="1167" name="noaliases" /><variable citdl="this._openChannelFile()" line="1173" name="fp" /><variable citdl="get_magic_quotes_runtime()" line="1178" name="rt" /><variable citdl="file_get_contents()" line="1182" name="data" /></scope><scope ilk="function" line="1188" lineend="1229" name="_listChannels" returns="array()" signature="_listChannels()"><variable citdl="array()" line="1190" name="channellist" /><variable line="1196" name="ent" /><variable citdl="opendir()" line="1195" name="dp" /></scope><scope ilk="function" line="1231" lineend="1256" name="_listPackages" returns="this._listChannelPackages()" signature="_listPackages($channel = false)"><variable default="false" ilk="argument" line="1231" name="channel" /><variable line="1247" name="ent" /><variable citdl="array()" line="1241" name="pkglist" /><variable citdl="opendir()" line="1242" name="dp" /></scope><scope ilk="function" line="1258" lineend="1280" name="_listChannelPackages" returns="array()" signature="_listChannelPackages($channel)"><variable ilk="argument" line="1258" name="channel" /><variable line="1271" name="ent" /><variable citdl="array()" line="1260" name="pkglist" /><variable citdl="opendir()" line="1266" name="dp" /></scope><scope ilk="function" line="1282" lineend="1290" name="_listAllPackages" returns="ret" signature="_listAllPackages()"><variable citdl="this._listChannels()[]" line="1285" name="channel" /><variable citdl="array()" line="1284" name="ret" /></scope><scope doc="&#xA;Add an installed package to the registry&#xA;&lt;string&gt; package  - name&#xA;&lt;array&gt; package  - info (parsed by PEAR_Common::infoFrom*() methods)&#xA;Returns bool  - success of saving&#xA;Access private&#xA;" ilk="function" line="1299" lineend="1318" name="_addPackage" returns="bool" signature="bool _addPackage($package, $info)"><variable ilk="argument" line="1299" name="package" /><variable ilk="argument" line="1299" name="info" /><variable citdl="this._openPackageFile()" line="1305" name="fp" /></scope><scope doc="@param PEAR_PackageFile_v1|PEAR_PackageFile_v2&#xA;@return bool&#xA;@access private" ilk="function" line="1325" lineend="1369" name="_addPackage2" returns="bool" signature="bool _addPackage2($info)"><variable ilk="argument" line="1325" name="info" /><variable citdl="this._openPackageFile()" line="1359" name="fp" /><variable citdl="info.getValidationWarnings()[]" line="1335" name="err" /><variable citdl="info.getPackage()" line="1344" name="package" /><variable citdl="PEAR_Frontend.singleton()" line="1333" name="ui" /><variable citdl="info" line="1345" name="save" /><variable citdl="info.getChannel()" line="1343" name="channel" /></scope><scope doc="&#xA;&lt;string&gt; Package  - name&#xA;&lt;array&gt; parsed  - package.xml 1.0&#xA;&lt;bool&gt; this  - parameter is only here for BC. Don&apos;t use it.&#xA;Access private&#xA;" ilk="function" line="1377" lineend="1408" name="_updatePackage" returns="boolean" signature="_updatePackage($package, $info, $merge = true)"><variable ilk="argument" line="1377" name="package" /><variable ilk="argument" line="1377" name="info" /><variable default="true" ilk="argument" line="1377" name="merge" /><variable citdl="this._packageInfo()" line="1379" name="oldinfo" /><variable citdl="this._openPackageFile()" line="1384" name="fp" /><variable citdl="info" line="1394" name="newinfo" /><variable citdl="info" line="1398" name="diff" /></scope><scope doc="@param PEAR_PackageFile_v1|PEAR_PackageFile_v2&#xA;@return bool&#xA;@access private" ilk="function" line="1415" lineend="1433" name="_updatePackage2" returns="bool" signature="bool _updatePackage2($info)"><variable ilk="argument" line="1415" name="info" /><variable citdl="this._openPackageFile()" line="1421" name="fp" /><variable citdl="info" line="1426" name="save" /></scope><scope doc="&#xA;&lt;string&gt; Package  - name&#xA;&lt;string&gt; Channel  - name&#xA;Returns pear_packagefile_v1|pear_packagefile_v2|null &#xA;Access private&#xA;" ilk="function" line="1441" lineend="1461" name="_getPackage" returns="PEAR_PackageFile_v1" signature="pear_packagefile_v1 &amp;_getPackage($package, $channel = &apos;pear.php.net&apos;)"><variable ilk="argument" line="1441" name="package" /><variable default="&apos;pear.php.net&apos;" ilk="argument" line="1441" name="channel" /><variable citdl="this._packageInfo()" line="1443" name="info" /><variable citdl="this._config" line="1448" name="a" /><variable citdl="pkg.fromArray()" line="1459" name="pf" /><variable citdl="PEAR_PackageFile" line="1458" name="pkg" /></scope><scope doc="&#xA;&lt;string&gt; channel  - name&#xA;&lt;bool&gt; whether  - to strictly retrieve channel names&#xA;Returns pear_channelfile|pear_error &#xA;Access private&#xA;" ilk="function" line="1469" lineend="1562" name="_getChannel" returns="PEAR_ChannelFile" signature="pear_channelfile &amp;_getChannel($channel, $noaliases = false)"><variable ilk="argument" line="1469" name="channel" /><variable default="false" ilk="argument" line="1469" name="noaliases" /><variable citdl="PEAR_ChannelFile" line="1502" name="pear_channel" /><variable citdl="boolean" line="1471" name="ch" /><variable citdl="ch.getErrors()[]" line="1488" name="err" /><variable citdl="this._channelInfo()" line="1473" name="chinfo" /><variable citdl="PEAR_ChannelFile" line="1553" name="private" /><variable citdl="PEAR_ChannelFile" line="1535" name="doc_channel" /><variable citdl="err" line="1489" name="message" /></scope><scope doc="&#xA;&lt;string&gt; Package  - name&#xA;&lt;string&gt; Channel  - name&#xA;Returns bool &#xA;" ilk="function" line="1569" lineend="1577" name="packageExists" returns="bool" signature="bool packageExists($package, $channel = &apos;pear.php.net&apos;)"><variable ilk="argument" line="1569" name="package" /><variable default="&apos;pear.php.net&apos;" ilk="argument" line="1569" name="channel" /><variable citdl="this._packageExists()" line="1574" name="ret" /></scope><scope doc="&#xA;&lt;string&gt; channel  - name&#xA;&lt;bool&gt; if  - true, then aliases will be ignored&#xA;Returns bool &#xA;" ilk="function" line="1588" lineend="1596" name="channelExists" returns="bool" signature="bool channelExists($channel, $noaliases = false)"><variable ilk="argument" line="1588" name="channel" /><variable default="false" ilk="argument" line="1588" name="noaliases" /><variable citdl="this._channelExists()" line="1593" name="ret" /></scope><scope doc="&#xA;&lt;string&gt; channel  - name mirror is in&#xA;&lt;string&gt; mirror  - name&#xA;Returns bool &#xA;" ilk="function" line="1606" lineend="1615" name="mirrorExists" returns="bool" signature="bool mirrorExists($channel, $mirror)"><variable ilk="argument" line="1606" name="channel" /><variable ilk="argument" line="1606" name="mirror" /><variable citdl="this._mirrorExists()" line="1612" name="ret" /></scope><scope doc="Determines whether the parameter is an alias of a channel&#xA;@param string&#xA;@return bool" ilk="function" line="1624" lineend="1632" name="isAlias" returns="bool" signature="bool isAlias($alias)"><variable ilk="argument" line="1624" name="alias" /><variable citdl="this._isChannelAlias()" line="1629" name="ret" /></scope><scope doc="@param string|null&#xA;@param string|null&#xA;@param string&#xA;@return array|null" ilk="function" line="1643" lineend="1651" name="packageInfo" returns="array" signature="array packageInfo($package = null, $key = null, $channel = &apos;pear.php.net&apos;)"><variable default="null" ilk="argument" line="1643" name="package" /><variable default="null" ilk="argument" line="1643" name="key" /><variable default="&apos;pear.php.net&apos;" ilk="argument" line="1643" name="channel" /><variable citdl="this._packageInfo()" line="1648" name="ret" /></scope><scope doc="&#xA;Retrieve a raw array of channel data.&#xA;Do not use this, instead use {@link getChannel()} for normal&#xA;operations.  Array structure is undefined in this method&#xA;&lt;string&gt; channel  - name&#xA;&lt;bool&gt; whether  - to strictly retrieve information only on non-aliases&#xA;Returns array|null|pear_error &#xA;" ilk="function" line="1665" lineend="1673" name="channelInfo" returns="array" signature="array channelInfo($channel = null, $noaliases = false)"><variable default="null" ilk="argument" line="1665" name="channel" /><variable default="false" ilk="argument" line="1665" name="noaliases" /><variable citdl="this._channelInfo()" line="1670" name="ret" /></scope><scope doc="@param string" ilk="function" line="1680" lineend="1688" name="channelName" returns="e" signature="channelName($channel)"><variable ilk="argument" line="1680" name="channel" /><variable citdl="this._getChannelFromAlias()" line="1685" name="ret" /></scope><scope doc="@param string" ilk="function" line="1693" lineend="1701" name="channelAlias" returns="e" signature="channelAlias($channel)"><variable ilk="argument" line="1693" name="channel" /><variable citdl="this._getAlias()" line="1698" name="ret" /></scope><scope doc="&#xA;{{{ listPackages()&#xA;" ilk="function" line="1704" lineend="1712" name="listPackages" returns="e" signature="listPackages($channel = false)"><variable default="false" ilk="argument" line="1704" name="channel" /><variable citdl="this._listPackages()" line="1709" name="ret" /></scope><scope doc="&#xA;}}}&#xA;{{{ listAllPackages()&#xA;" ilk="function" line="1717" lineend="1725" name="listAllPackages" returns="e" signature="listAllPackages()"><variable citdl="this._listAllPackages()" line="1722" name="ret" /></scope><scope doc="&#xA;}}}&#xA;{{{ listChannel()&#xA;" ilk="function" line="1730" lineend="1738" name="listChannels" returns="e" signature="listChannels()"><variable citdl="this._listChannels()" line="1735" name="ret" /></scope><scope doc="&#xA;Add an installed package to the registry&#xA;&lt;string|pear_packagefile_v1|pear_packagefile_v2&gt; package  - name or object&#xA;              that will be passed to {@link addPackage2()}&#xA;&lt;array&gt; package  - info (parsed by PEAR_Common::infoFrom*() methods)&#xA;Returns bool  - success of saving&#xA;" ilk="function" line="1750" lineend="1771" name="addPackage" returns="bool" signature="bool addPackage($package, $info)"><variable ilk="argument" line="1750" name="package" /><variable ilk="argument" line="1750" name="info" /><variable citdl="PEAR_PackageFile_v1" line="1764" name="pf" /><variable citdl="this._addPackage()" line="1758" name="ret" /></scope><scope doc="&#xA;}}}&#xA;{{{ addPackage2()&#xA;" ilk="function" line="1776" lineend="1791" name="addPackage2" returns="this.addPackage()" signature="addPackage2($info)"><variable ilk="argument" line="1776" name="info" /><variable citdl="this._addPackage2()" line="1784" name="ret" /></scope><scope doc="For future expandibility purposes, separate this&#xA;@param PEAR_ChannelFile" ilk="function" line="1800" lineend="1806" name="updateChannel" returns="boolean" signature="updateChannel($channel, $lastmodified = null)"><variable ilk="argument" line="1800" name="channel" /><variable default="null" ilk="argument" line="1800" name="lastmodified" /></scope><scope doc="&#xA;Deletion fails if there are any packages installed from the channel&#xA;&lt;string|pear_channelfile&gt; channel  - name&#xA;Returns boolean|pear_error  - True on deletion, false if it doesn&apos;t exist&#xA;" ilk="function" line="1816" lineend="1829" name="deleteChannel" returns="boolean" signature="boolean deleteChannel($channel)"><variable ilk="argument" line="1816" name="channel" /><variable citdl="this._deleteChannel()" line="1822" name="ret" /></scope><scope doc="&#xA;&lt;pear_channelfile&gt; Channel  - object&#xA;&lt;string&gt; Last-Modified  - header from HTTP for caching&#xA;Returns boolean|pear_error  - True on creation, false if it already exists&#xA;" ilk="function" line="1839" lineend="1856" name="addChannel" returns="boolean" signature="boolean addChannel($channel, $lastmodified = false, $update = false)"><variable ilk="argument" line="1839" name="channel" /><variable default="false" ilk="argument" line="1839" name="lastmodified" /><variable default="false" ilk="argument" line="1839" name="update" /><variable citdl="this._addChannel()" line="1849" name="ret" /></scope><scope doc="&#xA;}}}&#xA;{{{ deletePackage()&#xA;" ilk="function" line="1861" lineend="1874" name="deletePackage" returns="e" signature="deletePackage($package, $channel = &apos;pear.php.net&apos;)"><variable ilk="argument" line="1861" name="package" /><variable default="&apos;pear.php.net&apos;" ilk="argument" line="1861" name="channel" /><variable citdl="array()" line="1871" name="p" /><variable citdl="file_exists()" line="1868" name="ret" /><variable citdl="this._packageFileName()" line="1867" name="file" /></scope><scope doc="&#xA;}}}&#xA;{{{ updatePackage()&#xA;" ilk="function" line="1879" lineend="1900" name="updatePackage" returns="this.updatePackage2()" signature="updatePackage($package, $info, $merge = true)"><variable ilk="argument" line="1879" name="package" /><variable ilk="argument" line="1879" name="info" /><variable default="true" ilk="argument" line="1879" name="merge" /><variable citdl="PEAR_PackageFile_v1" line="1893" name="pf" /><variable citdl="this._updatePackage()" line="1887" name="ret" /></scope><scope doc="&#xA;}}}&#xA;{{{ updatePackage2()&#xA;" ilk="function" line="1905" lineend="1928" name="updatePackage2" returns="this.updatePackage()" signature="updatePackage2($info)"><variable ilk="argument" line="1905" name="info" /><variable citdl="this._updatePackage2()" line="1920" name="ret" /></scope><scope doc="&#xA;&lt;string&gt; channel  - name&#xA;&lt;bool&gt; whether  - to strictly return raw channels (no aliases)&#xA;Returns pear_channelfile|pear_error &#xA;" ilk="function" line="1937" lineend="1948" name="getChannel" returns="PEAR_ChannelFile" signature="pear_channelfile &amp;getChannel($channel, $noaliases = false)"><variable ilk="argument" line="1937" name="channel" /><variable default="false" ilk="argument" line="1937" name="noaliases" /><variable citdl="this._getChannel()" line="1942" name="ret" /></scope><scope doc="&#xA;&lt;string&gt; package  - name&#xA;&lt;string&gt; channel  - name&#xA;Returns pear_packagefile_v1|pear_packagefile_v2|null &#xA;" ilk="function" line="1957" lineend="1965" name="getPackage" returns="PEAR_PackageFile_v1" signature="pear_packagefile_v1 &amp;getPackage($package, $channel = &apos;pear.php.net&apos;)"><variable ilk="argument" line="1957" name="package" /><variable default="&apos;pear.php.net&apos;" ilk="argument" line="1957" name="channel" /><variable citdl="this._getPackage()" line="1962" name="pf" /></scope><scope doc="Get PEAR_PackageFile_v[1/2] objects representing the contents of&#xA;a dependency group that are installed.&#xA;&#xA;This is used at uninstall-time&#xA;@param array&#xA;@return array|false" ilk="function" line="1977" lineend="2010" name="getInstalledGroup" returns="array" signature="array getInstalledGroup($group)"><variable ilk="argument" line="1977" name="group" /><variable citdl="this.getPackage()" line="1986" name="p" /><variable line="1985" name="depchannel" /><variable citdl="p" line="1988" name="save" /><variable citdl="array()" line="1979" name="ret" /><variable citdl="group[]" line="1984" name="package" /></scope><scope doc="&#xA;&lt;string&gt; channel  - name&#xA;Returns pear_validate|false &#xA;" ilk="function" line="2017" lineend="2025" name="getChannelValidator" returns="PEAR_Validate" signature="pear_validate &amp;getChannelValidator($channel)"><variable ilk="argument" line="2017" name="channel" /><variable citdl="this.getChannel()" line="2019" name="chan" /><variable citdl="chan.getValidationObject()" line="2023" name="val" /></scope><scope doc="&#xA;&lt;string&gt; channel  - name&#xA;Returns array  - an array of PEAR_ChannelFile objects representing every installed channel&#xA;" ilk="function" line="2032" lineend="2047" name="getChannels" returns="array" signature="array &amp;getChannels()"><variable citdl="this._getChannel()" line="2039" name="e" /><variable citdl="this._listChannels()[]" line="2038" name="channel" /><variable citdl="array()" line="2034" name="ret" /></scope><scope doc="&#xA;Test whether a file or set of files belongs to a package.&#xA;If an array is passed in&#xA;&lt;string|array&gt; file  - path, absolute or relative to the pear&#xA;                    install dir&#xA;&lt;string|array&gt; name  - of PEAR package or array(&apos;package&apos; =&gt; name, &apos;channel&apos; =&gt;&#xA;                    channel) of a package that will be ignored&#xA;&lt;string&gt; API  - version - 1.1 will exclude any files belonging to a package&#xA;&lt;array&gt; private  - recursion variable&#xA;Returns array|false  - which package and channel the file belongs to, or an empty&#xA;                    string if the file does not belong to an installed package,&#xA;                    or belongs to the second parameter&apos;s package&#xA;" ilk="function" line="2066" lineend="2132" name="checkFileMap" returns="array" signature="array checkFileMap($path, $package = false, $api = &apos;1.0&apos;, $attrs = false)"><variable ilk="argument" line="2066" name="path" /><variable default="false" ilk="argument" line="2066" name="package" /><variable default="&apos;1.0&apos;" ilk="argument" line="2066" name="api" /><variable default="false" ilk="argument" line="2066" name="attrs" /><variable citdl="this._readFileMap()" line="2106" name="err" /><variable citdl="strlen()" line="2121" name="l" /><variable citdl="array()" line="2078" name="pkgs" /><variable citdl="create_function()" line="2074" name="notempty" /><variable citdl="attrs" line="2079" name="name" /></scope><variable attributes="static" line="2069" name="notempty" /><scope doc="&#xA;Force a reload of the filemap&#xA;Since 1.5.0RC3&#xA;" ilk="function" line="2140" lineend="2144" name="flushFileMap" signature="flushFileMap()" /><scope doc="&#xA;Get the expected API version.  Channels API is version 1.1, as it is backwards&#xA;compatible with 1.0&#xA;Returns string &#xA;" ilk="function" line="2153" lineend="2156" name="apiVersion" returns="string" signature="string apiVersion()" /><scope doc="&#xA;Parse a package name, or validate a parsed package name array&#xA;&lt;string|array&gt; pass  - in an array of format&#xA;                    array(&#xA;                     &apos;package&apos; =&gt; &apos;pname&apos;,&#xA;                    [&apos;channel&apos; =&gt; &apos;channame&apos;,]&#xA;                    [&apos;version&apos; =&gt; &apos;version&apos;,]&#xA;                    [&apos;state&apos; =&gt; &apos;state&apos;,]&#xA;                    [&apos;group&apos; =&gt; &apos;groupname&apos;])&#xA;                    or a string of format&#xA;                    [channel://][channame/]pname[-version|-state][/group=groupname]&#xA;Returns array|pear_error &#xA;" ilk="function" line="2173" lineend="2339" name="parsePackageName" returns="array" signature="array parsePackageName($param, $defaultchannel = &apos;pear.php.net&apos;)"><variable ilk="argument" line="2173" name="param" /><variable default="&apos;pear.php.net&apos;" ilk="argument" line="2173" name="defaultchannel" /><variable citdl="this.channelExists()" line="2280" name="info" /><variable citdl="chan.getValidationPackage()" line="2299" name="vpackage" /><variable citdl="param" line="2175" name="saveparam" /><variable citdl="pathinfo()" line="2261" name="pathinfo" /><variable citdl="this.getChannel()" line="2288" name="chan" /><variable citdl="explode()" line="2219" name="parts" /><variable line="2193" name="components" /><variable citdl="explode()" line="2270" name="test" /><variable citdl="chan.getValidationObject()" line="2298" name="validate" /></scope><scope doc="@param array&#xA;@return string" ilk="function" line="2345" lineend="2394" name="parsedPackageNameToString" returns="string" signature="string parsedPackageNameToString($parsed, $brief = false)"><variable ilk="argument" line="2345" name="parsed" /><variable default="false" ilk="argument" line="2345" name="brief" /><variable line="2376" name="ver" /><variable line="2385" name="name" /><variable citdl="parsed[]" line="2385" name="value" /><variable citdl="parsed" line="2351" name="p" /><variable citdl="string" line="2366" name="upass" /><variable citdl="string" line="2374" name="ret" /></scope></scope></scope>