<scope ilk="blob" lang="PHP" name="Installer.php" src="/usr/share/php/PEAR/Installer.php"><import line="23" module="OS/Guess.php" /><import line="24" module="PEAR/Downloader.php" /><import line="169" module="PEAR/Task/Common.php" /><import line="170" module="PEAR/Task/Replace.php" /><import line="171" module="PEAR/Task/Unixeol.php" /><import line="172" module="PEAR/Task/Windowseol.php" /><import line="173" module="PEAR/PackageFile/v1.php" /><import line="174" module="PEAR/PackageFile/v2.php" /><import line="175" module="PEAR/PackageFile/Generator/v1.php" /><import line="176" module="PEAR/PackageFile/Generator/v2.php" /><import line="1536" module="PEAR/Builder.php" /><import line="1679" module="PEAR/Dependency2.php" /><variable ilk="constant" line="26" name="PEAR_INSTALLER_NOBINARY" /><scope classrefs="PEAR_Downloader" doc="Administration class used to install PEAR packages and maintain the&#xA;installed package database.&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Stig Bakken &lt;ssb@php.net&gt;&#xA;@author     Tomas V.V. Cox &lt;cox@idecnet.com&gt;&#xA;@author     Martin Jansen &lt;mj@php.net&gt;&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 0.1" ilk="class" line="43" lineend="1823" name="PEAR_Installer"><variable citdl="string" doc="name of the package directory, for example Foo-1.0&#xA;@var string" line="50" name="pkgdir" /><variable citdl="string" doc="directory where PHP code files go&#xA;@var string" line="55" name="phpdir" /><variable citdl="string" doc="directory where PHP extension files go&#xA;@var string" line="60" name="extdir" /><variable citdl="string" doc="directory where documentation goes&#xA;@var string" line="65" name="docdir" /><variable citdl="string" doc="installation root directory (ala PHP&apos;s INSTALL_ROOT or&#xA;automake&apos;s DESTDIR&#xA;@var string" line="71" name="installroot" /><variable citdl="int" doc="debug level&#xA;@var int" line="76" name="debug" /><variable citdl="string" doc="temporary directory&#xA;@var string" line="81" name="tmpdir" /><variable citdl="PEAR_Registry" doc="PEAR_Registry object used by the installer&#xA;@var PEAR_Registry" line="87" name="registry" /><variable citdl="array" doc="array of PEAR_Downloader_Packages&#xA;@var array" line="93" name="_downloadedPackages" /><variable citdl="array" doc="List of file transactions queued for an install/upgrade/uninstall.&#xA;&#xA; Format:&#xA;   array(&#xA;     0 =&gt; array(&quot;rename =&gt; array(&quot;from-file&quot;, &quot;to-file&quot;)),&#xA;     1 =&gt; array(&quot;delete&quot; =&gt; array(&quot;file-to-delete&quot;)),&#xA;     ...&#xA;   )&#xA;&#xA;@var array" line="106" name="file_operations" /><scope attributes="__ctor__" doc="&#xA;PEAR_Installer constructor.&#xA;&lt;object&gt; $ui  - user interface object (instance of PEAR_Frontend_*)&#xA;Access public&#xA;" ilk="function" line="119" lineend="124" name="PEAR_Installer" signature="PEAR_Installer(object &amp; $ui)"><variable citdl="object" ilk="argument" line="119" name="ui" /></scope><scope ilk="function" line="126" lineend="129" name="setOptions" signature="setOptions($options)"><variable ilk="argument" line="126" name="options" /></scope><variable citdl="options" line="128" name="_options" /><scope ilk="function" line="131" lineend="135" name="setConfig" signature="setConfig(&amp; $config)"><variable ilk="argument" line="131" name="config" /></scope><variable citdl="config" line="133" name="config" /><variable citdl="this.config.getRegistry()" line="134" name="_registry" /><scope doc="&#xA;}}}&#xA;" ilk="function" line="139" lineend="144" name="_removeBackups" signature="_removeBackups($files)"><variable ilk="argument" line="139" name="files" /><variable citdl="files[]" line="141" name="path" /></scope><scope doc="&#xA;Delete a package&apos;s installed files, does not remove empty directories.&#xA;&lt;string&gt; package  - name&#xA;&lt;string&gt; channel  - name&#xA;&lt;bool&gt; if  - true, then files are backed up first&#xA;Returns bool  - TRUE on success, or a PEAR error on failure&#xA;Access protected&#xA;" ilk="function" line="157" lineend="204" name="_deletePackageFiles" returns="bool" signature="bool _deletePackageFiles($package, $channel = false, $backup = false)"><variable ilk="argument" line="157" name="package" /><variable default="false" ilk="argument" line="157" name="channel" /><variable default="false" ilk="argument" line="157" name="backup" /><variable citdl="props" line="190" name="path" /><variable line="185" name="file" /><variable citdl="array()" line="184" name="ret" /><variable citdl="this._registry.packageInfo()" line="179" name="filelist" /><variable citdl="filelist[]" line="185" name="props" /></scope><scope doc="&#xA;&lt;string&gt; filename  - &#xA;&lt;array&gt; attributes  - from &lt;file&gt; tag in package.xml&#xA;&lt;string&gt; path  - to install the file in&#xA;&lt;array&gt; options  - from command-line&#xA;Access private&#xA;" ilk="function" line="216" lineend="487" name="_installFile" returns="PEAR_INSTALLER_SKIPPED" signature="_installFile($file, $atts, $tmp_path, $options)"><variable ilk="argument" line="216" name="file" /><variable ilk="argument" line="216" name="atts" /><variable ilk="argument" line="216" name="tmp_path" /><variable ilk="argument" line="216" name="options" /><variable citdl="atts[]" line="352" name="a" /><variable citdl="this.config.get()" line="474" name="loc" /><variable citdl="md5_file()" line="333" name="md5sum" /><variable citdl="this.config.get()" line="353" name="to" /><variable citdl="dirname()" line="294" name="installedas_dest_dir" /><variable citdl="this._registry.getChannel()" line="365" name="chan" /><variable citdl="installed_as" line="292" name="final_dest_file" /><variable line="286" name="ds2" /><variable citdl="tmp_path" line="283" name="orig_file" /><variable citdl="dest_dir" line="295" name="installedas_dest_file" /><variable citdl="substr()" line="231" name="platform" /><variable line="401" name="wp" /><variable citdl="dest_dir" line="279" name="dest_file" /><variable citdl="file_get_contents()" line="342" name="contents" /><variable citdl="this.config.get()" line="255" name="dest_dir" /><variable citdl="boolean" line="230" name="negate" /><variable citdl="subst_to" line="351" name="subst_from" /><variable citdl="dest_dir" line="269" name="save_destdir" /><variable citdl="OS_Guess" line="226" name="os" /><variable citdl="this.pkginfo.getChannel()" line="244" name="channel" /><variable citdl="int" line="446" name="mode" /></scope><variable attributes="static" line="219" name="os" /><scope doc="@param PEAR_PackageFile_v1|PEAR_PackageFile_v2&#xA;@param string filename&#xA;@param array attributes from &lt;file&gt; tag in package.xml&#xA;@param string path to install the file in&#xA;@param array options from command-line&#xA;@access private" ilk="function" line="500" lineend="696" name="_installFile2" returns="this.raiseError()" signature="_installFile2(&amp; $pkg, $file, &amp; $real_atts, $tmp_path, $options)"><variable ilk="argument" line="500" name="pkg" /><variable ilk="argument" line="500" name="file" /><variable ilk="argument" line="500" name="real_atts" /><variable ilk="argument" line="500" name="tmp_path" /><variable ilk="argument" line="500" name="options" /><variable citdl="role.processInstallation()" line="525" name="info" /><variable citdl="atts" line="555" name="attribs" /><variable citdl="string" line="591" name="task" /><variable citdl="real_atts" line="502" name="atts" /><variable citdl="role.setup()" line="516" name="err" /><variable citdl="this.config.get()" line="688" name="loc" /><variable citdl="task.startSession()" line="595" name="res" /><variable citdl="md5_file()" line="572" name="md5sum" /><variable attributes="__not_yet_defined__" line="530" name="orig_file" /><variable line="607" name="wp" /><variable citdl="atts[]" line="589" name="raw" /><variable citdl="str_replace()" line="589" name="tag" /><variable citdl="PEAR_Installer_Role.factory()" line="515" name="role" /><variable citdl="file_get_contents()" line="580" name="contents" /><variable citdl="installed_as" line="535" name="final_dest_file" /><variable attributes="__not_yet_defined__" citdl="dirname()" line="530" name="dest_dir" /><variable attributes="__not_yet_defined__" citdl="dest_dir" line="530" name="dest_file" /><variable attributes="__not_yet_defined__" line="530" name="save_destdir" /><variable citdl="pkg.getChannel()" line="507" name="channel" /><variable citdl="int" line="661" name="mode" /></scope><scope doc="&#xA;Add a file operation to the current file transaction.&#xA;See startFileTransaction()&#xA;&lt;string&gt; $type  - This can be one of:&#xA;   - rename:  rename a file ($data has 3 values)&#xA;   - backup:  backup an existing file ($data has 1 value)&#xA;   - removebackup:  clean up backups created during install ($data has 1 value)&#xA;   - chmod:   change permissions on a file ($data has 2 values)&#xA;   - delete:  delete a file ($data has 1 value)&#xA;   - rmdir:   delete a directory if empty ($data has 1 value)&#xA;   - installed_as: mark a file as installed ($data has 4 values).&#xA;&lt;array&gt; $data  - For all file operations, this array must contain the&#xA;   full path to the file or directory that is being operated on.  For&#xA;   the rename command, the first parameter must be the file to rename,&#xA;   the second its new name, the third whether this is a PHP extension.&#xA;   The installed_as operation contains 4 elements in this order:&#xA;   1. Filename as listed in the filelist element from package.xml&#xA;   2. Full path to the installed file&#xA;   3. Full path from the php_dir configuration variable used in this&#xA;      installation&#xA;   4. Relative path from the php_dir that this file is installed in&#xA;" ilk="function" line="725" lineend="739" name="addFileOperation" returns="this.raiseError()" signature="addFileOperation(string $type, array $data)"><variable citdl="string" ilk="argument" line="725" name="type" /><variable citdl="array" ilk="argument" line="725" name="data" /><variable citdl="decoct()" line="733" name="octmode" /></scope><scope doc="&#xA;}}}&#xA;{{{ startFileTransaction()&#xA;" ilk="function" line="744" lineend="750" name="startFileTransaction" signature="startFileTransaction($rollback_in_case = false)"><variable default="false" ilk="argument" line="744" name="rollback_in_case" /></scope><scope doc="&#xA;}}}&#xA;{{{ commitFileTransaction()&#xA;" ilk="function" line="755" lineend="963" name="commitFileTransaction" returns="boolean" signature="commitFileTransaction()"><variable citdl="boolean" line="788" name="fp" /><variable citdl="array()" line="804" name="info" /><variable citdl="array()" line="758" name="errors" /><variable line="923" name="entry" /><variable citdl="string" line="871" name="extra" /><variable line="839" name="i" /><variable attributes="__not_yet_defined__" line="760" name="data" /><variable citdl="errors[]" line="826" name="error" /><variable citdl="this.file_operations[]" line="759" name="tr" /><variable citdl="count()" line="824" name="m" /><variable citdl="count()" line="821" name="n" /><variable line="887" name="perms" /><variable citdl="opendir()" line="922" name="testme" /><variable citdl="this._registry.checkFileMap()" line="805" name="result" /><variable line="759" name="key" /><variable citdl="array_diff()" line="807" name="res" /><variable citdl="file_exists()" line="867" name="test" /><variable citdl="this._registry.getPackage()" line="809" name="new" /><variable attributes="__not_yet_defined__" line="760" name="type" /><variable citdl="decoct()" line="906" name="octmode" /></scope><variable citdl="array()" line="837" name="_dirtree" /><scope doc="&#xA;}}}&#xA;{{{ rollbackFileTransaction()&#xA;" ilk="function" line="968" lineend="1009" name="rollbackFileTransaction" signature="rollbackFileTransaction()"><variable attributes="__not_yet_defined__" line="973" name="type" /><variable citdl="this.file_operations[]" line="972" name="tr" /><variable attributes="__not_yet_defined__" line="973" name="data" /><variable citdl="count()" line="970" name="n" /></scope><scope doc="&#xA;}}}&#xA;{{{ mkDirHier($dir)&#xA;" ilk="function" line="1014" lineend="1018" name="mkDirHier" signature="mkDirHier($dir)"><variable ilk="argument" line="1014" name="dir" /></scope><scope doc="Download any files and their dependencies, if necessary&#xA;&#xA;@param array a mixed list of package names, local files, or package.xml&#xA;@param PEAR_Config&#xA;@param array options from the command line&#xA;@param array this is the array that will be populated with packages to&#xA;             install.  Format of each entry:&#xA;&#xA;&lt;code&gt;&#xA;array(&apos;pkg&apos; =&gt; &apos;package_name&apos;, &apos;file&apos; =&gt; &apos;/path/to/local/file&apos;,&#xA;   &apos;info&apos; =&gt; array() // parsed package.xml&#xA;);&#xA;&lt;/code&gt;&#xA;@param array this will be populated with any error messages&#xA;@param false private recursion variable&#xA;@param false private recursion variable&#xA;@param false private recursion variable&#xA;@deprecated in favor of PEAR_Downloader" ilk="function" line="1043" lineend="1054" name="download" returns="ret" signature="download($packages, $options, &amp; $config, &amp; $installpackages, &amp; $errors, $installed = false, $willinstall = false, $state = false)"><variable ilk="argument" line="1043" name="packages" /><variable ilk="argument" line="1043" name="options" /><variable ilk="argument" line="1043" name="config" /><variable ilk="argument" line="1043" name="installpackages" /><variable ilk="argument" line="1043" name="errors" /><variable default="false" ilk="argument" line="1043" name="installed" /><variable default="false" ilk="argument" line="1043" name="willinstall" /><variable default="false" ilk="argument" line="1043" name="state" /><variable line="1048" name="ret" /></scope><scope doc="&#xA;}}}&#xA;{{{ _parsePackageXml()&#xA;" ilk="function" line="1059" lineend="1080" name="_parsePackageXml" returns="this.raiseError()" signature="_parsePackageXml(&amp; $descfile)"><variable ilk="argument" line="1059" name="descfile" /><variable citdl="err" line="1069" name="loglevel" /><variable citdl="pkg.fromAnyFile()" line="1064" name="p" /><variable citdl="PEAR_PackageFile" line="1062" name="pkg" /><variable citdl="p.getUserInfo()[]" line="1068" name="err" /></scope><scope doc="Set the list of PEAR_Downloader_Package objects to allow more sane&#xA;dependency validation&#xA;@param array" ilk="function" line="1088" lineend="1097" name="setDownloadedPackages" returns="err" signature="setDownloadedPackages(&amp; $pkgs)"><variable ilk="argument" line="1088" name="pkgs" /><variable citdl="this.analyzeDependencies()" line="1091" name="err" /></scope><scope doc="Set the list of PEAR_Downloader_Package objects to allow more sane&#xA;dependency validation&#xA;@param array" ilk="function" line="1104" lineend="1107" name="setUninstallPackages" signature="setUninstallPackages(&amp; $pkgs)"><variable ilk="argument" line="1104" name="pkgs" /></scope><scope ilk="function" line="1109" lineend="1112" name="getInstallPackages" returns="this._downloadedPackages" signature="getInstallPackages()" /><scope doc="&#xA;Installs the files within the package file specified.&#xA;&lt;string|pear_downloader_package&gt; $pkgfile  - path to the package file,&#xA;       or a pre-initialized packagefile object&#xA;&lt;array&gt; $options  - &#xA;recognized options:&#xA;- installroot   : optional prefix directory for installation&#xA;- force         : force installation&#xA;- register-only : update registry but don&apos;t install files&#xA;- upgrade       : upgrade existing install&#xA;- soft          : fail silently&#xA;- nodeps        : ignore dependency conflicts/missing dependencies&#xA;- alldeps       : install all dependencies&#xA;- onlyreqdeps   : install only required dependencies&#xA;Returns array|pear_error  - package info if successful&#xA;" ilk="function" line="1134" lineend="1525" name="install" returns="array" signature="array install($pkgfile, array $options = array())"><variable ilk="argument" line="1134" name="pkgfile" /><variable citdl="array" default="array()" ilk="argument" line="1134" name="options" /><variable citdl="substr()" line="1240" name="file2" /><variable citdl="substr()" line="1239" name="basedir" /><variable citdl="string" line="1454" name="installphase" /><variable citdl="Archive_Tar" line="1157" name="tar" /><variable citdl="dirtree[]" line="1480" name="notused" /><variable citdl="strpos()" line="1238" name="pos" /><variable citdl="channel" line="1318" name="usechannel" /><variable citdl="pkgfile.getPackageFile()" line="1140" name="pkg" /><variable line="1230" name="file" /><variable citdl="this._prependPath()" line="1172" name="packrootphp_dir" /><variable citdl="test" line="1229" name="tmp" /><variable citdl="pkg.getPackagexmlVersion()" line="1384" name="ver" /><variable citdl="this._installFile()" line="1404" name="res" /><variable citdl="string" line="1295" name="fmt" /><variable citdl="this.config.get()" line="1180" name="php_dir" /><variable citdl="pkgs[]" line="1219" name="param" /><variable citdl="this.getInstallPackages()" line="1217" name="pkgs" /><variable citdl="installregistry.packageExists()" line="1211" name="test" /><variable citdl="pkg.getChannel()" line="1164" name="channel" /><variable citdl="pkg.getPackageFile()" line="1142" name="descfile" /><variable line="1425" name="real" /><variable citdl="channel" line="1203" name="testp" /><variable citdl="this._registry" line="1178" name="installregistry" /><variable citdl="PEAR_PackageFile" line="1274" name="pfk" /><variable citdl="dirname()" line="1151" name="tmpdir" /><variable citdl="string" line="1293" name="msg" /><variable citdl="pkg.getVersion()" line="1338" name="v2" /><variable citdl="pkgfile" line="1139" name="dlpkg" /><variable citdl="max()" line="1294" name="longest" /><variable citdl="filelist[]" line="1401" name="atts" /><variable citdl="pfk.fromArray()" line="1275" name="parentpkg" /><variable citdl="tmp[]" line="1230" name="info" /><variable citdl="pkg.getName()" line="1163" name="pkgname" /><variable citdl="installregistry.packageInfo()" line="1337" name="v1" /><variable line="1396" name="dirtree" /><variable citdl="boolean" line="1455" name="oldversion" /><variable citdl="this._prependPath()" line="1168" name="regdir" /><variable citdl="pkg.getInstallationFilelist()" line="1386" name="filelist" /><variable citdl="installregistry.getPackage()" line="1395" name="p" /><variable citdl="installregistry.addPackage2()" line="1453" name="ret" /><variable citdl="err" line="1359" name="backedup" /><variable citdl="installregistry.packageInfo()" line="1228" name="parentreg" /><variable citdl="this._registry.getChannel()" line="1188" name="chanobj" /><variable citdl="boolean" line="1218" name="found" /><variable citdl="pkg.getInstallationFileList()" line="1204" name="instfilelist" /><variable citdl="this.config.get()" line="1370" name="savechannel" /><variable line="1480" name="dir" /><variable citdl="version_compare()" line="1339" name="cmp" /></scope><variable citdl="pkg" line="1366" name="pkginfo" /><variable citdl="int" line="1368" name="source_files" /><scope doc="@param string&#xA;@param PEAR_PackageFile_v1|PEAR_PackageFile_v2" ilk="function" line="1534" lineend="1615" name="_compileSourceFiles" returns="built" signature="_compileSourceFiles($savechannel, &amp; $filelist)"><variable ilk="argument" line="1534" name="savechannel" /><variable ilk="argument" line="1534" name="filelist" /><variable citdl="bob.build()" line="1540" name="built" /><variable citdl="copyto" line="1569" name="extra" /><variable citdl="ext" line="1562" name="dest" /><variable citdl="basename()" line="1549" name="bn" /><variable citdl="this._prependPath()" line="1568" name="copyto" /><variable attributes="__not_yet_defined__" line="1550" name="_ext_name" /><variable citdl="string" line="1563" name="packagingroot" /><variable citdl="built[]" line="1548" name="ext" /><variable citdl="dirname()" line="1572" name="copydir" /><variable citdl="string" line="1557" name="role" /><variable citdl="int" line="1591" name="mode" /><variable citdl="PEAR_Builder" line="1538" name="bob" /><variable citdl="array()" line="1607" name="data" /><variable attributes="__not_yet_defined__" line="1550" name="_ext_suff" /></scope><scope doc="&#xA;}}}&#xA;" ilk="function" line="1618" lineend="1621" name="getUninstallPackages" returns="this._downloadedPackages" signature="&amp;getUninstallPackages()" /><scope doc="&#xA;Uninstall a package&#xA;This method removes all files installed by the application, and then&#xA;removes any empty directories.&#xA;&lt;string&gt; package  - name&#xA;&lt;array&gt; Command-line  - options. Possibilities include:&#xA;             - installroot: base installation dir, if not the default&#xA;             - register-only : update registry but don&apos;t remove files&#xA;             - nodeps: do not process dependencies of other packages to ensure&#xA;                       uninstallation does not break things&#xA;" ilk="function" line="1637" lineend="1762" name="uninstall" returns="this.raiseError()" signature="uninstall($package, $options = array())"><variable ilk="argument" line="1637" name="package" /><variable default="array()" ilk="argument" line="1637" name="options" /><variable citdl="this._registry.parsePackageName()" line="1651" name="info" /><variable citdl="depchecker.validatePackageUninstall()" line="1685" name="e" /><variable citdl="pkg.getDirTree()" line="1733" name="dirtree" /><variable citdl="PEAR_Dependency2" line="1684" name="depchecker" /><variable citdl="dirtree[]" line="1741" name="notused" /><variable line="1741" name="dir" /><variable citdl="pkg.getFilelist()" line="1676" name="filelist" /><variable line="1639" name="installRoot" /><variable citdl="package" line="1646" name="pkg" /><variable citdl="package.getChannel()" line="1645" name="channel" /><variable citdl="this.config.get()" line="1656" name="savechannel" /></scope><scope doc="&#xA;Sort a list of arrays of array(downloaded packagefilename) by dependency.&#xA;It also removes duplicate dependencies&#xA;&lt;array&gt; an  - array of PEAR_PackageFile_v[1/2] objects&#xA;Returns array|pear_error  - array of array(packagefilename, package.xml contents)&#xA;" ilk="function" line="1771" lineend="1778" name="sortPackagesForUninstall" returns="array" signature="array sortPackagesForUninstall(&amp; $packages)"><variable ilk="argument" line="1771" name="packages" /></scope><variable citdl="PEAR_DependencyDB.singleton()" line="1773" name="_dependencyDB" /><scope ilk="function" line="1780" lineend="1799" name="_sortUninstall" returns="int" signature="_sortUninstall($a, $b)"><variable ilk="argument" line="1780" name="a" /><variable ilk="argument" line="1780" name="b" /></scope><scope doc="&#xA;}}}&#xA;{{{ _sortDirs()&#xA;" ilk="function" line="1803" lineend="1808" name="_sortDirs" returns="int" signature="_sortDirs($a, $b)"><variable ilk="argument" line="1803" name="a" /><variable ilk="argument" line="1803" name="b" /></scope><scope doc="&#xA;{{{ _buildCallback()&#xA;" ilk="function" line="1814" lineend="1820" name="_buildCallback" signature="_buildCallback($what, $data)"><variable ilk="argument" line="1814" name="what" /><variable ilk="argument" line="1814" name="data" /></scope></scope></scope>