<scope ilk="blob" lang="PHP" name="Exception.php" src="/usr/share/php/PEAR/Exception.php"><scope classrefs="Exception" doc="Base PEAR_Exception Class&#xA;&#xA;1) Features:&#xA;&#xA;- Nestable exceptions (throw new PEAR_Exception($msg, $prev_exception))&#xA;- Definable triggers, shot when exceptions occur&#xA;- Pretty and informative error messages&#xA;- Added more context info available (like class, method or cause)&#xA;- cause can be a PEAR_Exception or an array of mixed&#xA;  PEAR_Exceptions/PEAR_ErrorStack warnings&#xA;- callbacks for specific exception classes and their children&#xA;&#xA;2) Ideas:&#xA;&#xA;- Maybe a way to define a &apos;template&apos; for the output&#xA;&#xA;3) Inherited properties from PHP Exception Class:&#xA;&#xA;protected $message&#xA;protected $code&#xA;protected $line&#xA;protected $file&#xA;private   $trace&#xA;&#xA;4) Inherited methods from PHP Exception Class:&#xA;&#xA;__clone&#xA;__construct&#xA;getMessage&#xA;getCode&#xA;getFile&#xA;getLine&#xA;getTraceSafe&#xA;getTraceSafeAsString&#xA;__toString&#xA;&#xA;5) Usage example&#xA;&#xA;&lt;code&gt;&#xA; require_once &apos;PEAR/Exception.php&apos;;&#xA;&#xA; class Test {&#xA;    function foo() {&#xA;        throw new PEAR_Exception(&apos;Error Message&apos;, ERROR_CODE);&#xA;    }&#xA; }&#xA;&#xA; function myLogger($pear_exception) {&#xA;    echo $pear_exception-&gt;getMessage();&#xA; }&#xA; // each time a exception is thrown the &apos;myLogger&apos; will be called&#xA; // (its use is completely optional)&#xA; PEAR_Exception::addObserver(&apos;myLogger&apos;);&#xA; $test = new Test;&#xA; try {&#xA;    $test-&gt;foo();&#xA; } catch (PEAR_Exception $e) {&#xA;    print $e;&#xA; }&#xA;&lt;/code&gt;&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Tomas V.V.Cox &lt;cox@idecnet.com&gt;&#xA;@author     Hans Lellelid &lt;hans@velum.net&gt;&#xA;@author     Bertrand Mansion &lt;bmansion@mamasam.com&gt;&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.3.3" ilk="class" line="97" lineend="389" name="PEAR_Exception"><variable ilk="constant" line="99" name="OBSERVER_PRINT" /><variable ilk="constant" line="100" name="OBSERVER_TRIGGER" /><variable ilk="constant" line="101" name="OBSERVER_DIE" /><variable attributes="protected" citdl="p2" line="102" name="cause" /><variable attributes="private static" citdl="array()" line="103" name="_observers" /><variable attributes="private static" citdl="int" line="104" name="_uniqueid" /><variable attributes="private" citdl="this.getTrace()" line="105" name="_trace" /><scope attributes="public __ctor__" doc="&#xA;Supported signatures:&#xA; - PEAR_Exception(string $message);&#xA; - PEAR_Exception(string $message, int $code);&#xA; - PEAR_Exception(string $message, Exception $cause);&#xA; - PEAR_Exception(string $message, Exception $cause, int $code);&#xA; - PEAR_Exception(string $message, PEAR_Error $cause);&#xA; - PEAR_Exception(string $message, PEAR_Error $cause, int $code);&#xA; - PEAR_Exception(string $message, array $causes);&#xA; - PEAR_Exception(string $message, array $causes, int $code);&#xA;&lt;string&gt; exception  - message&#xA;&lt;int|exception|pear_error|array|null&gt; exception  - cause&#xA;&lt;int|null&gt; exception  - code or null&#xA;" ilk="function" line="121" lineend="146" name="__construct" signature="__construct($message, $p2 = null, $p3 = null)"><variable ilk="argument" line="121" name="message" /><variable default="null" ilk="argument" line="121" name="p2" /><variable default="null" ilk="argument" line="121" name="p3" /><variable citdl="p2" line="124" name="code" /></scope><scope attributes="public static" doc="&#xA;&lt;mixed&gt; $callback  - - A valid php callback, see php func is_callable()&#xA;                        - A PEAR_Exception::OBSERVER_* constant&#xA;                        - An array(const PEAR_Exception::OBSERVER_*,&#xA;                          mixed $options)&#xA;&lt;string&gt; $label  - The name of the observer. Use this if you want&#xA;                        to remove it later with removeObserver()&#xA;" ilk="function" line="156" lineend="159" name="addObserver" signature="addObserver(mixed $callback, string $label = &apos;default&apos;)"><variable citdl="mixed" ilk="argument" line="156" name="callback" /><variable citdl="string" default="&apos;default&apos;" ilk="argument" line="156" name="label" /></scope><scope attributes="public static" ilk="function" line="161" lineend="164" name="removeObserver" signature="removeObserver($label = &apos;default&apos;)"><variable default="&apos;default&apos;" ilk="argument" line="161" name="label" /><variable attributes="__not_yet_defined__" line="163" name="_observers" /></scope><scope attributes="public static" doc="&#xA;Returns int  - unique identifier for an observer&#xA;" ilk="function" line="169" lineend="172" name="getUniqueId" returns="int" signature="int getUniqueId()" /><scope attributes="private" ilk="function" line="174" lineend="199" name="signal" signature="signal()"><variable citdl="self.$_observers[]" line="176" name="func" /><variable line="184" name="f" /></scope><scope attributes="public" doc="&#xA;Return specific error information that can be used for more detailed&#xA;error messages or translation.&#xA;This method may be overridden in child exception classes in order&#xA;to add functionality not present in PEAR_Exception and is a placeholder&#xA;to define API&#xA;The returned array must be an associative array of parameter =&gt; value like so:&#xA;&lt;pre&gt;&#xA;array(&apos;name&apos; =&gt; $name, &apos;context&apos; =&gt; array(...))&#xA;&lt;/pre&gt;&#xA;Returns array &#xA;" ilk="function" line="215" lineend="218" name="getErrorData" returns="array" signature="array getErrorData()" /><scope attributes="public" doc="&#xA;Returns the exception that caused this exception to be thrown&#xA;Access public&#xA;Returns exception|array  - The context of the exception&#xA;" ilk="function" line="225" lineend="228" name="getCause" returns="Exception" signature="exception getCause()" /><scope attributes="public" doc="Function must be public to call on caused exceptions&#xA;@param array" ilk="function" line="234" lineend="289" name="getCauseMessage" signature="getCauseMessage(&amp; $causes)"><variable ilk="argument" line="234" name="causes" /><variable citdl="array()" line="240" name="cause" /><variable citdl="this.getTraceSafe()" line="236" name="trace" /></scope><scope attributes="public" ilk="function" line="291" lineend="301" name="getTraceSafe" returns="this._trace" signature="getTraceSafe()"><variable citdl="debug_backtrace()" line="296" name="backtrace" /></scope><scope attributes="public" ilk="function" line="303" lineend="307" name="getErrorClass" returns="trace" signature="getErrorClass()"><variable citdl="this.getTraceSafe()" line="305" name="trace" /></scope><scope attributes="public" ilk="function" line="309" lineend="313" name="getErrorMethod" returns="trace" signature="getErrorMethod()"><variable citdl="this.getTraceSafe()" line="311" name="trace" /></scope><scope attributes="public" ilk="function" line="315" lineend="321" name="__toString" returns="this.toHtml()" signature="__toString()" /><scope attributes="public" ilk="function" line="323" lineend="375" name="toHtml" returns="html" signature="toHtml()"><variable citdl="v[]" line="350" name="arg" /><variable citdl="this.getTraceSafe()" line="325" name="trace" /><variable line="329" name="i" /><variable line="341" name="k" /><variable citdl="array()" line="348" name="args" /><variable citdl="string" line="328" name="html" /><variable citdl="htmlspecialchars()" line="358" name="str" /><variable citdl="trace[]" line="341" name="v" /><variable citdl="causes[]" line="329" name="cause" /><variable citdl="array()" line="326" name="causes" /></scope><scope attributes="public" ilk="function" line="377" lineend="388" name="toText" returns="causeMsg" signature="toText()"><variable line="382" name="i" /><variable citdl="causes[]" line="382" name="cause" /><variable citdl="string" line="381" name="causeMsg" /><variable citdl="array()" line="379" name="causes" /></scope></scope></scope>