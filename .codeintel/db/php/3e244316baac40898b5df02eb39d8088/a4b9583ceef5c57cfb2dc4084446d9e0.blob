<scope ilk="blob" lang="PHP" name="Tar.php" src="/usr/share/php/Archive/Tar.php"><import line="42" module="PEAR.php" /><variable citdl="int" ilk="constant" line="44" name="ARCHIVE_TAR_ATT_SEPARATOR" /><variable citdl="pack()" ilk="constant" line="45" name="ARCHIVE_TAR_END_BLOCK" /><scope classrefs="PEAR" doc="Creates a (compressed) Tar archive&#xA;&#xA;@package Archive_Tar&#xA;@author  Vincent Blavet &lt;vincent@phpconcept.net&gt;&#xA;@license http://www.opensource.org/licenses/bsd-license.php New BSD License&#xA;@version $Revision$" ilk="class" line="55" lineend="1992" name="Archive_Tar"><variable citdl="string" doc="@var string Name of the Tar" line="60" name="_tarname" /><variable citdl="boolean" doc="@var boolean if true, the Tar file will be gzipped" line="65" name="_compress" /><variable citdl="string" doc="@var string Type of compression : &apos;none&apos;, &apos;gz&apos; or &apos;bz2&apos;" line="70" name="_compress_type" /><variable citdl="string" doc="@var string Explode separator" line="75" name="_separator" /><variable citdl="file" doc="@var file descriptor" line="80" name="_file" /><variable citdl="string" doc="@var string Local Tar name of a remote Tar (http:// or ftp://)" line="85" name="_temp_tarname" /><variable citdl="string" doc="@var string regular expression for ignoring files or directories" line="90" name="_ignore_regexp" /><variable citdl="this.raiseError()" doc="@var object PEAR_Error object" line="95" name="error_object" /><scope attributes="__ctor__" doc="&#xA;Archive_Tar Class constructor. This flavour of the constructor only&#xA;declare a new Archive_Tar object, identifying it by the name of the&#xA;tar file.&#xA;If the compress argument is set the tar will be read or created as a&#xA;gzip or bz2 compressed TAR file.&#xA;&lt;string&gt; $p_tarname  - The name of the tar archive to create&#xA;&lt;string&gt; $p_compress  - can be null, &apos;gz&apos; or &apos;bz2&apos;. This&#xA;              parameter indicates if gzip or bz2 compression&#xA;              is required.  For compatibility reason the&#xA;              boolean value &apos;true&apos; means &apos;gz&apos;.&#xA;Access public&#xA;" ilk="function" line="113" lineend="175" name="Archive_Tar" returns="boolean" signature="Archive_Tar(string $p_tarname, string $p_compress = null)"><variable citdl="string" ilk="argument" line="113" name="p_tarname" /><variable citdl="string" default="null" ilk="argument" line="113" name="p_compress" /><variable citdl="fread()" line="122" name="data" /><variable citdl="string" line="160" name="extname" /></scope><scope doc="&#xA;{{{ destructor&#xA;" ilk="function" line="179" lineend="186" name="_Archive_Tar" signature="_Archive_Tar()" /><scope doc="&#xA;This method creates the archive file and add the files / directories&#xA;that are listed in $p_filelist.&#xA;If a file with the same name exist and is writable, it is replaced&#xA;by the new tar.&#xA;The method return false and a PEAR error text.&#xA;The $p_filelist parameter can be an array of string, each string&#xA;representing a filename or a directory name with their path if&#xA;needed. It can also be a single string with names separated by a&#xA;single blank.&#xA;For each directory added in the archive, the files and&#xA;sub-directories are also added.&#xA;See also createModify() method for more details.&#xA;&lt;array&gt; $p_filelist  - An array of filenames and directory names, or a&#xA;             single string with names separated by a single&#xA;             blank space.&#xA;Returns true  - on success, false on error.&#xA;See    createModify()&#xA;Access public&#xA;" ilk="function" line="212" lineend="215" name="create" returns="true" signature="true create(array $p_filelist)"><variable citdl="array" ilk="argument" line="212" name="p_filelist" /></scope><scope doc="&#xA;This method add the files / directories that are listed in $p_filelist in&#xA;the archive. If the archive does not exist it is created.&#xA;The method return false and a PEAR error text.&#xA;The files and directories listed are only added at the end of the archive,&#xA;even if a file with the same name is already archived.&#xA;See also createModify() method for more details.&#xA;&lt;array&gt; $p_filelist  - An array of filenames and directory names, or a&#xA;             single string with names separated by a single&#xA;             blank space.&#xA;Returns true  - on success, false on error.&#xA;See    createModify()&#xA;Access public&#xA;" ilk="function" line="235" lineend="238" name="add" returns="true" signature="true add(array $p_filelist)"><variable citdl="array" ilk="argument" line="235" name="p_filelist" /></scope><scope doc="&#xA;{{{ extract()&#xA;" ilk="function" line="242" lineend="245" name="extract" returns="this.extractModify()" signature="extract($p_path = &apos;&apos;, $p_preserve = false)"><variable default="&apos;&apos;" ilk="argument" line="242" name="p_path" /><variable default="false" ilk="argument" line="242" name="p_preserve" /></scope><scope doc="&#xA;{{{ listContent()&#xA;" ilk="function" line="249" lineend="262" name="listContent" returns="v_list_detail" signature="listContent()"><variable citdl="array()" line="251" name="v_list_detail" /></scope><scope doc="&#xA;This method creates the archive file and add the files / directories&#xA;that are listed in $p_filelist.&#xA;If the file already exists and is writable, it is replaced by the&#xA;new tar. It is a create and not an add. If the file exists and is&#xA;read-only or is a directory it is not replaced. The method return&#xA;false and a PEAR error text.&#xA;The $p_filelist parameter can be an array of string, each string&#xA;representing a filename or a directory name with their path if&#xA;needed. It can also be a single string with names separated by a&#xA;single blank.&#xA;The path indicated in $p_remove_dir will be removed from the&#xA;memorized path of each file / directory listed when this path&#xA;exists. By default nothing is removed (empty path &apos;&apos;)&#xA;The path indicated in $p_add_dir will be added at the beginning of&#xA;the memorized path of each file / directory listed. However it can&#xA;be set to empty &apos;&apos;. The adding of a path is done after the removing&#xA;of path.&#xA;The path add/remove ability enables the user to prepare an archive&#xA;for extraction in a different path than the origin files are.&#xA;See also addModify() method for file adding properties.&#xA;&lt;array&gt; $p_filelist  - An array of filenames and directory names,&#xA;                            or a single string with names separated by&#xA;                            a single blank space.&#xA;&lt;string&gt; $p_add_dir  - A string which contains a path to be added&#xA;                            to the memorized path of each element in&#xA;                            the list.&#xA;&lt;string&gt; $p_remove_dir  - A string which contains a path to be&#xA;                            removed from the memorized path of each&#xA;                            element in the list, when relevant.&#xA;Returns boolean  - true on success, false on error.&#xA;Access public&#xA;See addModify()&#xA;" ilk="function" line="302" lineend="330" name="createModify" returns="boolean" signature="boolean createModify(array $p_filelist, string $p_add_dir, string $p_remove_dir = &apos;&apos;)"><variable citdl="array" ilk="argument" line="302" name="p_filelist" /><variable citdl="string" ilk="argument" line="302" name="p_add_dir" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="302" name="p_remove_dir" /><variable citdl="boolean" line="304" name="v_result" /><variable citdl="p_filelist" line="310" name="v_list" /></scope><scope doc="&#xA;This method add the files / directories listed in $p_filelist at the&#xA;end of the existing archive. If the archive does not yet exists it&#xA;is created.&#xA;The $p_filelist parameter can be an array of string, each string&#xA;representing a filename or a directory name with their path if&#xA;needed. It can also be a single string with names separated by a&#xA;single blank.&#xA;The path indicated in $p_remove_dir will be removed from the&#xA;memorized path of each file / directory listed when this path&#xA;exists. By default nothing is removed (empty path &apos;&apos;)&#xA;The path indicated in $p_add_dir will be added at the beginning of&#xA;the memorized path of each file / directory listed. However it can&#xA;be set to empty &apos;&apos;. The adding of a path is done after the removing&#xA;of path.&#xA;The path add/remove ability enables the user to prepare an archive&#xA;for extraction in a different path than the origin files are.&#xA;If a file/dir is already in the archive it will only be added at the&#xA;end of the archive. There is no update of the existing archived&#xA;file/dir. However while extracting the archive, the last file will&#xA;replace the first one. This results in a none optimization of the&#xA;archive size.&#xA;If a file/dir does not exist the file/dir is ignored. However an&#xA;error text is send to PEAR error.&#xA;If a file/dir is not readable the file/dir is ignored. However an&#xA;error text is send to PEAR error.&#xA;&lt;array&gt; $p_filelist  - An array of filenames and directory&#xA;                            names, or a single string with names&#xA;                            separated by a single blank space.&#xA;&lt;string&gt; $p_add_dir  - A string which contains a path to be&#xA;                            added to the memorized path of each&#xA;                            element in the list.&#xA;&lt;string&gt; $p_remove_dir  - A string which contains a path to be&#xA;                            removed from the memorized path of&#xA;                            each element in the list, when&#xA;                            relevant.&#xA;Returns true  - on success, false on error.&#xA;Access public&#xA;" ilk="function" line="375" lineend="396" name="addModify" returns="true" signature="true addModify(array $p_filelist, string $p_add_dir, string $p_remove_dir = &apos;&apos;)"><variable citdl="array" ilk="argument" line="375" name="p_filelist" /><variable citdl="string" ilk="argument" line="375" name="p_add_dir" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="375" name="p_remove_dir" /><variable citdl="boolean" line="377" name="v_result" /><variable citdl="p_filelist" line="383" name="v_list" /></scope><scope doc="&#xA;This method add a single string as a file at the&#xA;end of the existing archive. If the archive does not yet exists it&#xA;is created.&#xA;&lt;string&gt; $p_filename  - A string which contains the full&#xA;                          filename path that will be associated&#xA;                          with the string.&#xA;&lt;string&gt; $p_string  - The content of the file added in&#xA;                          the archive.&#xA;&lt;int&gt; $p_datetime  - A custom date/time (unix timestamp)&#xA;                          for the file (optional).&#xA;Returns true  - on success, false on error.&#xA;Access public&#xA;" ilk="function" line="416" lineend="438" name="addString" returns="true" signature="true addString(string $p_filename, string $p_string, int $p_datetime = false)"><variable citdl="string" ilk="argument" line="416" name="p_filename" /><variable citdl="string" ilk="argument" line="416" name="p_string" /><variable citdl="int" default="false" ilk="argument" line="416" name="p_datetime" /><variable citdl="boolean" line="418" name="v_result" /></scope><scope doc="&#xA;This method extract all the content of the archive in the directory&#xA;indicated by $p_path. When relevant the memorized path of the&#xA;files/dir can be modified by removing the $p_remove_path path at the&#xA;beginning of the file/dir path.&#xA;While extracting a file, if the directory path does not exists it is&#xA;created.&#xA;While extracting a file, if the file already exists it is replaced&#xA;without looking for last modification date.&#xA;While extracting a file, if the file already exists and is write&#xA;protected, the extraction is aborted.&#xA;While extracting a file, if a directory with the same name already&#xA;exists, the extraction is aborted.&#xA;While extracting a directory, if a file with the same name already&#xA;exists, the extraction is aborted.&#xA;While extracting a file/directory if the destination directory exist&#xA;and is write protected, or does not exist but can not be created,&#xA;the extraction is aborted.&#xA;If after extraction an extracted file does not show the correct&#xA;stored file size, the extraction is aborted.&#xA;When the extraction is aborted, a PEAR error text is set and false&#xA;is returned. However the result can be a partial extraction that may&#xA;need to be manually cleaned.&#xA;&lt;string&gt; $p_path  - The path of the directory where the&#xA;                              files/dir need to by extracted.&#xA;&lt;string&gt; $p_remove_path  - Part of the memorized path that can be&#xA;                              removed if present at the beginning of&#xA;                              the file/dir path.&#xA;&lt;boolean&gt; $p_preserve  - Preserve user/group ownership of files&#xA;Returns boolean  - true on success, false on error.&#xA;Access public&#xA;See    extractList()&#xA;" ilk="function" line="477" lineend="489" name="extractModify" returns="boolean" signature="boolean extractModify(string $p_path, string $p_remove_path, boolean $p_preserve = false)"><variable citdl="string" ilk="argument" line="477" name="p_path" /><variable citdl="string" ilk="argument" line="477" name="p_remove_path" /><variable citdl="boolean" default="false" ilk="argument" line="477" name="p_preserve" /><variable citdl="boolean" line="479" name="v_result" /><variable citdl="array()" line="480" name="v_list_detail" /></scope><scope doc="&#xA;This method extract from the archive one file identified by $p_filename.&#xA;The return value is a string with the file content, or NULL on error.&#xA;&lt;string&gt; $p_filename  - The path of the file to extract in a string.&#xA;Returns a  - string with the file content or NULL.&#xA;Access public&#xA;" ilk="function" line="502" lineend="512" name="extractInString" returns="a" signature="a extractInString(string $p_filename)"><variable citdl="string" ilk="argument" line="502" name="p_filename" /><variable citdl="this._extractInString()" line="505" name="v_result" /></scope><scope doc="&#xA;This method extract from the archive only the files indicated in the&#xA;$p_filelist. These files are extracted in the current directory or&#xA;in the directory indicated by the optional $p_path parameter.&#xA;If indicated the $p_remove_path can be used in the same way as it is&#xA;used in extractModify() method.&#xA;&lt;array&gt; $p_filelist  - An array of filenames and directory names,&#xA;                              or a single string with names separated&#xA;                              by a single blank space.&#xA;&lt;string&gt; $p_path  - The path of the directory where the&#xA;                              files/dir need to by extracted.&#xA;&lt;string&gt; $p_remove_path  - Part of the memorized path that can be&#xA;                              removed if present at the beginning of&#xA;                              the file/dir path.&#xA;&lt;boolean&gt; $p_preserve  - Preserve user/group ownership of files&#xA;Returns true  - on success, false on error.&#xA;Access public&#xA;See    extractModify()&#xA;" ilk="function" line="537" lineend="558" name="extractList" returns="true" signature="true extractList(array $p_filelist, string $p_path = &apos;&apos;, string $p_remove_path = &apos;&apos;, boolean $p_preserve = false)"><variable citdl="array" ilk="argument" line="537" name="p_filelist" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="537" name="p_path" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="537" name="p_remove_path" /><variable citdl="boolean" default="false" ilk="argument" line="537" name="p_preserve" /><variable citdl="boolean" line="539" name="v_result" /><variable citdl="p_filelist" line="542" name="v_list" /><variable citdl="array()" line="540" name="v_list_detail" /></scope><scope doc="&#xA;This method set specific attributes of the archive. It uses a variable&#xA;list of parameters, in the format attribute code + attribute values :&#xA;$arch-&gt;setAttribute(ARCHIVE_TAR_ATT_SEPARATOR, &apos;,&apos;);&#xA;&lt;mixed&gt; $argv  - variable list of attributes and values&#xA;Returns true  - on success, false on error.&#xA;Access public&#xA;" ilk="function" line="572" lineend="614" name="setAttribute" returns="true" signature="true setAttribute(mixed $argv)"><variable citdl="mixed" ilk="argument" line="572" name="argv" /><variable citdl="int" line="585" name="i" /><variable citdl="boolean" line="574" name="v_result" /><variable attributes="__not_yet_defined__" line="586" name="v_size" /><variable citdl="func_get_args()" line="582" name="v_att_list" /></scope><scope doc="&#xA;This method sets the regular expression for ignoring files and directories&#xA;at import, for example:&#xA;$arch-&gt;setIgnoreRegexp(&quot;#CVS|\.svn#&quot;);&#xA;&lt;string&gt; $regexp  - regular expression defining which files or directories to ignore&#xA;Access public&#xA;" ilk="function" line="627" lineend="630" name="setIgnoreRegexp" signature="setIgnoreRegexp(string $regexp)"><variable citdl="string" ilk="argument" line="627" name="regexp" /></scope><scope doc="&#xA;This method sets the regular expression for ignoring all files and directories&#xA;matching the filenames in the array list at import, for example:&#xA;$arch-&gt;setIgnoreList(array(&apos;CVS&apos;, &apos;.svn&apos;, &apos;bin/tool&apos;));&#xA;&lt;array&gt; $list  - a list of file or directory names to ignore&#xA;Access public&#xA;" ilk="function" line="643" lineend="648" name="setIgnoreList" signature="setIgnoreList(array $list)"><variable citdl="array" ilk="argument" line="643" name="list" /><variable citdl="str_replace()" line="645" name="regexp" /></scope><scope doc="&#xA;{{{ _error()&#xA;" ilk="function" line="652" lineend="655" name="_error" signature="_error($p_message)"><variable ilk="argument" line="652" name="p_message" /></scope><scope doc="&#xA;{{{ _warning()&#xA;" ilk="function" line="659" lineend="662" name="_warning" signature="_warning($p_message)"><variable ilk="argument" line="659" name="p_message" /></scope><scope doc="&#xA;{{{ _isArchive()&#xA;" ilk="function" line="666" lineend="673" name="_isArchive" signature="_isArchive($p_filename = null)"><variable default="null" ilk="argument" line="666" name="p_filename" /></scope><scope doc="&#xA;{{{ _openWrite()&#xA;" ilk="function" line="677" lineend="698" name="_openWrite" returns="boolean" signature="_openWrite()" /><scope doc="&#xA;{{{ _openRead()&#xA;" ilk="function" line="702" lineend="752" name="_openRead" returns="boolean" signature="_openRead()"><variable attributes="__not_yet_defined__" line="721" name="v_file_from" /><variable line="721" name="v_data" /><variable attributes="__not_yet_defined__" line="721" name="v_file_to" /><variable citdl="this._temp_tarname" line="728" name="v_filename" /></scope><scope doc="&#xA;{{{ _openReadWrite()&#xA;" ilk="function" line="756" lineend="779" name="_openReadWrite" returns="boolean" signature="_openReadWrite()" /><scope doc="&#xA;{{{ _close()&#xA;" ilk="function" line="783" lineend="808" name="_close" returns="boolean" signature="_close()" /><scope doc="&#xA;{{{ _cleanFile()&#xA;" ilk="function" line="812" lineend="828" name="_cleanFile" returns="boolean" signature="_cleanFile()" /><scope doc="&#xA;{{{ _writeBlock()&#xA;" ilk="function" line="832" lineend="859" name="_writeBlock" returns="boolean" signature="_writeBlock($p_binary_data, $p_len = null)"><variable ilk="argument" line="832" name="p_binary_data" /><variable default="null" ilk="argument" line="832" name="p_len" /></scope><scope doc="&#xA;{{{ _readBlock()&#xA;" ilk="function" line="863" lineend="878" name="_readBlock" returns="v_block" signature="_readBlock()"><variable line="865" name="v_block" /></scope><scope doc="&#xA;{{{ _jumpBlock()&#xA;" ilk="function" line="882" lineend="903" name="_jumpBlock" returns="boolean" signature="_jumpBlock($p_len = null)"><variable default="null" ilk="argument" line="882" name="p_len" /><variable line="893" name="i" /></scope><scope doc="&#xA;{{{ _writeFooter()&#xA;" ilk="function" line="907" lineend="915" name="_writeFooter" returns="boolean" signature="_writeFooter()"><variable citdl="pack()" line="911" name="v_binary_data" /></scope><scope doc="&#xA;{{{ _addList()&#xA;" ilk="function" line="919" lineend="988" name="_addList" returns="boolean" signature="_addList($p_list, $p_add_dir, $p_remove_dir)"><variable ilk="argument" line="919" name="p_list" /><variable ilk="argument" line="919" name="p_add_dir" /><variable ilk="argument" line="919" name="p_remove_dir" /><variable attributes="__not_yet_defined__" line="968" name="p_hdir" /><variable citdl="array()" line="922" name="v_header" /><variable line="968" name="p_hitem" /><variable citdl="boolean" line="921" name="v_result" /><variable attributes="__not_yet_defined__" line="973" name="p_temp_list" /><variable citdl="p_list[]" line="936" name="v_filename" /></scope><scope doc="&#xA;{{{ _addFile()&#xA;" ilk="function" line="992" lineend="1051" name="_addFile" returns="boolean" signature="_addFile($p_filename, &amp; $p_header, $p_add_dir, $p_remove_dir)"><variable ilk="argument" line="992" name="p_filename" /><variable ilk="argument" line="992" name="p_header" /><variable ilk="argument" line="992" name="p_add_dir" /><variable ilk="argument" line="992" name="p_remove_dir" /><variable citdl="pack()" line="1038" name="v_binary_data" /><variable attributes="__not_yet_defined__" line="1037" name="v_file" /><variable citdl="p_filename" line="1006" name="v_stored_filename" /><variable line="1037" name="v_buffer" /></scope><scope doc="&#xA;{{{ _addString()&#xA;" ilk="function" line="1055" lineend="1086" name="_addString" returns="boolean" signature="_addString($p_filename, $p_string, $p_datetime = false)"><variable ilk="argument" line="1055" name="p_filename" /><variable ilk="argument" line="1055" name="p_string" /><variable default="false" ilk="argument" line="1055" name="p_datetime" /><variable citdl="int" line="1079" name="i" /><variable citdl="pack()" line="1081" name="v_binary_data" /><variable line="1080" name="v_buffer" /></scope><scope doc="&#xA;{{{ _writeHeader()&#xA;" ilk="function" line="1090" lineend="1179" name="_writeHeader" returns="boolean" signature="_writeHeader($p_filename, $p_stored_filename)"><variable ilk="argument" line="1090" name="p_filename" /><variable ilk="argument" line="1090" name="p_stored_filename" /><variable citdl="pack()" line="1172" name="v_binary_data" /><variable citdl="posix_getgrgid()" line="1130" name="groupinfo" /><variable citdl="lstat()" line="1101" name="v_info" /><variable citdl="sprintf()" line="1106" name="v_mtime" /><variable citdl="userinfo" line="1132" name="v_uname" /><variable citdl="string" line="1125" name="v_version" /><variable citdl="sprintf()" line="1113" name="v_size" /><variable citdl="string" line="1143" name="v_devminor" /><variable citdl="int" line="1156" name="v_checksum" /><variable citdl="sprintf()" line="1103" name="v_gid" /><variable citdl="string" line="1145" name="v_prefix" /><variable citdl="this._pathReduction()" line="1094" name="v_reduce_filename" /><variable citdl="posix_getpwuid()" line="1129" name="userinfo" /><variable citdl="string" line="1111" name="v_typeflag" /><variable citdl="string" line="1123" name="v_magic" /><variable citdl="string" line="1141" name="v_devmajor" /><variable citdl="sprintf()" line="1104" name="v_perms" /><variable citdl="string" line="1108" name="v_linkname" /><variable citdl="pack()" line="1149" name="v_binary_data_first" /><variable line="1158" name="i" /><variable line="1164" name="j" /><variable citdl="sprintf()" line="1102" name="v_uid" /><variable citdl="groupinfo" line="1133" name="v_gname" /><variable citdl="pack()" line="1153" name="v_binary_data_last" /></scope><scope doc="&#xA;{{{ _writeHeaderBlock()&#xA;" ilk="function" line="1183" lineend="1263" name="_writeHeaderBlock" returns="boolean" signature="_writeHeaderBlock($p_filename, $p_size, $p_mtime = 0, $p_perms = 0, $p_type = &apos;&apos;, $p_uid = 0, $p_gid = 0)"><variable ilk="argument" line="1183" name="p_filename" /><variable ilk="argument" line="1183" name="p_size" /><variable default="0" ilk="argument" line="1183" name="p_mtime" /><variable default="0" ilk="argument" line="1183" name="p_perms" /><variable default="&apos;&apos;" ilk="argument" line="1183" name="p_type" /><variable default="0" ilk="argument" line="1183" name="p_uid" /><variable default="0" ilk="argument" line="1183" name="p_gid" /><variable citdl="pack()" line="1256" name="v_binary_data" /><variable citdl="string" line="1207" name="v_magic" /><variable line="1248" name="j" /><variable citdl="posix_getgrgid()" line="1214" name="groupinfo" /><variable citdl="pack()" line="1237" name="v_binary_data_last" /><variable citdl="string" line="1209" name="v_version" /><variable citdl="pack()" line="1233" name="v_binary_data_first" /><variable line="1242" name="i" /><variable citdl="sprintf()" line="1200" name="v_gid" /><variable citdl="string" line="1225" name="v_devmajor" /><variable citdl="sprintf()" line="1199" name="v_uid" /><variable citdl="int" line="1240" name="v_checksum" /><variable citdl="userinfo" line="1216" name="v_uname" /><variable citdl="string" line="1229" name="v_prefix" /><variable citdl="sprintf()" line="1201" name="v_perms" /><variable citdl="groupinfo" line="1217" name="v_gname" /><variable citdl="string" line="1205" name="v_linkname" /><variable citdl="string" line="1227" name="v_devminor" /><variable citdl="sprintf()" line="1194" name="v_size" /><variable citdl="sprintf()" line="1203" name="v_mtime" /><variable citdl="posix_getpwuid()" line="1213" name="userinfo" /></scope><scope doc="&#xA;{{{ _writeLongHeader()&#xA;" ilk="function" line="1267" lineend="1327" name="_writeLongHeader" returns="boolean" signature="_writeLongHeader($p_filename)"><variable ilk="argument" line="1267" name="p_filename" /><variable citdl="pack()" line="1313" name="v_binary_data" /><variable citdl="string" line="1271" name="v_typeflag" /><variable line="1305" name="j" /><variable citdl="pack()" line="1294" name="v_binary_data_last" /><variable citdl="int" line="1297" name="v_checksum" /><variable citdl="string" line="1275" name="v_magic" /><variable citdl="int" line="1299" name="i" /><variable citdl="string" line="1283" name="v_devmajor" /><variable citdl="string" line="1279" name="v_uname" /><variable citdl="string" line="1287" name="v_prefix" /><variable citdl="pack()" line="1290" name="v_binary_data_first" /><variable citdl="string" line="1281" name="v_gname" /><variable line="1321" name="v_buffer" /><variable citdl="string" line="1273" name="v_linkname" /><variable citdl="sprintf()" line="1269" name="v_size" /><variable citdl="string" line="1277" name="v_version" /><variable citdl="string" line="1285" name="v_devminor" /></scope><scope doc="&#xA;{{{ _readHeader()&#xA;" ilk="function" line="1331" lineend="1416" name="_readHeader" returns="boolean" signature="_readHeader($v_binary_data, &amp; $v_header)"><variable ilk="argument" line="1331" name="v_binary_data" /><variable ilk="argument" line="1331" name="v_header" /><variable line="1350" name="i" /><variable citdl="string" line="1362" name="fmt" /><variable citdl="unpack()" line="1368" name="v_data" /><variable citdl="int" line="1348" name="v_checksum" /></scope><scope doc="&#xA;Detect and report a malicious file name&#xA;&lt;string&gt; $file  - &#xA;Returns bool &#xA;Access private&#xA;" ilk="function" line="1428" lineend="1437" name="_maliciousFilename" returns="bool" signature="bool _maliciousFilename(string $file)"><variable citdl="string" ilk="argument" line="1428" name="file" /></scope><scope doc="&#xA;{{{ _readLongHeader()&#xA;" ilk="function" line="1441" lineend="1469" name="_readLongHeader" returns="boolean" signature="_readLongHeader(&amp; $v_header)"><variable ilk="argument" line="1441" name="v_header" /><variable line="1445" name="i" /><variable citdl="this._readBlock()" line="1446" name="v_content" /><variable citdl="string" line="1443" name="v_filename" /><variable citdl="this._readBlock()" line="1455" name="v_binary_data" /><variable citdl="floor()" line="1444" name="n" /></scope><scope doc="&#xA;This method extract from the archive one file identified by $p_filename.&#xA;The return value is a string with the file content, or null on error.&#xA;&lt;string&gt; $p_filename  - The path of the file to extract in a string.&#xA;Returns a  - string with the file content or null.&#xA;Access private&#xA;" ilk="function" line="1482" lineend="1523" name="_extractInString" returns="a" signature="a _extractInString(string $p_filename)"><variable citdl="string" ilk="argument" line="1482" name="p_filename" /><variable line="1486" name="v_binary_data" /><variable line="1507" name="i" /><variable citdl="string" line="1484" name="v_result_str" /><variable citdl="this._readBlock()" line="1511" name="v_content" /><variable citdl="floor()" line="1506" name="n" /></scope><scope doc="&#xA;{{{ _extractList()&#xA;" ilk="function" line="1527" lineend="1762" name="_extractList" returns="boolean" signature="_extractList($p_path, &amp; $p_list_detail, $p_mode, $p_file_list, $p_remove_path, $p_preserve = false)"><variable ilk="argument" line="1527" name="p_path" /><variable ilk="argument" line="1527" name="p_list_detail" /><variable ilk="argument" line="1527" name="p_mode" /><variable ilk="argument" line="1527" name="p_file_list" /><variable ilk="argument" line="1527" name="p_remove_path" /><variable default="false" ilk="argument" line="1527" name="p_preserve" /><variable line="1567" name="v_binary_data" /><variable line="1589" name="i" /><variable citdl="filesize()" line="1722" name="filesize" /><variable attributes="__not_yet_defined__" line="1602" name="v_header" /><variable citdl="int" line="1531" name="v_nb" /><variable citdl="floor()" line="1688" name="n" /><variable citdl="boolean" line="1530" name="v_result" /><variable citdl="boolean" line="1569" name="v_extract_file" /><variable citdl="boolean" line="1532" name="v_extract_all" /><variable citdl="strlen()" line="1545" name="p_remove_path_size" /><variable citdl="int" line="1570" name="v_extraction_stopped" /><variable citdl="this._readBlock()" line="1690" name="v_content" /><variable citdl="boolean" line="1533" name="v_listing" /><variable citdl="string" line="1748" name="v_file_dir" /><variable citdl="fileperms()" line="1709" name="mode" /></scope><scope doc="&#xA;{{{ _openAppend()&#xA;" ilk="function" line="1766" lineend="1869" name="_openAppend" returns="this._openWrite()" signature="_openAppend()"><variable citdl="pack()" line="1814" name="v_binary_data" /><variable citdl="int" line="1799" name="end_blocks" /><variable line="1809" name="i" /><variable line="1802" name="v_buffer" /><variable line="1781" name="v_temp_tar" /><variable citdl="filesize()" line="1854" name="v_size" /></scope><scope doc="&#xA;{{{ _append()&#xA;" ilk="function" line="1873" lineend="1884" name="_append" returns="boolean" signature="_append($p_filelist, $p_add_dir = &apos;&apos;, $p_remove_dir = &apos;&apos;)"><variable ilk="argument" line="1873" name="p_filelist" /><variable default="&apos;&apos;" ilk="argument" line="1873" name="p_add_dir" /><variable default="&apos;&apos;" ilk="argument" line="1873" name="p_remove_dir" /></scope><scope doc="&#xA;Check if a directory exists and create it (including parent&#xA;dirs) if not.&#xA;&lt;string&gt; $p_dir  - directory to check&#xA;Returns bool  - true if the directory exists or was created&#xA;" ilk="function" line="1897" lineend="1916" name="_dirCheck" returns="bool" signature="bool _dirCheck(string $p_dir)"><variable citdl="string" ilk="argument" line="1897" name="p_dir" /><variable citdl="dirname()" line="1903" name="p_parent_dir" /></scope><scope doc="&#xA;Compress path by changing for example &quot;/dir/foo/../bar&quot; to &quot;/dir/bar&quot;,&#xA;rand emove double slashes.&#xA;&lt;string&gt; $p_dir  - path to reduce&#xA;Returns string  - reduced path&#xA;Access private&#xA;" ilk="function" line="1933" lineend="1970" name="_pathReduction" returns="string" signature="string _pathReduction(string $p_dir)"><variable citdl="string" ilk="argument" line="1933" name="p_dir" /><variable citdl="int" line="1943" name="i" /><variable citdl="string" line="1935" name="v_result" /><variable citdl="explode()" line="1940" name="v_list" /></scope><scope doc="&#xA;{{{ _translateWinPath()&#xA;" ilk="function" line="1975" lineend="1989" name="_translateWinPath" returns="p_path" signature="_translateWinPath($p_path, $p_remove_disk_letter = true)"><variable ilk="argument" line="1975" name="p_path" /><variable default="true" ilk="argument" line="1975" name="p_remove_disk_letter" /></scope></scope></scope>