<scope ilk="blob" lang="PHP" name="v1.php" src="/usr/share/php/PEAR/PackageFile/Generator/v1.php"><import line="19" module="PEAR/Validate.php" /><import line="20" module="System.php" /><import line="21" module="PEAR/PackageFile/v2.php" /><import line="60" module="Archive/Tar.php" /><scope doc="This class converts a PEAR_PackageFile_v1 object into any output format.&#xA;&#xA;Supported output formats include array, XML string, and a PEAR_PackageFile_v2&#xA;object, for converting package.xml 1.0 into package.xml 2.0 with no sweat.&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.4.0a1" ilk="class" line="36" lineend="1283" name="PEAR_PackageFile_Generator_v1"><variable citdl="PEAR_PackageFile_v1" doc="@var PEAR_PackageFile_v1" line="41" name="_packagefile" /><scope attributes="__ctor__" ilk="function" line="42" lineend="45" name="PEAR_PackageFile_Generator_v1" signature="PEAR_PackageFile_Generator_v1(&amp; $packagefile)"><variable ilk="argument" line="42" name="packagefile" /></scope><scope ilk="function" line="47" lineend="50" name="getPackagerVersion" returns="string" signature="getPackagerVersion()" /><scope doc="@param PEAR_Packager&#xA;@param bool if true, a .tgz is written, otherwise a .tar is written&#xA;@param string|null directory in which to save the .tgz&#xA;@return string|PEAR_Error location of package or error object" ilk="function" line="58" lineend="127" name="toTgz" returns="string" signature="string toTgz(&amp; $packager, $compress = true, $where = null)"><variable ilk="argument" line="58" name="packager" /><variable default="true" ilk="argument" line="58" name="compress" /><variable default="null" ilk="argument" line="58" name="where" /><variable citdl="this.toPackageFile()" line="110" name="packagexml" /><variable citdl="pkgdir" line="98" name="file" /><variable citdl="this._packagefile.getFilelist()[]" line="97" name="atts" /><variable citdl="dirname()" line="87" name="pkgdir" /><variable citdl="Archive_Tar" line="112" name="tar" /><variable citdl="int" line="95" name="i" /><variable citdl="this._packagefile.getArray()" line="77" name="pkginfo" /><variable citdl="basename()" line="88" name="pkgfile" /><variable citdl="array()" line="94" name="filelist" /><variable citdl="compress" line="78" name="ext" /><variable line="97" name="fname" /><variable citdl="getcwd()" line="80" name="dest_package" /><variable citdl="tar.createModify()" line="115" name="ok" /><variable citdl="pkginfo" line="79" name="pkgver" /></scope><scope doc="&#xA;&lt;string|null&gt; directory  - to place the package.xml in, or null for a temporary dir&#xA;&lt;int&gt; one  - of the PEAR_VALIDATE_* constants&#xA;&lt;string&gt; name  - of the generated file&#xA;&lt;bool&gt; if  - true, then no analysis will be performed on role=&quot;php&quot; files&#xA;Returns string|pear_error  - path to the created file on success&#xA;" ilk="function" line="136" lineend="160" name="toPackageFile" returns="string" signature="string toPackageFile($where = null, $state = PEAR_VALIDATE_NORMAL, $name = &apos;package.xml&apos;, $nofilechecking = false)"><variable default="null" ilk="argument" line="136" name="where" /><variable default="PEAR_VALIDATE_NORMAL" ilk="argument" line="136" name="state" /><variable default="&apos;package.xml&apos;" ilk="argument" line="136" name="name" /><variable default="false" ilk="argument" line="136" name="nofilechecking" /><variable line="152" name="np" /><variable citdl="where" line="151" name="newpkgfile" /></scope><scope doc="&#xA;fix both XML encoding to be UTF8, and replace standard XML entities &lt; &gt; &quot; &amp; &apos;&#xA;&lt;string&gt; $string  - &#xA;Returns string &#xA;Access private&#xA;" ilk="function" line="169" lineend="180" name="_fixXmlEncoding" returns="string" signature="string _fixXmlEncoding(string $string)"><variable citdl="string" ilk="argument" line="169" name="string" /></scope><scope doc="&#xA;Return an XML document based on the package info (as returned&#xA;by the PEAR_Common::infoFrom* methods).&#xA;Returns string  - XML data&#xA;" ilk="function" line="188" lineend="232" name="toXml" returns="string" signature="string toXml($state = PEAR_VALIDATE_NORMAL, $nofilevalidation = false)"><variable default="PEAR_VALIDATE_NORMAL" ilk="argument" line="188" name="state" /><variable default="false" ilk="argument" line="188" name="nofilevalidation" /><variable citdl="pkginfo[]" line="225" name="oldrelease" /><variable line="214" name="idx" /><variable citdl="maint_map[]" line="214" name="elm" /><variable citdl="this._packagefile.getArray()" line="194" name="pkginfo" /><variable citdl="pkginfo[]" line="212" name="maint" /><variable citdl="string" line="201" name="ret" /></scope><variable attributes="static" citdl="array()" line="200" name="maint_map" /><scope doc="&#xA;Generate part of an XML description with release information.&#xA;&lt;array&gt; $pkginfo  - array with release information&#xA;&lt;bool&gt; $changelog  - whether the result will be in a changelog element&#xA;Returns string  - XML data&#xA;Access private&#xA;" ilk="function" line="247" lineend="356" name="_makeReleaseXml" returns="string" signature="string _makeReleaseXml(array $pkginfo, bool $changelog = false, $state = PEAR_VALIDATE_NORMAL)"><variable citdl="array" ilk="argument" line="247" name="pkginfo" /><variable citdl="bool" default="false" ilk="argument" line="247" name="changelog" /><variable default="PEAR_VALIDATE_NORMAL" ilk="argument" line="247" name="state" /><variable citdl="pkginfo[]" line="291" name="c" /><variable citdl="changelog" line="250" name="indent" /><variable line="317" name="file" /><variable citdl="pkginfo[]" line="273" name="dep" /><variable line="343" name="k" /><variable citdl="pkginfo[]" line="303" name="what" /><variable citdl="string" line="251" name="ret" /><variable citdl="pkginfo[]" line="317" name="fa" /><variable citdl="fa[]" line="341" name="r" /><variable line="303" name="key" /><variable citdl="r[]" line="343" name="v" /></scope><scope doc="@param array&#xA;@access protected" ilk="function" line="362" lineend="369" name="recursiveXmlFilelist" returns="this._formatDir()" signature="recursiveXmlFilelist($list)"><variable ilk="argument" line="362" name="list" /><variable citdl="list[]" line="365" name="attributes" /><variable line="365" name="file" /></scope><variable citdl="array()" line="364" name="_dirs" /><scope doc="@param array&#xA;@param array&#xA;@param string|null&#xA;@param array|null&#xA;@access private" ilk="function" line="378" lineend="389" name="_addDir" signature="_addDir(&amp; $dirs, $dir, $file = null, $attributes = null)"><variable ilk="argument" line="378" name="dirs" /><variable ilk="argument" line="378" name="dir" /><variable default="null" ilk="argument" line="378" name="file" /><variable default="null" ilk="argument" line="378" name="attributes" /><variable citdl="array_shift()" line="384" name="curdir" /></scope><scope doc="@param array&#xA;@param string&#xA;@param string&#xA;@access private" ilk="function" line="397" lineend="419" name="_formatDir" returns="string" signature="_formatDir($dirs, $indent = &apos;&apos;, $curdir = &apos;&apos;)"><variable ilk="argument" line="397" name="dirs" /><variable default="&apos;&apos;" ilk="argument" line="397" name="indent" /><variable default="&apos;&apos;" ilk="argument" line="397" name="curdir" /><variable citdl="string" line="406" name="usedir" /><variable citdl="dirs[]" line="414" name="attribs" /><variable citdl="string" line="399" name="ret" /><variable citdl="dirs[]" line="405" name="contents" /><variable line="414" name="file" /><variable line="405" name="dir" /></scope><scope doc="@param string&#xA;@param array&#xA;@param string&#xA;@access private" ilk="function" line="427" lineend="459" name="_formatFile" returns="ret" signature="_formatFile($file, $attributes, $indent)"><variable ilk="argument" line="427" name="file" /><variable ilk="argument" line="427" name="attributes" /><variable ilk="argument" line="427" name="indent" /><variable line="451" name="k" /><variable citdl="attributes[]" line="449" name="r" /><variable citdl="string" line="429" name="ret" /><variable citdl="r[]" line="451" name="v" /></scope><scope doc="&#xA;Unindent given string (?)&#xA;&lt;string&gt; $str  - The string that has to be unindented.&#xA;Returns string &#xA;Access private&#xA;" ilk="function" line="470" lineend="485" name="_unIndent" returns="string" signature="string _unIndent(string $str)"><variable citdl="string" ilk="argument" line="470" name="str" /><variable citdl="substr()" line="476" name="indent" /><variable citdl="explode()[]" line="479" name="line" /><variable citdl="strspn()" line="475" name="indent_len" /><variable citdl="string" line="477" name="data" /></scope><scope doc="&#xA;Returns array &#xA;" ilk="function" line="490" lineend="495" name="dependenciesToV2" returns="array" signature="array dependenciesToV2()"><variable citdl="array()" line="492" name="arr" /></scope><scope doc="&#xA;Convert a package.xml version 1.0 into version 2.0&#xA;Note that this does a basic conversion, to allow more advanced&#xA;features like bundles and multiple releases&#xA;&lt;string&gt; the  - classname to instantiate and return. This must be&#xA;              PEAR_PackageFile_v2 or a descendant&#xA;&lt;boolean&gt; if  - true, only valid, deterministic package.xml 1.0 as defined by the&#xA;               strictest parameters will be converted&#xA;Returns pear_packagefile_v2|pear_error &#xA;" ilk="function" line="508" lineend="704" name="toV2" returns="PEAR_PackageFile_v2" signature="pear_packagefile_v2 &amp;toV2($class = &apos;PEAR_PackageFile_v2&apos;, $strict = false)"><variable default="&apos;PEAR_PackageFile_v2&apos;" ilk="argument" line="508" name="class" /><variable default="false" ilk="argument" line="508" name="strict" /><variable citdl="PEAR.raiseError()" line="514" name="a" /><variable citdl="arr[]" line="636" name="opt" /><variable citdl="array()" line="532" name="arr" /><variable citdl="maintainers[]" line="536" name="maintainer" /><variable citdl="array()" line="623" name="temp" /><variable line="636" name="i" /><variable citdl="licensemap" line="675" name="uri" /><variable line="696" name="ret" /><variable citdl="this._packagefile.getMaintainers()" line="535" name="maintainers" /><variable citdl="array()" line="652" name="rel" /><variable citdl="cl[]" line="627" name="release" /><variable citdl="array()" line="545" name="new" /><variable citdl="array()" line="609" name="licensemap" /></scope><scope doc="@param array&#xA;@param bool&#xA;@access private" ilk="function" line="711" lineend="794" name="_convertDependencies2_0" signature="_convertDependencies2_0(&amp; $release, $internal = false)"><variable ilk="argument" line="711" name="release" /><variable default="false" ilk="argument" line="711" name="internal" /><variable citdl="array()[]" line="725" name="arr" /><variable citdl="array()" line="714" name="peardep" /><variable attributes="__not_yet_defined__" line="745" name="key" /><variable citdl="this._packagefile.getDeps()[]" line="718" name="dep" /><variable citdl="optional" line="715" name="required" /><variable attributes="__not_yet_defined__" line="745" name="blah" /><variable citdl="release" line="788" name="bewm" /><variable citdl="array()" line="758" name="pkg" /><variable citdl="array()" line="726" name="deps" /><variable citdl="array()" line="740" name="php" /><variable citdl="array()" line="787" name="order" /></scope><scope doc="@param array&#xA;@access private" ilk="function" line="800" lineend="842" name="_convertFilelist2_0" returns="ret" signature="_convertFilelist2_0(&amp; $package)"><variable ilk="argument" line="800" name="package" /><variable citdl="this._packagefile.getFilelist()[]" line="811" name="file" /><variable citdl="file" line="817" name="repl" /><variable line="811" name="name" /><variable citdl="array()" line="807" name="ret" /><variable citdl="repl[]" line="832" name="replace" /></scope><variable citdl="boolean" line="810" name="_isExtension" /><scope doc="Post-process special files with install-as/platform attributes and&#xA;make the release tag.&#xA;&#xA;This complex method follows this work-flow to create the release tags:&#xA;&#xA;&lt;pre&gt;&#xA;- if any install-as/platform exist, create a generic release and fill it with&#xA;  o &lt;install as=..&gt; tags for &lt;file name=... install-as=...&gt;&#xA;  o &lt;install as=..&gt; tags for &lt;file name=... platform=!... install-as=..&gt;&#xA;  o &lt;ignore&gt; tags for &lt;file name=... platform=...&gt;&#xA;  o &lt;ignore&gt; tags for &lt;file name=... platform=... install-as=..&gt;&#xA;- create a release for each platform encountered and fill with&#xA;  o &lt;install as..&gt; tags for &lt;file name=... install-as=...&gt;&#xA;  o &lt;install as..&gt; tags for &lt;file name=... platform=this platform install-as=..&gt;&#xA;  o &lt;install as..&gt; tags for &lt;file name=... platform=!other platform install-as=..&gt;&#xA;  o &lt;ignore&gt; tags for &lt;file name=... platform=!this platform&gt;&#xA;  o &lt;ignore&gt; tags for &lt;file name=... platform=other platform&gt;&#xA;  o &lt;ignore&gt; tags for &lt;file name=... platform=other platform install-as=..&gt;&#xA;  o &lt;ignore&gt; tags for &lt;file name=... platform=!this platform install-as=..&gt;&#xA;&lt;/pre&gt;&#xA;&#xA;It does this by accessing the $package parameter, which contains an array with&#xA;indices:&#xA;&#xA; - platform: mapping of file =&gt; OS the file should be installed on&#xA; - install-as: mapping of file =&gt; installed name&#xA; - osmap: mapping of OS =&gt; list of files that should be installed&#xA;   on that OS&#xA; - notosmap: mapping of OS =&gt; list of files that should not be&#xA;   installed on that OS&#xA;&#xA;@param array&#xA;@param array&#xA;@access private" ilk="function" line="880" lineend="1092" name="_convertRelease2_0" signature="_convertRelease2_0(&amp; $release, $package)"><variable ilk="argument" line="880" name="release" /><variable ilk="argument" line="880" name="package" /><variable citdl="oses[]" line="931" name="releaseNum" /><variable line="1061" name="i" /><variable citdl="array()" line="884" name="generic" /><variable citdl="notplatform" line="915" name="oses" /><variable citdl="package" line="1036" name="installas" /><variable citdl="package[]" line="1078" name="value" /><variable citdl="release[]" line="1061" name="rel" /><variable citdl="package[]" line="905" name="platform" /><variable citdl="package[]" line="886" name="as" /><variable citdl="array()" line="885" name="genericIgnore" /><variable citdl="generic[]" line="886" name="file" /><variable citdl="package[]" line="916" name="os" /></scope><scope doc="@param array&#xA;@return array&#xA;@access private" ilk="function" line="1099" lineend="1148" name="_processDep" returns="array" signature="array _processDep($dep)"><variable ilk="argument" line="1099" name="dep" /><variable citdl="array()" line="1107" name="php" /></scope><scope doc="@param array&#xA;@return array" ilk="function" line="1154" lineend="1208" name="_processPhpDeps" returns="array" signature="array _processPhpDeps($deps)"><variable ilk="argument" line="1154" name="deps" /><variable citdl="array()" line="1156" name="test" /><variable citdl="test[]" line="1157" name="dep" /><variable citdl="array()" line="1161" name="max" /><variable citdl="array()" line="1197" name="exclude" /><variable citdl="array()" line="1160" name="min" /></scope><scope doc="process multiple dependencies that have a name, like package deps&#xA;@param array&#xA;@return array&#xA;@access private" ilk="function" line="1216" lineend="1282" name="_processMultipleDepsName" returns="array" signature="array _processMultipleDepsName($deps)"><variable ilk="argument" line="1216" name="deps" /><variable line="1219" name="name" /><variable citdl="array_pop()" line="1253" name="min" /><variable citdl="test[]" line="1219" name="dep" /><variable citdl="min" line="1226" name="max" /><variable citdl="tests" line="1218" name="ret" /><variable citdl="tests[]" line="1225" name="test" /><variable citdl="array()" line="1269" name="exclude" /><variable citdl="dep[]" line="1220" name="d" /></scope></scope></scope>