<scope ilk="blob" lang="PHP" name="v2.php" src="/usr/share/php/PEAR/PackageFile/Generator/v2.php"><import line="20" module="System.php" /><import line="21" module="XML/Util.php" /><import line="139" module="Archive/Tar.php" /><scope doc="This class converts a PEAR_PackageFile_v2 object into any output format.&#xA;&#xA;Supported output formats include array, XML string (using S. Schmidt&apos;s&#xA;XML_Serializer, slightly customized)&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@author     Stephan Schmidt (original XML_Serializer code)&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.9.4&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.4.0a1" ilk="class" line="38" lineend="893" name="PEAR_PackageFile_Generator_v2"><variable citdl="array" doc="default options for the serialization&#xA;@access private&#xA;@var array $_defaultOptions" line="76" name="_defaultOptions" /><variable citdl="array" doc="options for the serialization&#xA;@access private&#xA;@var array $options" line="83" name="options" /><variable citdl="integer" doc="current tag depth&#xA;@var integer $_tagDepth" line="89" name="_tagDepth" /><variable citdl="string" doc="serilialized representation of the data&#xA;@var string $_serializedData" line="95" name="_serializedData" /><variable citdl="PEAR_PackageFile_v2" doc="@var PEAR_PackageFile_v2" line="99" name="_packagefile" /><scope attributes="__ctor__" doc="@param PEAR_PackageFile_v2" ilk="function" line="103" lineend="109" name="PEAR_PackageFile_Generator_v2" signature="PEAR_PackageFile_Generator_v2(&amp; $packagefile)"><variable ilk="argument" line="103" name="packagefile" /></scope><scope doc="&#xA;Returns string &#xA;" ilk="function" line="114" lineend="117" name="getPackagerVersion" returns="string" signature="string getPackagerVersion()" /><scope doc="@param PEAR_Packager&#xA;@param bool generate a .tgz or a .tar&#xA;@param string|null temporary directory to package in" ilk="function" line="124" lineend="128" name="toTgz" returns="this.toTgz2()" signature="toTgz(&amp; $packager, $compress = true, $where = null)"><variable ilk="argument" line="124" name="packager" /><variable default="true" ilk="argument" line="124" name="compress" /><variable default="null" ilk="argument" line="124" name="where" /><variable line="126" name="a" /></scope><scope doc="Package up both a package.xml and package2.xml for the same release&#xA;@param PEAR_Packager&#xA;@param PEAR_PackageFile_v1&#xA;@param bool generate a .tgz or a .tar&#xA;@param string|null temporary directory to package in" ilk="function" line="137" lineend="301" name="toTgz2" returns="PEAR.raiseError()" signature="toTgz2(&amp; $packager, &amp; $pf1, $compress = true, $where = null)"><variable ilk="argument" line="137" name="packager" /><variable ilk="argument" line="137" name="pf1" /><variable default="true" ilk="argument" line="137" name="compress" /><variable default="null" ilk="argument" line="137" name="where" /><variable citdl="Archive_Tar" line="272" name="tar" /><variable citdl="this.toPackageFile()" line="270" name="packagexml" /><variable citdl="orig[]" line="230" name="raw" /><variable citdl="str_replace()" line="230" name="tag" /><variable citdl="pkgdir" line="156" name="file" /><variable citdl="contents" line="187" name="contents" /><variable citdl="file" line="218" name="orig" /><variable citdl="task.startSession()" line="239" name="res" /><variable citdl="package" line="196" name="fname" /><variable citdl="this._packagefile.getPackage()" line="167" name="pkgver" /><variable citdl="this._packagefile.getPackageFile()" line="174" name="pkgfile" /><variable citdl="packageDir" line="202" name="tfile" /><variable citdl="pf1.getDefaultGenerator()" line="291" name="pfgen" /><variable citdl="fopen()" line="250" name="wp" /><variable citdl="tar.createModify()" line="275" name="ok" /><variable citdl="fileperms()" line="224" name="origperms" /><variable citdl="pf1" line="269" name="name" /><variable citdl="string" line="234" name="task" /><variable citdl="file" line="217" name="atts" /><variable citdl="dirname()" line="180" name="pkgdir" /><variable citdl="contents[]" line="195" name="package" /><variable citdl="int" line="185" name="i" /><variable citdl="getcwd()" line="168" name="dest_package" /><variable citdl="array()" line="184" name="filelist" /><variable citdl="compress" line="166" name="ext" /><variable citdl="pfgen.toPackageFile()" line="292" name="packagexml1" /><variable citdl="where" line="194" name="packageDir" /></scope><scope ilk="function" line="303" lineend="328" name="toPackageFile" returns="PEAR.raiseError()" signature="toPackageFile($where = null, $state = PEAR_VALIDATE_NORMAL, $name = &apos;package.xml&apos;)"><variable default="null" ilk="argument" line="303" name="where" /><variable default="PEAR_VALIDATE_NORMAL" ilk="argument" line="303" name="state" /><variable default="&apos;package.xml&apos;" ilk="argument" line="303" name="name" /><variable line="320" name="np" /><variable citdl="where" line="319" name="newpkgfile" /></scope><scope ilk="function" line="330" lineend="333" name="toV2" returns="this._packagefile" signature="&amp;toV2()" /><scope doc="&#xA;Return an XML document based on the package info (as returned&#xA;by the PEAR_Common::infoFrom* methods).&#xA;Returns string  - XML data&#xA;" ilk="function" line="341" lineend="407" name="toXml" returns="string" signature="string toXml($state = PEAR_VALIDATE_NORMAL, $options = array())"><variable default="PEAR_VALIDATE_NORMAL" ilk="argument" line="341" name="state" /><variable default="array()" ilk="argument" line="341" name="options" /><variable citdl="arr" line="373" name="release" /><variable citdl="this._packagefile.getArray()" line="355" name="arr" /><variable citdl="this._recursiveXmlFilelist()" line="390" name="use" /><variable citdl="arr" line="381" name="c" /><variable citdl="array_keys()[]" line="380" name="key" /></scope><scope ilk="function" line="410" lineend="429" name="_recursiveXmlFilelist" returns="dirs" signature="_recursiveXmlFilelist($list)"><variable ilk="argument" line="410" name="list" /><variable citdl="array()" line="412" name="dirs" /><variable citdl="list" line="416" name="attributes" /><variable citdl="list[]" line="419" name="a" /><variable citdl="list" line="414" name="file" /></scope><scope ilk="function" line="431" lineend="447" name="_addDir" signature="_addDir(&amp; $dirs, $dir, $file = null, $attributes = null, $tasks = null)"><variable ilk="argument" line="431" name="dirs" /><variable ilk="argument" line="431" name="dir" /><variable default="null" ilk="argument" line="431" name="file" /><variable default="null" ilk="argument" line="431" name="attributes" /><variable default="null" ilk="argument" line="431" name="tasks" /><variable citdl="array_shift()" line="442" name="curdir" /></scope><scope ilk="function" line="449" lineend="471" name="_formatDir" returns="array()" signature="_formatDir(&amp; $dirs)"><variable ilk="argument" line="449" name="dirs" /><variable citdl="array()" line="454" name="newdirs" /><variable citdl="dirs[]" line="464" name="contents" /><variable line="464" name="dir" /></scope><scope ilk="function" line="473" lineend="502" name="_deFormat" returns="array()" signature="_deFormat(&amp; $dirs)"><variable ilk="argument" line="473" name="dirs" /><variable line="494" name="name" /><variable citdl="contents[]" line="484" name="val" /><variable citdl="array()" line="481" name="newdir" /><variable citdl="array()" line="478" name="newdirs" /><variable line="484" name="tag" /><variable line="480" name="dir" /><variable citdl="dirs[]" line="494" name="file" /><variable citdl="dirs[]" line="480" name="contents" /></scope><scope doc="&#xA;reset all options to default options&#xA;Access   public&#xA;See      setOption(), XML_Unserializer()&#xA;" ilk="function" line="510" lineend="513" name="resetOptions" signature="resetOptions()" /><scope doc="&#xA;set an option&#xA;You can use this method if you do not want to set all options in the constructor&#xA;Access   public&#xA;See      resetOption(), XML_Serializer()&#xA;" ilk="function" line="523" lineend="526" name="setOption" signature="setOption($name, $value)"><variable ilk="argument" line="523" name="name" /><variable ilk="argument" line="523" name="value" /></scope><scope doc="&#xA;sets several options at once&#xA;You can use this method if you do not want to set all options in the constructor&#xA;Access   public&#xA;See      resetOption(), XML_Unserializer(), setOption()&#xA;" ilk="function" line="536" lineend="539" name="setOptions" signature="setOptions($options)"><variable ilk="argument" line="536" name="options" /></scope><scope doc="&#xA;serialize data&#xA;Access   public&#xA;&lt;mixed&gt; $data  - data to serialize&#xA;Returns boolean  - true on success, pear error on failure&#xA;" ilk="function" line="548" lineend="594" name="serialize" returns="boolean" signature="boolean serialize(mixed $data, $options = null)"><variable citdl="mixed" ilk="argument" line="548" name="data" /><variable default="null" ilk="argument" line="548" name="options" /><variable citdl="array()" line="581" name="atts" /><variable line="568" name="tagName" /><variable citdl="this.options" line="553" name="optionsBak" /><variable line="582" name="encoding" /></scope><variable line="569" name="tagName" /><scope doc="&#xA;get the result of the serialization&#xA;Access public&#xA;Returns string  - serialized XML&#xA;" ilk="function" line="602" lineend="608" name="getSerializedData" returns="string" signature="string getSerializedData()" /><scope doc="&#xA;serialize any value&#xA;This method checks for the type of the value and calls the appropriate method&#xA;Access private&#xA;&lt;mixed&gt; $value  - &#xA;&lt;string&gt; $tagName  - &#xA;&lt;array&gt; $attributes  - &#xA;Returns string &#xA;" ilk="function" line="621" lineend="636" name="_serializeValue" returns="string" signature="string _serializeValue(mixed $value, string $tagName = null, array $attributes = array())"><variable citdl="mixed" ilk="argument" line="621" name="value" /><variable citdl="string" default="null" ilk="argument" line="621" name="tagName" /><variable citdl="array" default="array()" ilk="argument" line="621" name="attributes" /><variable citdl="this._serializeArray()" line="624" name="xml" /><variable citdl="array()" line="632" name="tag" /></scope><scope doc="&#xA;serialize an array&#xA;Access   private&#xA;&lt;array&gt; $array  - array to serialize&#xA;&lt;string&gt; $tagName  - name of the root tag&#xA;&lt;array&gt; $attributes  - attributes for the root tag&#xA;Returns string  - $string serialized data&#xA;Uses     XML_Util::isValidName() to check, whether key has to be substituted&#xA;" ilk="function" line="648" lineend="829" name="_serializeArray" returns="string" signature="string _serializeArray(array &amp; $array, string $tagName = null, array $attributes = array())"><variable citdl="array" ilk="argument" line="648" name="array" /><variable citdl="string" default="null" ilk="argument" line="648" name="tagName" /><variable citdl="array" default="array()" ilk="argument" line="648" name="attributes" /><variable citdl="this.options" line="745" name="tmp" /><variable citdl="array()" line="763" name="atts" /><variable citdl="array" line="650" name="_content" /><variable citdl="array[]" line="680" name="val" /><variable citdl="array()" line="741" name="tag" /><variable citdl="array[]" line="727" name="value" /><variable citdl="this._curdir" line="694" name="savedir" /><variable citdl="get_class()" line="680" name="key" /><variable citdl="boolean" line="676" name="indexed" /><variable citdl="key" line="753" name="origKey" /><variable citdl="XML_Util.isValidName()" line="755" name="valid" /><variable citdl="string" line="688" name="string" /></scope><variable citdl="string" line="692" name="_curdir" /><scope doc="&#xA;create a tag from an array&#xA;this method awaits an array in the following format&#xA;array(&#xA;      &apos;qname&apos;        =&gt; $tagName,&#xA;      &apos;attributes&apos;   =&gt; array(),&#xA;      &apos;content&apos;      =&gt; $content,      // optional&#xA;      &apos;namespace&apos;    =&gt; $namespace     // optional&#xA;      &apos;namespaceUri&apos; =&gt; $namespaceUri  // optional&#xA;  )&#xA;Access   private&#xA;&lt;array&gt; $tag  - tag definition&#xA;&lt;boolean&gt; $replaceEntities  - whether to replace XML entities in content or not&#xA;Returns string  - $string XML tag&#xA;" ilk="function" line="847" lineend="892" name="_createXMLTag" returns="string" signature="string _createXMLTag(array $tag, boolean $replaceEntities = true)"><variable citdl="array" ilk="argument" line="847" name="tag" /><variable citdl="boolean" default="true" ilk="argument" line="847" name="replaceEntities" /><variable citdl="str_repeat()" line="851" name="indent" /><variable citdl="boolean" line="850" name="multiline" /></scope></scope></scope>